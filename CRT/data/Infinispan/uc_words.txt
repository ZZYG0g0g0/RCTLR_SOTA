[ ISPN-3717 ] Add support for index-less queries using the EntryRetriever < p > The current Lucene-based search implementation requires indexes for all fields that are referenced in queries . < /p > < p > Need to be able to query also for non-indexed fields . M/R is a potential implementation idea. < /p > 
[ ISPN-1189 ] config schema - clustering mode should validate format of the string < p > currently the schema for the clustering mode says it s a string and < br/ > the mode is decided by first letter of the string . this means that any garbage starting with the correct letter may lead to use of a specific mode e.g . : < /p > < p > lasjadgadfg - & gt ; local < br/ > rhdbhgh - & gt ; replication < br/ > dfghbmjfgh - & gt ; distribution < br/ > IlkHhdf - & gt ; invalidation < /p > < p > what about forcing only the documented values < br/ > For distribution , set mode to either d , dist or distribution . For replication , use either r , repl or replication . Finally , for invalidation , i , inv or invalidation . < br/ > + LOCAL < /p > 
[ ISPN-142 ] More JMX information to be exposed < p > This is a wish-list of what folks want to see exposed via JMX ( and JOPR ) . Please add to the comments with what you would like to see. < /p > 
[ ISPN-1430 ] AdvancedCache.addInterceptor ( ) methods don t provide success/failure feedback < p > Problem : < br/ > cache.getAdvancedCache ( ) .addInterceptorAfter ( new ErrorInducingInterceptor ( ) , NonTransactionalLockingInterceptor.class ) ; < br/ > if NonTransactionalLockingInterceptor doesn t exist in the chain then the method return silently without informing the user that it didn t succeed . This is not API friendly. < /p > < p > Suggested solution : throw an exception to inform the user that his attempt is not correct . < /p > 
[ ISPN-1518 ] Log the Infinispan version information once < p > When running unit tests for a system that uses Infinispan , the log is filled with the following messages : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > INFO ISPN000128 : Infinispan version : Infinispan Brahma 5.1.0.BETA4 < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > It looks like this may be logged each time an Infinispan cache manager is instantiated , but it would be really nice if this were done only once , perhaps in a static initializer for one of the classes . This would likely mean little change for production systems. < /p > 
[ ISPN-152 ] CacheManager to allow retrieving Configuration instances and defining configurations based on any existing config < p > Enhance CacheManager API so that we can define configurations based on named caches other than the default one and also a way to retrieve Configuration instances from CacheManager without starting the cache : < /p > < p > So , redefine defineCache methods as : < /p > < p > Configuration defineConfiguration ( String configurationName , Configuration overrides ) < br/ > // registers and names a NEW configuration , based on the default cfg and the overrides passed in < /p > < p > Configuration defineConfiguration ( String configurationName , String templateName , Configuration overrides ) < br/ > // registers and names a NEW configuration , based on an existing , predefined configuration and the overrides passed in < /p > 
[ ISPN-1540 ] Refactor distribution interceptor < p > DistributionInterceptor , as it looks now is unnecessary complex . Before adding more functionality on top of it ( i.e . < a href= https : //issues.jboss.org/browse/ISPN-1539 title= Optimisation : reduce the number of RPCs when L1 is enabled ( default ) class= issue-link data-issue-key= ISPN-1539 > < del > ISPN-1539 < /del > < /a > ) it should be refactored : < /p > < ul class= alternate type= square > < li > extract L1 logic into a different interceptor < /li > < li > this would require moving the StateTransferLock logic into another interceptor as well < /li > < li > now that we have separation between tx and non-tx caches , we can extract the remaining logic into TransactionalDistributionInterceptor and NonTransactional ... < /li > < /ul > 
[ ISPN-1542 ] InvocationContext should not keep entries in an BidirectionalLinkedHashMap < p > At the moment the InvocationContext keeps the looked up entries in an BidirectionalLinkedHashMap . It uses the BidirectionalLinkedHashMap in order to commit the entries in the reversed order in which they were added to the context . This is an inherited feature from JBossCache , where it made sense due to cache s tree structure . It doesn t make sense in Infinispan though , and it adds an unnecessary burden to the InvocationContext . < br/ > The problem is particularly performance costly in the case of non-tx caches , where most of the operations only need a single entry lookup to be held in the invocation context. < /p > 
[ ISPN-2772 ] Implement REPLICATED mode as a degenerated DISTRIBUTED mode ( nowOwners > =clusterSize ) < p > This has already been done in the case of state transfer , where the distribution state transfer code is reused for replicated caches as well. < /p > < p > The main reason behind this improvement is to simplify/reduce the code . Also there will be some additional benefits : < /p > < ul class= alternate type= square > < li > ATM in replicated mode , the JGroups coordinator always plays the role of main lock owner . The coordinator might get overwhelmed as it has to process the additional TxCompletionNotificationCommand on every transaction ( direct consequence of being main lock owner ) . OTOH in distributed mode , the lock owner is spread between the cluster members. < /li > < /ul > < p > As an optimisation , on REPL mode , we can use multicasting ( when on UDP ) for message sending. < /p > 
[ ISPN-1545 ] Remove log verbosity during cache shutdown < p > When cache shuts down the transaction table recalculates its minViewId value based on the new topology . When the whole cluster shuts down though , the thread that recalculates might throw an exception ( expected ) because it s internal components ( RPC in this example ) are not responding anymore . This causes a lot of log noise in the logs , which should be removed : < br/ > 2011-11-16 17:08:29,045 WARN < span class= error > & # 91 ; jta & # 93 ; < /span > ( Transaction Reaper Worker 0 ) ARJUNA16045 : attempted rollback of & lt ; formatId=131076 , gtrid_length=29 , bqual_length=28 , tx_uid=0 : ffffac11fa3e : c0a2:4ec3df75 : a055 , node_name=1 , branch_uid=0 : ffffac11fa3e : c0a2:4ec3df75 : a056 , eis_name=unknown eis name & gt ; ( TransactionXaAdapter { localTransaction=LocalXaTransaction < /p > { xid= & lt ; formatId=131076 , gtrid_length=29 , bqual_length=28 , tx_uid=0 : ffffac11fa3e : c0a2:4ec3df75 : a055 , node_name=1 , branch_uid=0 : ffffac11fa3e : c0a2:4ec3df75 : a056 , eis_name=unknown eis name & gt ; } < p > LocalTransaction < /p > { remoteLockedNodes= [ 9124b480-6ae0-5267-d9f8-3d66ea7ec581 , 86c0fc2d-a0da-adb4-5343-940d6bdb1aa0 ] , isMarkedForRollback=true , transaction=TransactionImple & lt ; ac , BasicAction : 0 : ffffac11fa3e : c0a2:4ec3df75 : a055 status : ActionStatus.ABORTING & gt ; , lockedKeys=null , backupKeyLocks=null , viewId=1 } < p > org.infinispan.transaction.xa.LocalXaTransaction @ 2947 } ) failed with exception code - < br/ > org.infinispan.CacheException : The cache has been stopped and invocations are not allowed ! < br/ > at org.infinispan.remoting.transport.jgroups.JGroupsTransport.getViewId ( JGroupsTransport.java:197 ) < br/ > at org.infinispan.transaction.TransactionTable.getCurrentViewId ( TransactionTable.java:372 ) < br/ > at org.infinispan.transaction.TransactionTable.recalculateMinViewIdIfNeeded ( TransactionTable.java:387 ) < br/ > at org.infinispan.transaction.TransactionTable.removeLocalTransactionInternal ( TransactionTable.java:318 ) < br/ > at org.infinispan.transaction.TransactionTable.removeLocalTransaction ( TransactionTable.java:306 ) < br/ > at org.infinispan.transaction.xa.XaTransactionTable.removeLocalTransaction ( XaTransactionTable.java:61 ) < br/ > at org.infinispan.transaction.TransactionTable.failureCompletingTransaction ( TransactionTable.java:188 ) < br/ > at org.infinispan.transaction.TransactionCoordinator.rollback ( TransactionCoordinator.java:145 ) < br/ > at org.infinispan.transaction.xa.TransactionXaAdapter.rollback ( TransactionXaAdapter.java:136 ) < br/ > at com.arjuna.ats.internal.jta.resources.arjunacore.XAResourceRecord.topLevelAbort ( XAResourceRecord.java:337 ) < br/ > at com.arjuna.ats.arjuna.coordinator.BasicAction.doAbort ( BasicAction.java:2869 ) < br/ > at com.arjuna.ats.arjuna.coordinator.BasicAction.doAbort ( BasicAction.java:2848 ) < br/ > at com.arjuna.ats.arjuna.coordinator.BasicAction.Abort ( BasicAction.java:1613 ) < br/ > at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.cancel ( TwoPhaseCoordinator.java:119 ) < br/ > at com.arjuna.ats.arjuna.AtomicAction.cancel ( AtomicAction.java:212 ) < br/ > at com.arjuna.ats.arjuna.coordinator.TransactionReaper.doCancellations ( TransactionReaper.java:367 ) < br/ > at com.arjuna.ats.internal.arjuna.coordinator.ReaperWorkerThread.run ( ReaperWorkerThread.java:79 ) < /p > 
[ ISPN-1565 ] Allow configuration of Hot Rod client connection timeout < p > Currently it s only possible to specify socket timeout that applies for reading from the socket. < /p > 
[ ISPN-160 ] Add set/get ops for TransactionManagerLookup < p > Add the following two methods to Configuration in order to enable injection of transaction manager lookup instances to which parameters must be passed and hence , instantiation via reflection won t work : < /p > < p > public void setTransactionManagerLookup ( TransactionManagerLookup transactionManagerLookup ) < br/ > public TransactionManagerLookup getTransactionManagerLookup ( ) < /p > 
[ ISPN-166 ] Immutables should be optimised for more set implementations < p > Unknown set types go through a lot of scanning - often involving reflection - before a simple copy constructor is used . These include the commonly used : < /p > < p > ConcurrentHashMap $ KeySet < br/ > ConcurrentHashMap $ EntrySet < br/ > FastCopyHashMap $ KeySet < br/ > FastCopyHashMap $ EntrySet < br/ > Collections $ EmptySet < br/ > Collections $ SingletonSet < br/ > Collections $ EmptyList < br/ > Collections $ SingletonList < br/ > Collections $ EmptyMap < br/ > Collections $ SingletonMap < /p > < p > these should be treated accordingly to avoid reflection calls. < /p > 
[ ISPN-1665 ] Add combiner function to MapReduce < p > Add functionality to optionally use a combiner between Map and Reduce phases ( see < a href= http : //research.google.com/archive/mapreduce.html class= external-link rel= nofollow > http : //research.google.com/archive/mapreduce.html < /a > part 4.3 Combiner Function ) . This enables to adjust API to be less restrictive - Reduce.reduce function could consume and return different types of objects. < /p > 
[ ISPN-1666 ] Add EmbeddedCacheManager.getCacheConfiguration ( String ) < p > Currently , EmbeddedCacheManager provides no mechanism to retrieve a defined cache configuration without starting the corresponding cache. < br/ > Formerly , one could achieve this via the defineConfiguration ( String , Configuration ) method , by passing in an empty Configuration object , however , this will not work with the new configuration API - the returned object will always be equivalent the one passed in. < /p > 
[ ISPN-1667 ] Add EmbeddedCacheManager.getGlobalConfiguration ( ) variant for new configuration API < p > The current EmbeddedCacheManager.getGlobalConfiguration ( ) method returns the deprecated org.infinispan.config.GlobalConfiguration object . There is currently no method to return the org.infinispan.configuration.global.GlobalConfiguration object with which the cache manager was created. < /p > 
[ ISPN-1674 ] Use SingleKeyNonTxInvocationContext where possible < p > A CPU and memory performance improvement . SingleKeyNonTxInvocationContext is used in some cases where we know only a single key is accessed by a command . But there are other places ( evict , putForExternalRead ) where a map-like context is still used. < /p > 
[ ISPN-6998 ] Replace bounded hash map with alternative < p > Recently we have been looking at replacing bounded concurrent hash map with something like Caffeine . We also need to get rid of equivalence at the same time. < /p > 
[ ISPN-1710 ] Use Synchronization enlistment ( rather than XAResource ) with BatchModeTransactionManager < p > XAResource enlistment is less efficient than Synchronization-based enlistment . As BatchModeTransactionManager is built on top of DummyTransactionManager which doesn t support recovery , no point in using XAResource enlistment over Synchronization-based enlistment. < /p > 
[ ISPN-1729 ] Add javadoc and xsd doc for custom interceptors < p > This was missing from the old config so is missing from the new. < /p > 
[ ISPN-1733 ] UnsafeConfiguration.unreliableReturnValues missing javadoc and xsddoc < p > This is missing on both the UnsafeConfiguration , UnsafeConfigurationBuilder and the xml xsd attribute. < /p > 
[ ISPN-174 ] CacheManager to expose a list of cache names < p > Useful helper method < /p > 
[ ISPN-1794 ] Make connection refused exceptions TRACE < p > This is just a proposal , feel free to reject. < /p > < p > Default behaviour in PropsKeyedObjectPoolFactory is < br/ > minIdle = 1 < br/ > timeBetweenEvictionRunsMillis = 2min < br/ > i.e . after 2minutes of idle RemoteCacheManager will try to ensure at least one connection and will try to create one. < br/ > This might be a surprise for user to get this WARNING without doing anything : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > 2012-01-26 15:05:00,816 138699 WARN [ org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport ] ( Timer-1 : ) ISPN004008 : Could not connect to server : test1/192.168.11.101:11222 < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > java.net.ConnectException : Connection refused < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at sun.nio.ch.SocketChannelImpl.checkConnect ( Native Method ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at sun.nio.ch.SocketChannelImpl.finishConnect ( SocketChannelImpl.java:567 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at sun.nio.ch.SocketAdaptor.connect ( SocketAdaptor.java:100 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.client.hotrod.impl.transport.tcp.TcpTransport. & lt ; init & gt ; ( TcpTransport.java:80 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.client.hotrod.impl.transport.tcp.TransportObjectFactory.makeObject ( TransportObjectFactory.java:57 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.apache.commons.pool.impl.GenericKeyedObjectPool.addObject ( GenericKeyedObjectPool.java:1668 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.apache.commons.pool.impl.GenericKeyedObjectPool.ensureMinIdle ( GenericKeyedObjectPool.java:2038 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.apache.commons.pool.impl.GenericKeyedObjectPool.ensureMinIdle ( GenericKeyedObjectPool.java:2003 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.apache.commons.pool.impl.GenericKeyedObjectPool.access $ 1600 ( GenericKeyedObjectPool.java:203 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.apache.commons.pool.impl.GenericKeyedObjectPool $ Evictor.run ( GenericKeyedObjectPool.java:2282 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at java.util.TimerThread.mainLoop ( Timer.java:512 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at java.util.TimerThread.run ( Timer.java:462 ) < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > of course it s easy to change this via minIdle property , I just think this is a strange default and IMHO it should be 0 instead of 1. < /p > < p > WDYT ? < /p > 
[ ISPN-1797 ] Implement MongoDB based cache store < p > I have an implementation to submit if you are interested. < /p > 
[ ISPN-1801 ] Virtual nodes should be enabled by default < p > ATM the default value for virtualNodes is 1 . This means that the wheel-share each node has can be very uneven for small ( up to 15 nodes ) clusters. < br/ > Increasing this value even to a small number ( 10-30 ) would significantly improve each node s share of wheel and the chance for a well balanced data distribution over the cluster . < /p > < p > Here are some suggestions from an email from Dan : < br/ > & lt ; snip & gt ; < /p > < p > I ve been working on a test to search for an optimal default value here : < br/ > < a href= https : //github.com/danberindei/infinispan/commit/983c0328dc40be9609fcabb767dd46f9b98af464 class= external-link rel= nofollow > https : //github.com/danberindei/infinispan/commit/983c0328dc40be9609fcabb767dd46f9b98af464 < /a > < /p > < p > I m measuring both the number of keys for which a node is primary < br/ > owner and the number of keys for which it is one of the owners < br/ > compared to the ideal distribution ( K/N keys on each node ) . The former < br/ > tells us how much more work the node could be expected to do , the < br/ > latter how much memory the node is likely to need. < /p > < p > I m only running 10000 loops , so the max figure is not the absolute < br/ > maximum . But it s certainly bigger than the 0.9999 percentile. < /p > < p > The full results are here : < br/ > < a href= https : //github.com/infinispan/infinispan/blob/master/core/src/test/java/org/infinispan/distribution/virtualnodes/vnodes_key_dist.txt class= external-link rel= nofollow > https : //github.com/infinispan/infinispan/blob/master/core/src/test/java/org/infinispan/distribution/virtualnodes/vnodes_key_dist.txt < /a > < /p > < p > The uniformity of the distribution goes up with the number of virtual < br/ > nodes but down with the number of physical nodes . I think we should go < br/ > with a default of 48 nodes ( or 50 if you prefer decimal ) . With 32 < br/ > nodes , there s only a 0.1 % chance that a node will hold more than 1.35 < /p > < ul > < li > K/N keys , and a 0.1 % chance that the node will be primary owner for < br/ > more than 1.5 * K/N keys. < /li > < /ul > < p > We could go higher , but we run against the risk of node addresses < br/ > colliding on the hash wheel . According to the formula on the Birthday < br/ > Paradox page ( < a href= http : //en.wikipedia.org/wiki/Birthday_problem class= external-link rel= nofollow > http : //en.wikipedia.org/wiki/Birthday_problem < /a > ) , we only < br/ > need 2072 addresses on our 2^31 hash wheel to get a 0.1 % chance of < br/ > collision . That means 21 nodes * 96 virtual nodes , 32 nodes * 64 < br/ > virtual nodes or 43 nodes * 48 virtual nodes. < /p > < p > & lt ; /snip & gt ; < /p > 
[ ISPN-6919 ] Improve non-tx writes ( triangle ) < p > The current algorithm has 4 messages in the network ( worst case ) happended sequentially : < br/ > 1 : originator = & gt ; primary owner < br/ > 2 : primary owner = & gt ; backups < br/ > 3 : backups = & gt ; primary owner ( ack ) < br/ > 4 : primary owner = & gt ; originator ( reply ) < /p > < p > The algorithm can be improved to the following : < br/ > 1 : originator = & gt ; primary owner < br/ > 2 : primary owner = & gt ; backups & amp ; primary owner = & gt ; originator ( parallel ) < br/ > 3 : backups = & gt ; originator & amp ; backups = & gt ; primary owners ( acks ) < /p > < p > The main flow would be : originator = & gt ; primary = & gt ; backups = & gt ; originator ( & lt ; = there is the triangle < img class= emoticon src= https : //issues.jboss.org/images/icons/emoticons/smile.png height= 16 width= 16 align= absmiddle alt= border= 0 / > ) < /p > 
[ ISPN-181 ] Specify node name in JGroups channel < p > Should be a simple configuration element ( perhaps in & lt ; transport ... & gt ; ) where node-name can be specified , and passed in to the JGroups channel ( channel.setName ( ) ) for clearer logging. < /p > 
[ ISPN-1817 ] Lazily initialize executors and scheduled executors < p > Unused JDK executors can be expensive even when idle . A lazy initializing facade on first use is a better approach. < /p > 
[ ISPN-186 ] Smart L1 cache invalidation < p > Need to build a mechanism in which L1 invalidation is NOT multicast , but instead is unicast < em > if necessary < /em > to specific nodes that may have cached a given entry . This can be detected by maintaining a list of nodes who have requested a key via a remote get , but this would need to be relayed by all data owners. < /p > < p > Benefits would be performance by removing unnecessary invalidation where this is not needed , and by reducing noise in network stacks of most nodes. < /p > 
[ ISPN-1976 ] Expose cluster partition name < p > < span class= error > & # 91 ; 11:07:36 & # 93 ; < /span > & lt ; pilhuhn & gt ; how can I get the cluster partition name in as7 Similar to what was in as4/5 ? Is that now on subsystem=infinispan/cache= * : aliases ? < br/ > < span class= error > & # 91 ; 11:32:15 & # 93 ; < /span > & lt ; +galderz & gt ; pilhuhn , i don t think we re exposing it : < a href= http : //docs.jboss.org/infinispan/5.1/apidocs/jmxComponents.html class= external-link rel= nofollow > http : //docs.jboss.org/infinispan/5.1/apidocs/jmxComponents.html < /a > < br/ > < span class= error > & # 91 ; 11:32:30 & # 93 ; < /span > & lt ; +galderz & gt ; we could expose it via the cache manager < br/ > < span class= error > & # 91 ; 11:33:12 & # 93 ; < /span > & lt ; +galderz & gt ; pilhuhn , can u add a jira for that ? < /p > < p > For as7 , this needs to be exposed within the as7 management tree. < /p > 
[ ISPN-198 ] Ability to tune data container concurrency levels < p > See discussion in < a href= http : //lists.jboss.org/pipermail/infinispan-dev/2009-September/001362.html class= external-link rel= nofollow > http : //lists.jboss.org/pipermail/infinispan-dev/2009-September/001362.html < /a > < /p > 
[ ISPN-2021 ] Make ReplicationQueueImpl # configuration usable by subclasses < p > ... to allow subclasses to access this variable. < /p > 
[ ISPN-558 ] XAResource implementation in ISPN to become fully stateless < p > This is needed as XAResource.prepare/commit/rollback might be called even if XAResource is currently associated to a transaction. < /p > 
[ ISPN-2087 ] Listen for state transfer events to keep indexes in sync with datacontainers < p > When the index is not shared across nodes but is supposed to contain only the data being owned by the node , we need to keep this data in sync when the view changes. < /p > < p > See also < a href= https : //community.jboss.org/docs/DOC-18370 class= external-link rel= nofollow > https : //community.jboss.org/docs/DOC-18370 < /a > < /p > 
[ ISPN-2104 ] Add methods with java.util.concurrent.TimeUnit for specifying expiration intervals < p > eg. < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ConfigurationBuilder ( ) .expiration ( ) .lifespan ( 60000L ) - & gt ; ConfigurationBuilder ( ) .expiration ( ) .lifespan ( < /span > < span style= color : # 009900 ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > 60 < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > , SECONDS ) < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > This would make the interval unit more obvious. < /p > 
[ ISPN-2200 ] Make ClusterCacheLoader configurable via new configuration API < p > ClusterCacheLoader should have a proper XML configuration element and a org.infinispan.configuration compatible API < /p > 
[ ISPN-2221 ] Configuration builders and parsers for JDBC Cache Store < p > Add configuration builders and parser support to the JDBC Cache Store < /p > 
[ ISPN-2222 ] Configuration builders and parsers for Cassandra Cache Store < p > Add configuration builders and parser support to the Cassandra Cache Store < /p > 
[ ISPN-2223 ] Configuration builders and parsers for BDBJE Cache Store < p > Add configuration builders and parser support to the BDBJE Cache Store < /p > 
[ ISPN-2224 ] Configuration builders and parsers for JDBM Cache Store < p > Add configuration builders and parser support to the JDBM Cache Store < /p > 
[ ISPN-2225 ] Configuration builders and parsers for HBase Cache Store < p > Add configuration builders and parser support to the HBase Cache Store < /p > 
[ ISPN-2226 ] Configuration builders and parsers for Remote Cache Store < p > Add configuration builders and parser support to the Remote Cache Store < /p > 
[ ISPN-2227 ] Configuration builders and parsers for Cloud Cache Store < p > Add configuration builders and parser support to the Cloud Cache Store < /p > 
[ ISPN-223 ] CacheManager needs to identifiable < p > We need CacheManager s to expose some kind of name or id that differenciates them from the rest . < br/ > The jmxDomain is not enough since you could have different machines running different VMs deploying the CacheManager instances with the same jmxDomain and this is valid. < /p > < p > The reason we need this is so that Jopr can show different cache manager s amongst their resources . Currently , it can only show one. < /p > 
[ ISPN-2263 ] ConcurrentModificationException during cancellation of outbound state transfer < p > The following exception is thrown on the sender node when a receiving node leaves the cache during state transfer . The leave should result in cancellation of outbound state transfers but this fails with the exception seen below : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Caused by : java.util.ConcurrentModificationException < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at java.util.AbstractList $ Itr.checkForComodification ( AbstractList.java:372 ) [ classes.jar:1.6.0_33 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at java.util.AbstractList $ Itr.next ( AbstractList.java:343 ) [ classes.jar:1.6.0_33 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.statetransfer.StateProviderImpl.cancelOutboundTransfer ( StateProviderImpl.java:285 ) [ infinispan-core-5.2.0.Alpha3.jar:5.2.0.Alpha3 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.statetransfer.StateRequestCommand.perform ( StateRequestCommand.java:96 ) [ infinispan-core-5.2.0.Alpha3.jar:5.2.0.Alpha3 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.remoting.InboundInvocationHandlerImpl.handleInternal ( InboundInvocationHandlerImpl.java:95 ) [ infinispan-core-5.2.0.Alpha3.jar:5.2.0.Alpha3 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.remoting.InboundInvocationHandlerImpl.handleWithWaitForBlocks ( InboundInvocationHandlerImpl.java:110 ) [ infinispan-core-5.2.0.Alpha3.jar:5.2.0.Alpha3 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.remoting.InboundInvocationHandlerImpl.handle ( InboundInvocationHandlerImpl.java:82 ) [ infinispan-core-5.2.0.Alpha3.jar:5.2.0.Alpha3 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.remoting.transport.jgroups.CommandAwareRpcDispatcher.executeCommand ( CommandAwareRpcDispatcher.java:228 ) [ infinispan-core-5.2.0.Alpha3.jar:5.2.0.Alpha3 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.infinispan.remoting.transport.jgroups.CommandAwareRpcDispatcher.handle ( CommandAwareRpcDispatcher.java:208 ) [ infinispan-core-5.2.0.Alpha3.jar:5.2.0.Alpha3 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.blocks.RequestCorrelator.handleRequest ( RequestCorrelator.java:465 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.blocks.RequestCorrelator.receiveMessage ( RequestCorrelator.java:372 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.blocks.RequestCorrelator.receive ( RequestCorrelator.java:247 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.blocks.MessageDispatcher $ ProtocolAdapter.up ( MessageDispatcher.java:601 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.blocks.mux.MuxUpHandler.up ( MuxUpHandler.java:130 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.JChannel.up ( JChannel.java:715 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.stack.ProtocolStack.up ( ProtocolStack.java:1020 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.RSVP.up ( RSVP.java:192 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.FRAG2.up ( FRAG2.java:181 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.FlowControl.up ( FlowControl.java:418 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.FlowControl.up ( FlowControl.java:400 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.pbcast.GMS.up ( GMS.java:899 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.pbcast.STABLE.up ( STABLE.java:244 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.UNICAST2.handleDataReceived ( UNICAST2.java:744 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.UNICAST2.up ( UNICAST2.java:414 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.pbcast.NAKACK.up ( NAKACK.java:608 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.BARRIER.up ( BARRIER.java:102 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.VERIFY_SUSPECT.up ( VERIFY_SUSPECT.java:143 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.FD.up ( FD.java:273 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.FD_SOCK.up ( FD_SOCK.java:288 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.MERGE2.up ( MERGE2.java:205 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.Discovery.up ( Discovery.java:359 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.TP $ ProtocolAdapter.up ( TP.java:2568 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.TP.passMessageUp ( TP.java:1211 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.TP $ IncomingPacket.handleMyMessage ( TP.java:1775 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at org.jgroups.protocols.TP $ IncomingPacket.run ( TP.java:1748 ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at java.util.concurrent.ThreadPoolExecutor $ Worker.runTask ( ThreadPoolExecutor.java:886 ) [ classes.jar:1.6.0_33 ] < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:908 ) [ classes.jar:1.6.0_33 ] < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > 
[ ISPN-227 ] Have Lucene LockManager use atomic operations < p > I ve wrongly assigned myself to this issue , reassigning Sanne < /p > 
[ ISPN-3023 ] Re-implement BoundedConcurrentHashMap using CHMv8 designs < p > This is better than the current segment-based approach , in terms of memory footprint as well as performance under high concurrency. < /p > 
[ ISPN-2333 ] StateTransferInterceptor.handleTopologyAffectedCommand should be invoked for all TopologyAffectedCommands < p > Now it is invoked from handleDefault ( ) only for FlagAffectedCommands. < /p > < p > This was mistakenly introduced while fixing < a href= https : //issues.jboss.org/browse/ISPN-1669 title= Flag checks should be done on commands and not context class= issue-link data-issue-key= ISPN-1669 > < del > ISPN-1669 < /del > < /a > . < /p > 
[ ISPN-2343 ] Exception thrown to user from xsite ROC when failurePolicy is set to WARN < p > This doesn t exhibit on 5.2.0.Alpha4 but only after upgrading to jgroups 3.2.0.Alpha2 and is caused by the fact that now , if another site is down , jgroups throws an org.jgroups.UnreachableException is in not caught. < /p > 
[ ISPN-2351 ] Operate the Query MassIndexer via JMX < p > The MassIndexer is not exposed on JMX , we should expose it. < /p > 
[ ISPN-2382 ] Transaction boundary commands are not forwarded during state transfer < p > Two issues : < br/ > 1 . StateTransferInterceptor.handleTxCommand , when invoking handleTopologyAffectedCommand internally , wrongly calculates the 2nd param of the invocation < br/ > 2 . StateTransferInterceptor.handleTopologyAffectedCommand < br/ > This logic filters out commands that should be forwarded ( e.g . late commands that happened before state transfer completed ) : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > if < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ( pendingCh ! = < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > null < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & amp ; & amp ; cmdTopologyId & lt ; localTopologyId + < /span > < span style= color : # 009900 ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > 1 < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ) { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ConsistentHash writeCh = cacheTopology.getWriteConsistentHash ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Set & lt ; Object & gt ; affectedKeys = getAffectedKeys ( ctx , command ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Set & lt ; Address & gt ; newTargets = writeCh.locateAllOwners ( affectedKeys ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > newTargets.remove ( rpcManager.getAddress ( ) ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > if < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ( ! newTargets.isEmpty ( ) ) { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : # 008200 ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // Update the topology id to prevent cycles < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > command.setTopologyId ( localTopologyId ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > log.tracef ( < /span > < span style= color : blue ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Forwarding command % s to new targets % s < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > , command , newTargets ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : # 008200 ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // TODO find a way to forward the command async if it was received async < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > rpcManager.invokeRemotely ( newTargets , command , < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > true < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > , < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > false < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > The if above should be removed. < /p > 
[ ISPN-2431 ] Default task failover policy enhancements < p > The new failover policy enhancements behave differently than the 5.1 release . The default is a random failover , which causes problems in my environment due to pessimistic locks being acquired . The default policy should be none < /p > < p > Secondly , if a user specifies a key set , the failover policy should respect that . Using pessimistic locks as an example , a valid optimization would be to submit on the local data owner to avoid additional RPCs . A random node failover policy really doesn t fit in this case. < /p > 
[ ISPN-2460 ] Allow 1PCs for synchronous xsite replication < p > We should allow a 1PC optimization for xsite synchronous replication . Since synchronous replication is performed in the originating site s transactional context and the remote locks are acquired at prepare time , we can still guarantee consistency of data . < /p > < p > The default should be to use 1PC . However , this feature will require a new configuration option . & lt ; backup ... use2PC= true / & gt ; to allow the traditional 2PC to be enabled. < /p > 
[ ISPN-2464 ] Allow DistributedExecutorService to control shutdown of given local ExecutorService < p > Constructors that receive a thread pool from clients not shut it down on stop : it s a good rule of resource management for the creator of the resource ( thread pool for us ) to manage the shutdown as well. < br/ > So here s how I think this can be solved : < br/ > 1 . Add a new Ctor that besides the pool also has a flag to allow us to take ownership of the pool ( i.e . we ll destroy it when the DistExec is shutdow ) < br/ > 2. leave the current constructor as it is , make it internally invoke 1. with takeOwnership=true ( this would preserve backward compatibility ) < br/ > 3. amend the executor to only shutdown the thread pool if it has ownership < br/ > 4. document the threadpool ownership in all constructors < /p > 
[ ISPN-256 ] Enable Infinispan SPIs to implement their own commands < p > Much nicer IMHO would be a nice SPI / plug point to allow applications to extend the set of commands . Let an app create an ExtensionCommand ; if that comes in off the channel pass it off to the handler the application registered. < /p > < p > This could for example be used instead of the solution currently used in < a href= http : //opensource.atlassian.com/projects/hibernate/browse/HHH-3818 class= external-link rel= nofollow > http : //opensource.atlassian.com/projects/hibernate/browse/HHH-3818 < /a > . In HHH-3818 , the cache is used as a notification vehicle which is a bit of a hack and has some limitations for example when trying to implement a similar solution for evict ( key ) op. < /p > < p > Another use case for it would be HTTP session ownership , from Brian Stansberry : < /p > < p > ( 09:32:09 AM ) brian_stansberry : ... it s just that only 1 server at a time s/b able to use a session < br/ > ( 09:32:25 AM ) brian_stansberry : so on failover i send an extension command requesting ownership < br/ > ( 09:33:19 AM ) brian_stansberry : there s actually a servlet spec requirement that only one server at a time access a session < br/ > ( 09:33:23 AM ) brian_stansberry : ejb spec too < br/ > ( 09:33:37 AM ) brian_stansberry : we don t properly handle that < br/ > ... < br/ > ( 09:34:18 AM ) brian_stansberry : basically it s a lock < br/ > ... < br/ > ( 09:34:35 AM ) brian_stansberry : that s all it is , a distributed lock < br/ > ( 09:35:03 AM ) brian_stansberry : but once you have the distributed lock it s yours until you give it up < br/ > ( 09:35:29 AM ) brian_stansberry : so once 1 request acquires it , subsequent requests to same server can just use a local lock < br/ > ... < br/ > ( 09:41:59 AM ) brian_stansberry : the key thing is there should only be a cluster-wide operation once per session < br/ > ( 09:42:11 AM ) brian_stansberry : unless there is failover < /p > 
[ ISPN-3981 ] Enhance grouping API to support group manipulation methods < p > The following methods : < /p > < ul class= alternate type= square > < li > getGroup ( goup ) : Map & lt ; K , V & gt ; < /li > < li > removeGroup ( groupId ) ; < /li > < /ul > 
[ ISPN-263 ] Handle cluster partitions < p > JGroups already detects split brains and issues a callback . The cache layer needs to decide what to do . The idea is to implement a few canned policies ( restart , wipe , etc ) and allow custom handlers to be attached as well. < /p > < p > Analogous to < a href= https : //issues.jboss.org/browse/JBCACHE-471 title= Handle JGroups MERGE class= issue-link data-issue-key= JBCACHE-471 > < del > JBCACHE-471 < /del > < /a > < /p > 
[ ISPN-2657 ] Support for LevelDB CacheStore < p > Support for LevelDB , a fast key-value persistence storage. < br/ > There is a pure java implementation and a jni by fuse < /p > 
[ ISPN-270 ] Expose physical address for management purpouses < p > Create an abstraction for org.jgroups.PhysicalAddress in Infinispan so that Transport can return getPhysicalAddress ( ) ; < /p > < p > RpcManagerImpl could then call t.getPhysicalAddress ( ) and show that via jmx/jopr . Having the physical address information available from jmx/jopr on top of the logical address will help users debug issues more easily. < /p > 
[ ISPN-271 ] Expose global information in RpcManagerImpl via CacheManager < p > RpcManagerImpl exposes information that are both global to all caches under a cache manager and information that is specific to a cache. < /p > < p > An idea would be to expose any global information via CacheManager mbean instead , i.e . address , cluster members < /p > < p > And the rest , stuff that is cache specific , expose via rpc manager mbean , < /p > 
[ ISPN-2763 ] Verify cache used for index storage is not defining any expiry < p > Apparently we don t fail fast if Expiry is enabled on the chache used to store a Lucene Directory . I think the Directory implementation should check for this and fail eagerly with an appropriate error message. < /p > < p > < a href= https : //forum.hibernate.org/posting.php ? mode=reply & amp ; f=9 & amp ; t=1025238 class= external-link rel= nofollow > https : //forum.hibernate.org/posting.php ? mode=reply & amp ; f=9 & amp ; t=1025238 < /a > < /p > 
[ ISPN-3514 ] Revamp embedded Infinispan configuration [ ISPN-2655 ] Make HotRod client always read from the main data owner [ ISPN-2643 ] Configure the Java Hot Rod client to always go to the main data owner when requesting data < p > Umbrella JIRA for all the configurations-related Infinispan enhancements . < /p > < p > < a href= https : //issues.jboss.org/browse/ISPN-2643 title= Configure the Java Hot Rod client to always go to the main data owner when requesting data class= issue-link data-issue-key= ISPN-2643 > < del > ISPN-2643 < /del > < /a > made the java Hot Rod client always write to the main owner . ATM the client picks a random owner for reading though . This read-load-balancing doesn t really help , as assuming the data is evenly spread , the amount of reads would be distributed uniformly across the cluster . OTOH forcing the client to always read from the main owner would guarantee red-consistency for < b > async < /b > replicated caches . Even so read consistency might still be a problem when a node crashed , but still these is a much stronger guarantee and makes async replication usable in many more scenarios. < /p > < p > ATM the HR client picks randomly a node owner when it writes data. < br/ > With < a href= https : //issues.jboss.org/browse/ISPN-2552 title= Support concurrent updates for non-transactional caches class= issue-link data-issue-key= ISPN-2552 > < del > ISPN-2552 < /del > < /a > in place , this is suboptimal , as during writes the secondary owner delegates the write to the main owner for lock acquisition , which means an additional RPC . We should make the HR client always write to the main data owner directly. < /p > 
[ ISPN-2848 ] Use the new bundling mechanism from JGroups 3.3.0 < p > See the Message bundling as described here : < a href= https : //docspace.corp.redhat.com/docs/DOC-134411 class= external-link rel= nofollow > https : //docspace.corp.redhat.com/docs/DOC-134411 < /a > < br/ > It makes sense to remove the DONT_BUNDLE flag entirely : as per < a href= https : //issues.jboss.org/secure/ViewProfile.jspa ? name=belaban class= user-hover rel= belaban > Bela Ban < /a > even for a single sync request , the performance with bundling enabled is the same as without bundling . This change should be validated by QA performance wise. < /p > 
[ ISPN-2861 ] Integrate the CloudTM extended statistics in Infinispan < p > The extended statistics allows to profile Infinispan . It will be implemented a two separated modules : < /p > < p > The first will give information like , for example , average transaction execution , message sizes , number of operations per transaction , etc. < /p > < p > In addition , the second module will support the called top-key streaming . This technique allows to check which are the most accessed/locked/etc . keys in the application. < /p > < p > I ll made the full list of the current implemented statistics soon. < /p > 
[ ISPN-292 ] Implement a stale lock cleanup mechanism < p > Similar to braking stale locks in JBoss Cache . This is to prevent situations such as : < /p > < p > N1 starts a tx , acquires locks < br/ > N1 prepares < br/ > N2 now acquires necessary locks < br/ > N1 now crashes < /p > < p > locks on N2 should not be held indefinitely , and resources should be released properly. < /p > 
[ ISPN-293 ] implement asynchronous get method getAsync ( ) < p > Like other async methods existing it would be useful ( natural ) to have a method getAsync ( ) for prefetching of data not immediately required. < /p > 
[ ISPN-297 ] Transport API change to that collection of physical addresses are returned < p > In org.infinispan.remoting.transport.Transport modify : < /p > < p > Address getPhysicalAddress ( ) ; < /p > < p > So that it can potentially return a List of physical addresses . This might be the case in the future : < /p > < p > List & lt ; Address & gt ; getPhysicalAddresses ( ) ; < /p > 
[ ISPN-2985 ] HotRod endpoint SSL support < p > The server endpoints should be able to use a security-domain for SSL configuration < /p > 
[ ISPN-4956 ] Task Management < p > Task Management : < /p > < ul class= alternate type= square > < li > running jobs metadata ( type , start , subject , caches involved , status ) < /li > < li > see running jobs and allow cancelling them < /li > < /ul > 
[ ISPN-299 ] Implement LIRS eviction policy < p > Need to investigate how this can be implemented in a thread-safe , and high-performing manner . Would probably make LRU obsolete. < /p > < p > < a href= http : //www.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-02-6.pdf class= external-link rel= nofollow > http : //www.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-02-6.pdf < /a > < /p > 
[ ISPN-3069 ] TimeService implementation < p > Implementation of the TimeService as described in the mailling list < a href= http : //lists.jboss.org/pipermail/infinispan-dev/2013-April/012667.html class= external-link rel= nofollow > http : //lists.jboss.org/pipermail/infinispan-dev/2013-April/012667.html < /a > < /p > < p > Interface can be found here : < a href= https : //github.com/pruivo/infinispan/blob/ISPN-3069/core/src/main/java/org/infinispan/util/TimeService.java class= external-link rel= nofollow > https : //github.com/pruivo/infinispan/blob/ISPN-3069/core/src/main/java/org/infinispan/util/TimeService.java < /a > < /p > < p > Default implementation will wrap System.nanoTime ( ) and System.currentTimeMillis ( ) . < /p > < p > Provide also a no-op implementation ? < /p > < p > other suggestions are welcome. < /p > 
[ ISPN-31 ] JPA based cache store < p > Store that uses JPA for persistence < /p > 
[ ISPN-310 ] CacheLoader preload should only load as many entries as configured by eviction max entries < p > This will prevent loading too much into memory causing OOMs , as well as unnecessary eviction thread churn . Probably would require another CacheLoader interface method such as loadAll ( int maxEntries ) . A default version of this method could just call loadAll ( ) and trim the resultset to size , and more sophisticated impls could only load the necessary number of entries , such as a LIMIT SQL query for the JDBC cache stores. < /p > 
[ ISPN-314 ] Enhance test fwk to report when a resource was not properly cleaned by a test < p > if a test fails and didn t clean up resources properly ( in this case destroy the cache managers ) then next test running on the same thread will see the already existing cluster , and blockUntil .. methods will fail. < br/ > Make the fwk report that a cluster is not properly shutdown by a test , when another tries to create a cluster. < /p > 
[ ISPN-319 ] Provide Stats via AdvancedCache interface < p > Create AdvancedCache.getStats ( ) method that returns an Stats interface instance with most commonly accessed stats. < /p > < p > This allows for fast access to stats in a fast , efficient and typesafe way without having to go via JMX , while at the same time satisfying the requirement of memcached txt protocol to expose some stats via stats command. < /p > 
[ ISPN-32 ] Integrate Query API < p > Grab this from JBCS < /p > 
[ ISPN-374 ] Add event handling to Hot Rod [ ISPN-3530 ] The HotRod client should support a separate CH for each cache [ ISPN-833 ] Revisit cache name predefinition limitation for cache servers [ ISPN-3529 ] Add support for the segment-based CH in the HotRod protocol [ ISPN-4851 ] Make SyncConsistentHashFactory the default CH factory [ ISPN-5413 ] Index Affinity support < p > Enable Hot Rod servers to send events asynchronously to registered clients over persistent connections . This would allow use cases such as clients maintaining L1 caches and these events could be used for servers to invalidate keys on the client side . See dev list thread for more info. < /p > < p > With asymmetric clusters , each cache can have its own consistent hash , so the primary owner of a key in one cache is not necessarily the owner in all the caches . Even with a symmetric cluster , the same client may be used to access both distributed and replicated caches , and those would certainly have a different CH. < /p > < p > In order to send the operations to the correct owner , the HotRod client should use a different CH for each cache. < /p > < p > There re are two primary reasons why Infinispan servers require predefined caches to be started up on startup , and do not allow invocations to undefined caches : < /p > < p > 1 . Concurrent cache startups were resulting in NPEs ( < a href= https : //issues.jboss.org/browse/ISPN-635 title= NPE on acquire lock LockManagerImpl.lockAndRecord class= issue-link data-issue-key= ISPN-635 > < del > ISPN-635 < /del > < /a > ) - This is already solved since the 4.2.x days . < br/ > 2 . Infinispan has issues dealing with asymmetric clusters ( < a href= https : //issues.jboss.org/browse/ISPN-658 title= Asymmetric clusters should be supported class= issue-link data-issue-key= ISPN-658 > < del > ISPN-658 < /del > < /a > ) . < /p > < p > Once these two issues have been resolved , revisit the limitation . < /p > < p > The server CH changed in version 5.2 from virtual-nodes-based to segment-based , but the client CH stayed the same . The server is able to translate the server CH into a client CH , but the translation is imperfect : < br/ > 1 . Sometimes the client CH computes a different primary owner than the server CH. < br/ > 2 . The client CH gets slower as the number of segments increases , the server CH performance stays the same. < /p > < p > With < a href= https : //issues.jboss.org/browse/ISPN-4682 title= Improve SyncConsistentHashFactory key distribution class= issue-link data-issue-key= ISPN-4682 > < del > ISPN-4682 < /del > < /a > fixed , SyncConsistentHashFactory should be good enough to be the default . It still allows for more variation in the number of owned segments per node ( +/-10 % owned segments and +/-20 % for primary-owned segments ) , but that should be acceptable for most purposes . < /p > < p > The major advantage of SCHF is that it depends only on the cache members and not on the order they joined . Users expect a key to map to the same node in all caches ( as long as the caches have the same members ) . < /p > < p > One downside of SCHF , especially for testing , is that the segment ownership differs between test runs ( being based on the random address assigned to each node ) . However , most tests that depend on key ownership should use < tt > ControlledConsistentHashFactory < /tt > anyway. < /p > < p > We also need to verify that the number of segments moved by SCHF is comparable to the number of segments moved by DefaultConsistentHashFactory ( < a href= https : //issues.jboss.org/browse/ISPN-3729 title= Minimize the number of moved segments for SyncConsistentHashFactory class= issue-link data-issue-key= ISPN-3729 > ISPN-3729 < /a > ) . < /p > < p > As described in < a href= https : //github.com/infinispan/infinispan/wiki/Index-affinity-proposal class= external-link rel= nofollow > https : //github.com/infinispan/infinispan/wiki/Index-affinity-proposal < /a > < /p > 
[ ISPN-4911 ] Add MassIndexer operation to server < p > We should expose the MassIndexer through the DMR < /p > 
[ ISPN-3200 ] Allow KeyFilters to be applied to listeners < p > When registering a listener , users should be able to provide a < tt > KeyFilter < /tt > , a simple interface that determines whether a listener is invoked or not based on whether the affected key ( s ) matches the filter. < /p > < p > The proposed API may overload the < tt > addListener ( Object listener ) < /tt > method on < tt > Cache < /tt > , adding : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > void addListener ( Object listener , KeyFilter filter ) ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > where < tt > KeyFilter < /tt > may be an interface that looks like : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public interface KeyFilter { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > boolean match ( Object key ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > 
[ ISPN-3201 ] Allow listeners to be invoked only by a primary data owner < p > Could be a parameter on the annotation , such as < tt > primaryOnly < /tt > to prevent all replicas from firing updates , such as : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > @ Listener ( primaryOnly = true ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public class MyListener { ... } < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > 
[ ISPN-3239 ] LevelDB Cache Store to support JNI < p > Use LevelDB JNI cache store with proper fallback to Java implementation < /p > 
[ ISPN-33 ] Add an abstract delegating Cache implementation < p > This should be for people extending or simply mocking Infinispan for tests , etc . Perhaps this should implement AdvancedCache . In any case , this abstract delegate should take in an AdvancedCache in its constructor and delegate all calls to the AdvancedCache. < /p > < p > Perhaps called AbstractDelegatingCache ? < img class= emoticon src= https : //issues.jboss.org/images/icons/emoticons/smile.png height= 16 width= 16 align= absmiddle alt= border= 0 / > < /p > 
[ ISPN-3343 ] Write up CacheLoaderConfiguration and corresponding Builder for Lucene module . < p > The Lucene module needs an updated Configuration ( and Builder ) for the class org.infinispan.lucene.cachestore.LuceneCacheLoader . It currently uses an implementation of CacheLoaderConfig which is to be wiped from 6.0.0 onwards. < /p > 
[ ISPN-3355 ] Add support for clustered listeners < p > As opposed to the current listener approach in Infinispan ( a listener instance is invoked on the data owners ) , this JIRA is about adding support for a cluster listener : the same listener instance that is notified disregarding of data ownership ( RPC calls involved ) . < br/ > Due to the fact that the listener notification might involve an RPC , it is nice to be able to specify filters on these listeners. < br/ > The clustered listener support opens the way for some interesting architectures : < /p > < ul > < li > persistent/continuous queries : the query is transformed in a filter . On each notification , the listener ( stateful ) updates the query state < /li > < li > simplistic CEP can be built on top of the persistent query described above < /li > < li > remote/hotrod notifications might be based on clustered listeners as well. < /li > < /ul > 
[ ISPN-4097 ] Add SKIP_CACHE_LOAD flag for Hot Rod < p > Add SKIP_CACHE_LOAD flag to Hot Rod protocol to allow for data to be not be loaded from the cache store. < /p > 
[ ISPN-3526 ] Inject dependecies into the marshaller used for compatibility mode < p > Interoperability between remote query and embedded mode requires a special marshaller to be specified ( CompatibilityProtoStreamMarshaller ) which has a dependency on the CacheManager . It should not be the user s responsibility to inject this dependency because that could only work with programmatic configuration and would be impossible with xml config. < /p > < p > Probably the best way to solve this is to automatically wire all user provided marshaller < em > instances < /em > if they are annotated for injection. < /p > 
[ ISPN-3561 ] A joining cache should receive the rebalancedEnabled flag from the coordinator . < p > There is an issue when starting up a set of nodes in a cluster where the coordinator has told the surviving members that state transfer has been disabled . If rebalancing is disabled while the cluster is running it s disabled on all the < /p > < p > However , if a new set of nodes join afterwards , they don t know that rebalancing was disabled. < /p > < p > This has consequences if there is a new coordinator elected ( like during a MERGE ) from the set of newly-started nodes. < /p > < p > To prevent this and ensure the greatest probablility of success , a node joining should get the state of this flag from the response from the coordinator. < /p > 
[ ISPN-360 ] Create new events to inform listeners of rehashing and consistent hash changes < p > In relation to < a href= http : //community.jboss.org/message/529547 # 529547 class= external-link rel= nofollow > http : //community.jboss.org/message/529547 # 529547 < /a > < br/ > It s an well known scenario to start a cluster , and only after the ENTIRE cluster is started to start and do work . Right now , we have CacheStarted and ViewChanged notifications . First only tells us that the local node is started but other nodes might still be in the process of starting . Second one tells us that the view has changed , but not that the cluster has started , i.e . the cache might be in the process of rebalancing state etc . < br/ > A possible solution would be to have an NodeJoined event , that would be called whenever a new node finished joining the cluster . Finished joining means state transfer happened and that node is started. < br/ > For a possible workaround to this feature see the forum post . < /p > 
[ ISPN-364 ] Add an EvictionStrategy.UNORDERED for simple , un-ordered eviction < p > Existing eviction strategies are FIFO and LRU . There may be cases where people don t care about eviction ordering at all , and want the efficiency of a faster , simpler data container. < /p > 
[ ISPN-370 ] clear the store before state transfer < p > Right now , before integrating state ( fetch persistent state = true ) the cacheStore.clear ( ) is performed within cacheStore . This cacheStore.clear ( ) should be moved outside the store , in StateTransferManager , and state transfer should document that the the store is cleared before integrating remote state . < br/ > This is in relation to : < a href= http : //lists.jboss.org/pipermail/infinispan-dev/2010-March/002483.html class= external-link rel= nofollow > http : //lists.jboss.org/pipermail/infinispan-dev/2010-March/002483.html < /a > < /p > 
[ ISPN-3750 ] Configuration.toProperties < p > I d like to add methods < /p > < p > Configuration.toProperties ( ) and < br/ > GlobalConfiguration.toProperties ( ) < /p > < p > that would return current configuration values in flat key value structure ( e.g . java.util.Properties ) where property keys would reflect names of configuration fields and structure would be reflected by extending the key prefix and dividing by dot . e.g . clustering.hash.numOwners=2 < /p > < p > The least intrusive and maintenance demanding implementation is via Reflection. < /p > < p > The flat configuration would be exposed via JMX objects , e.g. < br/ > jboss.infinispan : type=Cache , name= testCache ( dist_sync ) , manager= default , component=Cache < br/ > attribute configurationProperties < br/ > jboss.infinispan : type=CacheManager , name= default , component=CacheManager < br/ > attribute globalConfigurationProperties < /p > < p > This is a diagnostic output feature and doesn t affect the way how Infinispan is configured. < /p > 
[ ISPN-1239 ] Graceful shutdown should be supported [ ISPN-3140 ] JMX operation to suppress state transfer [ ISPN-3351 ] Controlled cluster shutdown with data restore from persistent storage < p > Currently , killing any node will result in a rehash . A mechanism for clean shutdown should also be supported , so that a rehash is < b > not < /b > triggered . Useful when the entire cluster is being intentionally brought down. < /p > < p > Need to think about how we do this ; perhaps a LEAVE message that will prevent nodes triggering a rehash when a subsequent view change is detected . This could be done programmatically via a < tt > clean < /tt > parameter to < tt > stop ( ) < /tt > , but we should explore alternatives here. < /p > < p > This feature request is to expose a JMX operation on each node , to suppress state transfer for a period of time . This flag would be < tt > false < /tt > by default. < /p > < p > The use case of this flag would be to ease bringing down ( and up ) a cluster for maintenance work . A typical workflow would be : < /p > < p > 1 ) Shut down application requests to the data grid < br/ > 2 ) Suppress state transfer on all nodes via JMX < br/ > 3 ) Bring down all nodes < br/ > 4 ) Perform maintenance work < br/ > 5 ) Bring up nodes , one at a time . As each node comes up , disable state transfer for the node via JMX. < br/ > 6 ) Once all nodes are up , enable state transfer for each node again via JMX < br/ > 7 ) Allow application requests to reach the grid again. < /p > < p > The purpose of this is to allow smooth and fast shutdown and startup , remove the risk of OOM errors ( when bringing a grid down ) . < /p > < p > This is a small but useful subset of full manual state transfer as defined in < a href= https : //issues.jboss.org/browse/ISPN-1394 title= Investigate possibility of doing manual rehashing class= issue-link data-issue-key= ISPN-1394 > < del > ISPN-1394 < /del > < /a > . < /p > < p > < a href= https : //github.com/infinispan/infinispan/wiki/Graceful-shutdown- & amp ; -restore class= external-link rel= nofollow > https : //github.com/infinispan/infinispan/wiki/Graceful-shutdown- & amp ; -restore < /a > < /p > < p > < a href= https : //community.jboss.org/wiki/ControlledClusterShutdownWithDataRestoreFromPersistentStorage class= external-link rel= nofollow > https : //community.jboss.org/wiki/ControlledClusterShutdownWithDataRestoreFromPersistentStorage < /a > < /p > 
[ ISPN-379 ] JGroupsChannelLookup should take in Properties created from props set on the transport < p > The current JGroupsChannelLookup interface - < a href= http : //docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/remoting/transport/jgroups/JGroupsChannelLookup.html class= external-link rel= nofollow > http : //docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/remoting/transport/jgroups/JGroupsChannelLookup.html < /a > - does not have a mechanism to receive any configuration props . When configuring a transport , Infinispan allows arbitrary & lt ; properties / & gt ; to be set ( see < a href= http : //docs.jboss.org/infinispan/4.1/apidocs/config.html # ce_global_transport class= external-link rel= nofollow > http : //docs.jboss.org/infinispan/4.1/apidocs/config.html # ce_global_transport < /a > ) . These should simply be passed in to JGroupsChannelLookup.getJGroupsChannel ( ) . < /p > 
[ ISPN-3792 ] Optional Cache.putForExternalRead expiration arguments < p > BasicCache has optional lifespan and idle time arguments for its put methods , I was hoping to have that for putForExternalRead as well. < /p > < p > Cheers , < /p > < p > Vladimir < /p > 
[ ISPN-38 ] Early distributed deadlock detection < p > Based on Jason s old designs . Will dig up docs and put this up somewhere. < /p > 
[ ISPN-388 ] Cache view rank on a ViewChange listener for Hot Rod version generation < p > Hot Rod server generates version numbers for cache entries based on the JGroups view id and view rank which is the location of the current server in that view . Currently , this rank is calculated whenever a new version is generated but this is quite wasteful . The view rank could be calculated upon a view change and reused until there s a new view change . This would speed up version generation. < /p > 
[ ISPN-39 ] Distributed executors < p > A new API to allow users to provide a Runnable/Callable and a set of keys to run this on , and the ability to move the code to where the data is and execute it there , returning results ( if any ) across a network. < /p > < p > Scope and objectives of this task are described in < a href= https : //community.jboss.org/wiki/InfinispanDistributedExecutionFramework class= external-link rel= nofollow > https : //community.jboss.org/wiki/InfinispanDistributedExecutionFramework < /a > < /p > 
[ ISPN-3917 ] Filter objects using the query DSL ( without using an index ) < p > The cluster listeners will want to use the Query DSL for filtering and projection views . We don t want to have to tie ourselves to Lucene to do this . It was discussed to implement this using reflection. < /p > 
[ ISPN-3947 ] HotRod client keep trying recover connections to a failed cluster < p > If an infinispan-server cluster is not longer reachable for some reason , i.e . network disconnect , the hot-rod client try to re-establish the lost connections. < br/ > The client library will retry this by a fixed calculation based on the max numbers of connections from the pool or 10 multiplied with the number of available servers. < br/ > This can lead in a very long time until the application can continue and react as it will wait for the read- or connect-timeout for each try. < /p > < p > To improve this behaviour there should be a configurable limit of retries per server and/or a timeout in total. < /p > < p > This will give the application the chance to handle a remote-cache failure and reply to the user instead of hanging for minutes ( with the default settings ) < /p > 
[ ISPN-1642 ] Cache loading on remote nodes can be optimised away in certain conditions [ ISPN-244 ] Enable external user/framework defined Externalizers < p > See this discussion thread for more details : < a href= http : //lists.jboss.org/pipermail/infinispan-dev/2011-December/009737.html class= external-link rel= nofollow > http : //lists.jboss.org/pipermail/infinispan-dev/2011-December/009737.html < /a > < /p > < p > Create an internal magic number ( i.e . -1 or 255 ) for user defined externalizers . This is done to avoid users using our number space. < /p > < p > So , internally : & lt ; magic_number & gt ; & lt ; stream & gt ; < br/ > Users : & lt ; magic_number & gt ; & lt ; user defined magic number ( int ) & gt ; & lt ; stream & gt ; < /p > < p > Mandate unsigned ints so that we can optimise by sending them as variable lenght < br/ > Internal frameworks could use high enough numbers for example up to 2 bytes : 5000 , 7000 , 20000 < br/ > 1 byte : 128 < br/ > 2 bytes : 32767 < br/ > 3 bytes : ... < /p > < p > GlobalConfiguration.registerMarshallable ( Class type , Externalizer ext , int id ) ; < /p > < p > Maybe CacheManager better ? < /p > < p > CacheManager.registerMarshallable ( Class type , Externalizer ext , int id ) ; < /p > < p > Future improvement , maybe generate ids automatically for user defined classes ? < /p > 
[ ISPN-40 ] optimize and cleanup ReplicateCommand < p > ReplicateCommand should be split into SingleRPCCommand , MultipleRPCCommand : < /p > < ul class= alternate type= square > < li > name is more suggestive , ReplicateCommand name is very simillr to ReplicableCommand which makes code hard to read < /li > < li > when only replicating a single command , the current impl is inefficient as it internally builds an array to store the single entry . This is not needed. < /li > < /ul > 
[ ISPN-400 ] Add property to display full byte arrays in logs < p > This is useful for marshalled caches and memcached/hotrod servers. < /p > 
[ ISPN-4000 ] Delta view logging < p > Currently on view change the only log we have is INFO ISPN000094 : Received new cluster view . < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > 11:36:27,355 INFO [ org.infinispan.remoting.transport.jgroups.JGroupsTransport ] ( Incoming-1 , localhost-13545 ) ISPN000094 : Received new cluster view : [ localhost-7255|23 ] ( 24 ) [ localhost-7255 , localhost-51221 , localhost-12479 , localhost-1550 , localhost-10300 , localhost-11620 , localhost-35337 , localhost-40886 , localhost-3020 , localhost-51201 , localhost-32626 , localhost-17205 , localhost-2984 , localhost-45021 , localhost-23189 , localhost-9189 , localhost-12902 , localhost-38468 , localhost-36454 , localhost-63088 ... ] < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > In a large cluster environment the view list is truncated at max.list.print_size sys prop value , 20 by default . We can increase it but it s still hard to see who is joined/left. < /p > < p > It would be nice to see the delta on view change , like the following : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > 11:36:27,355 DEBUG [ org.infinispan.remoting.transport.jgroups.JGroupsTransport ] ( Incoming-1 , localhost-13545 ) Joined : [ localhost-8582 ] , Left : [ ] < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > 
[ ISPN-4068 ] Add support for IncludeCurrentState to listeners < p > Cluster listeners were added with < a href= https : //issues.jboss.org/browse/ISPN-3355 title= Add support for clustered listeners class= issue-link data-issue-key= ISPN-3355 > < del > ISPN-3355 < /del > < /a > . This didn t cover the includeInitialState support . This should be able to work with both local and cluster listeners. < /p > 
[ ISPN-4129 ] Add Query , CDI , JCache , LevelDB and REST to the AS modules < p > Query , CDI , JCache , LevelDB and REST modules need to be added to the AS modules we ship < /p > 
[ ISPN-1636 ] Have remoted tasks inject services via CDI before execution < p > Second step if what was discussed on : < br/ > < a href= http : //infinispan.markmail.org/search/ # query : +page:1+mid:3dqf7hvuabttkqli+state : results class= external-link rel= nofollow > http : //infinispan.markmail.org/search/ # query : +page:1+mid:3dqf7hvuabttkqli+state : results < /a > < br/ > < a href= http : //community.jboss.org/message/642300 # 642300 class= external-link rel= nofollow > http : //community.jboss.org/message/642300 # 642300 < /a > < /p > < p > < a href= https : //issues.jboss.org/browse/ISPN-1634 title= Provide references to Cache to distributed executor tasks and MapReduce tasks class= issue-link data-issue-key= ISPN-1634 > < del > ISPN-1634 < /del > < /a > should provide Cache references only , this one should provide anything the CDI container knows about as defined by injection points in the remoted tasks ; injection should happen again on each node , avoiding serialization of the injected components. < /p > 
[ ISPN-4166 ] useSynchronization should be disabled by default < p > When Infinispan registers with the transaction manager as a synchronization , failures during commit are not reported to the user. < /p > < p > Even if registering as a synchronization is faster in some cases , the default should be the safe version. < /p > 
[ ISPN-4276 ] Make JPA cache store work in Karaf < p > The JPA cache store does not currently work in Karaf . There are several thing to make it work in OSGi : < /p > < ul > < li > use hibernate-osgi dependency , and possibly change some other dependencies < /li > < li > JpaStoreConfigurationParser70 should be exposed as a service in Blueprint < /li > < li > EntityManagerFactory should be obtained from the service registry , similar to < a href= https : //github.com/hibernate/hibernate-orm/tree/master/documentation/src/main/docbook/quickstart/tutorials/osgi/unmanaged-jpa class= external-link rel= nofollow > https : //github.com/hibernate/hibernate-orm/tree/master/documentation/src/main/docbook/quickstart/tutorials/osgi/unmanaged-jpa < /a > < /li > < /ul > 
[ ISPN-4289 ] Provide a user friendly error for not being able to parse 6.0 configuration files < p > When failing to parse a configuration file in XML format from Infinispan 6.0 ( apparently now unsupported ) the error message should be improved. < /p > 
[ ISPN-2183 ] Add the ability to fetch a set of keys at once ( getAll ) < p > When a transaction knows in advance about the set of keys it needs to read , this cache.getAll ( k1 , k2 , .. kn ) method can bring a some performance improvement : < br/ > 1. all the keys can be fetched from remote nodes in parallel < br/ > 2. keys that map to the same node can be grouped and fetched in the same RPC request < /p > < p > Note that 1. can be be achieved even at this time by using Cache.getAsync ( K ) method - that s not as elegant though as it requires the user to write the code the code that waits on the Future objects that are returned . < /p > 
[ ISPN-4331 ] Add searching for TransactionManager in OSGi to GenericTransactionManagerLookup < p > The current implementation is not able to find the transaction manager that is embedded in Apache Karaf . < /p > < p > Apache Karaf includes Apache Aries and after installing optional feature transaction by feature : install transaction , the transaction manager is available through JNDI . We just need to check the right address. < /p > 
[ ISPN-4420 ] Allow configuring keepalive for hotrod connections < p > Also consider making the Tcp connections pluggable. < /p > 
[ ISPN-444 ] Release lock when thread is interrupted < p > When a lock is acquired and the acquiring thread is interrupted , the lock is not released. < br/ > A couple of try / finally should do the trick. < br/ > The impact is quite important since the lock is never released and the entry unavailable. < /p > 
[ ISPN-4648 ] Log rebalancing messages to specific category < p > For ease of management , logging of major rebalancing events should be sent to an appropriate category. < /p > < p > Use org.infinispan.CLUSTER and level INFO < /p > 
[ ISPN-6866 ] OffHeap Data Container < p > We want to be able to allocate data off-heap. < br/ > Requirements / ideas : < /p > < ul > < li > data should be stored in Direct ByteBuffers , or easily accessible as such so that integration with other types of I/O ( clustering , persistence , server ) can be done efficiently < /li > < li > consider both raw byte [ ] storage ( such as that performed by servers ) and store as binary < /li > < li > allocator should be pluggable < /li > < li > out-of-the-box implementation should use Netty Buffers < /li > < li > type of allocation ( heap or off-heap ) should be per-cache < /li > < li > off-heap allocation configuration should be global ( per-container ) or possibly shared among multiple containers < /li > < li > optional off-heap allocation for keys < /li > < li > ability to monitor both global and per-cache memory usage < /li > < /ul > 
[ ISPN-476 ] Enable tcp no delay by default and make it configurable in servers < p > For increased performance of Hot Rod client and server , enable tcp no delay by default. < br/ > Also , add configuration options to both client and server so that tcp no delay is configurable. < /p > 
[ ISPN-48 ] Introduce lock ( ) and unlock ( ) API methods < p > This would be the fabled distributed locking . < /p > < p > These APIs should be on AdvancedCache , with the following sigs : < /p > < p > void lock ( K key , boolean eager ) ; < br/ > void lock ( Collection & lt ; ? extends K & gt ; keys , boolean eager ) ; < br/ > void unlock ( K key ) ; < br/ > void unlock ( Collection & lt ; ? extends K & gt ; keys ) ; < /p > < p > The implementation should use a new Command , a LockControlCommand , which contains : < /p > < ul > < li > a boolean to indicate whether this is a lock or unlock < /li > < li > a boolean to indicate whether this is an eager lock < /li > < li > an array of keys to be locked/unlocked < /li > < /ul > < p > The command is handled by the LockingInterceptor which will acquire/release locks as needed. < /p > < p > If eager , the ReplicationInterceptor will replicate this command < b > synchronously < /b > ( even if repl mode is async ) to ensure all remote nodes have locked/unlocked as well . ( should this sync force only be on lock ( ) and not unlock ( ) ? ) If using DIST , this would only be replicated among peers where the relevant keys are mapped. < /p > < p > On a transaction prepare , lock ( ) s that are NOT eager should also be respected and applied . < /p > < p > On transaction rollback , locks should be unlocked as usual , so unlock ( ) commands need not be a part of the prepare. < /p > 
[ ISPN-4919 ] Configuration templates < p > Currently there is a 1:1 relationship between configuration and named caches . While the programmatic API does have the ability to .read ( ) an existing configuration to create a new one , the declarative config does not. < br/ > We should introduce the concept of configuration inheritance , e.g . : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; local-cache name= eviction-cache & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; eviction strategy= LIRS maxEntries= 10000 / & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; /local-cache & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; local-cache name= mycache template= eviction-cache / & gt ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > Possibly , cache templates should be made abstract so that they can not be instantiated as named caches directly , e.g . : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; local-cache name= eviction-cache abstract= true & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ... < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; /local-cache & gt ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > 
[ ISPN-4944 ] Improve HR client security test coverage < p > Extends security test for HR client so that the tests cover all HR operations ( available on < a href= https : //docs.jboss.org/infinispan/7.0/apidocs/org/infinispan/client/hotrod/RemoteCache.html class= external-link rel= nofollow > Remote cache < /a > ) < /p > 
[ ISPN-5836 ] Allow modifying eviction size through both JMX and DMR [ ISPN-5340 ] Expose mutable configuration attributes over JMX [ ISPN-5343 ] Make eviction size parameter configurable at runtime < p > If a cache is bounded , we need to be able to modify the eviction size at runtime both through JMX and DMR < /p > . < p > I ve got a use-case where I would like to be able to dynamically ( at runtime ) configure the max-entries parameter of my eviction configuration . This would allow to , for example , decrease the max-entries dynamically when my system starts running oom. < /p > 
[ ISPN-5120 ] Expose EmbeddedCacheManager/Cache via JCacheManager/JCache unwrap ( ... ) methods < p > The JSR-107 spec includes the CacheManager.unwrap ( Class ) and Cache.unwrap ( Class ) methods to allow access to underlying caching implementation . Currently , I can only unwrap the Cache/CacheManager instance to the concrete JCache/JCacheManager implementations . However , these classes do not expose the underlying infinispan Cache/EmbeddedCacheManager. < /p > < p > Ideally , I should be able to do the following : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > javax.cache.Cache & lt ; K , V & gt ; jcache = Caching.getCache ( name , ... ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > org.infinispan.Cache & lt ; K , V & gt ; icache = jcache.unwrap ( org.infinispan.Cache.class ) ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > or < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > CacheManager jmanager = Caching.getCachingProvider ( ) .getCacheManager ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > EmbeddedCacheManager imanager = jmanager.unwrap ( EmbeddedCacheManager.class ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > CacheContainer container = jmanager.unwrap ( CacheContainer.class ) ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > 
[ ISPN-5219 ] Expose Distributed Iterators over HotRod < p > Integration with external distributed query engines requires the capacity to : < /p > < ul > < li > Partition the data < /li > < li > Iterate over each of the partitions < /li > < /ul > < p > The distributed iterators covers that and should be exposed over hotrod < /p > < p > Wiki page : < a href= https : //github.com/infinispan/infinispan/wiki/Remote-Iterator class= external-link rel= nofollow > https : //github.com/infinispan/infinispan/wiki/Remote-Iterator < /a > < /p > 
[ ISPN-2284 ] Execute Mapper and Reducer tasks in parallel where possible < p > In our current implementation of Map/Reduce , Mapper and Reducer tasks executed on remote JVMs load and process key/values serially on a single thread . Where and if possible we should use executors to process keys/values in parallel . < /p > 
[ ISPN-5293 ] Create generic execution framework from EntryIterator < p > This framework could be used to power a segment aware map/reduce framework and other events that require execution across the cluster. < /p > 
[ ISPN-5298 ] HotRod millisecond precision for lifespan/maxidle < p > Currently lifespan/maxidle precision is SECONDS. < br/ > JSR-107 requires MILLISECONDS precision. < /p > 
[ ISPN-536 ] The size of a local cache could be more accurate under concurrent modifications when expiration is enabled < p > I m totally aware that the cache size is an approximation according to your doc however the value could be improved if in the class DefaultDataContainer in case of cache entry expiration , you first check if the method remove ( key ) returns a non null value before decrementing the variable numEntries as below otherwise you could decrement it several times for the same entry : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ` < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > if ( mortalEntries.remove ( k ) ! = null ) { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > numEntries.getAndDecrement ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > I attached a test case in which I set maxIdle to 0 to make the issue happens more easily . I also attached a patch proposal , it is up to you to apply it or reject it. < /p > 
[ ISPN-5416 ] Grouping and aggregations with DSL based queries < p > Implement the group by statement and the aggregate functions : count , sum , average , min , max. < /p > 
[ ISPN-5485 ] Refactor DataContainer and various Maps to use new Java 8 classes < p > Currently we have a lot of stop gap interfaces such as KeyValueAction that have now been replaced by newer Java 8 classes . We should move our classes over to remove redundant code and also provide more consistency. < /p > 
[ ISPN-5518 ] Introduce a separate thread pool for async cache operations < p > At the moment , it is very easy for an application to start a huge number of putAsync operations and fill the transport executor s thread pool , delaying internal work such as state transfer . Increasing the size of the transport executor s thread pool won t work , because that would in turn fill the remote commands and JGroups OOB thread pools , with the same effect. < /p > < p > If the cache async operations used a different thread pool , it would be possible to configure more < tt > remoteCommandsThreadPool < /tt > threads than < tt > asyncOperationsThreadPool < /tt > threads , avoiding this problem. < /p > 
[ ISPN-5528 ] Expose segment ownership in the Hot Rod client < p > < a href= https : //issues.jboss.org/browse/ISPN-5219 title= Expose Distributed Iterators over HotRod class= issue-link data-issue-key= ISPN-5219 > < del > ISPN-5219 < /del > < /a > exposes entry iteration via Hot Rod and allows to filter based on segments . < br/ > In order to be able to eventually calculate the segments to be filtered on , ownership information for a cache needs to be exposed as well . < br/ > API suggestion by @ wburns : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Set & lt ; Integer & gt ; getSegments ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Map & lt ; Address , Set & lt ; Integer & gt ; & gt ; getSegmentsByServer ( ) < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > 
[ ISPN-5536 ] Upgrade Infinispan Server to WildFly 9.0.0.CR2 < p > Upgrade to WildFly 9.0.0.CR1 using the feature-pack build machinery < /p > 
[ ISPN-5537 ] Upgrade to Lucene 5 < p > Update Infinispan directory to Lucene 5 . Also required update to Hibernate Search 5.5.0.Alpha1 , Hibernate ORM 5.0.0.CR3 , Wildfly 10.0.0.Alpha6 ( integration tests only ) < /p > 
[ ISPN-3697 ] Improved lifecycle control of JGroupsChannelLookup < p > Currently , a JGroupsChannelLookup can indicate whether the JGroupsTransport should connect the provided channel and disconnect/close the provided channel. < br/ > In the case of Wildfly , we d like to distinguish between disconnect and close . We have a service that provided the channel , but we allow the JGroupsTransport to manage the lifecycle . This leads to conditions where infinispan s cache manager can restart , but the jgroups channel service does not , e.g. < br/ > < a href= https : //issues.jboss.org/browse/WFLY-2458 class= external-link rel= nofollow > https : //issues.jboss.org/browse/WFLY-2458 < /a > < /p > < p > To fix this , I need to introduce hacks into the channel returned by the channel service , such that Channel.close ( ) is a no-op , and introduce a separate method invisible to Infinispan to perform the actual close ( ) . < /p > < p > So what I propose is the following : < /p > < p > boolean shouldConnect ( ) ; // Notice that I renamed this , because there is no such distinction between start and connect . < /p > < p > boolean shouldDisconnect ( ) ; < /p > < p > boolean shouldClose ( ) ; < /p > 
[ ISPN-5832 ] Log relevant events through event logger < p > By using the event logger , make sure the different subsystems log the relevant events : < /p > < ul > < li > Task execution ( as requested by users ) < /li > < li > Node join/leave < /li > < li > Split/Merge < /li > < li > Rebalancing start / stop < /li > < li > Mass indexer < /li > < li > Server start/shutdown < /li > < li > Site up / down < /li > < li > Cache related events < /li > < /ul > 
[ ISPN-5975 ] Flush cache operation for server < p > Implement a flush-cache operation registered for every cache type which , if passivation is enabled , evicts all entries to the store , otherwise if a write-behind cache store is enabled , it waits for completion , otherwise it does nothing. < /p > 
[ ISPN-599 ] document CacheManager s default constructor < p > Current javadoc says : < /p > < p > / * * < /p > < ul > < li > Constructs and starts a default instance of the CacheManager , using configuration defaults. < br/ > * / < br/ > public DefaultCacheManager ( ) { this ( null , null , true ) ; } < /li > < /ul > < p > This does not make it to the user what configuration defaults are : e.g . load from a default file , what is the default cache mode etc . < /p > 
[ ISPN-6035 ] Caches created via InternalCacheRegistry should be optionally searchable < p > Add a SEARCHABLE flag to InternalCacheRegistry.Flag enum and use it when filtering caches that need the search components created. < /p > 
[ ISPN-608 ] Make replication queue implementation pluggable < p > We needed to make the ReplicationQueue listenable . We needed events for adding a command to and flushing the queue. < /p > < p > org.infinispan.factories.EmptyConstructorNamedCacheFactory < /p > < p > Just added ReplicationQueueNotifier.class to the @ DefaultFactoryFor annotation. < /p > < p > org.infinispan.notifications.replicationqueuelistener.ReplicationQueueNotifier < /p > < p > Interface for the ReplicationQueue notifier. < /p > < p > org.infinispan.notifications.replicationqueuelistener.ReplicationQueueNotifierImpl < /p > < p > The ReplicationQueue notifier implementation . Supports events for adding and a command to and flushing the queue. < /p > < p > org.infinispan.notifications.replicationqueuelistener.annotation.Flush < br/ > org.infinispan.notifications.replicationqueuelistener.annotation.ReplicableCommandAdded < /p > < p > The bare annotations to add to ReplicationQueue listeners. < /p > < p > org.infinispan.notifications.replicationqueuelistener.event.Event < /p > < p > The interface for the command added and flush event implementations. < /p > < p > org.infinispan.notifications.replicationqueuelistener.event.FlushEvent < br/ > org.infinispan.notifications.replicationqueuelistener.event.ReplicableCommandAddedEvent < /p > < p > The event implementations. < /p > < p > org.infinispan.remoting.ReplicationQueue < /p > < p > Updated to implement listenable. < br/ > Throws the command added event AFTER it has been added to the queue . It includes the size of the queue AFTER the command has been added. < br/ > Throws the flush event AFTER the queue has been flushed . It includes the size of the queue to be flushed. < /p > 
[ ISPN-609 ] Report Merge events via the listener API < p > We needed to make the JGroupsTransport listenable . We needed events for detecting that a merge has taken place < /p > < p > org.infinispan.factories.EmptyConstructorFactory < /p > < p > Just added JGroupsTransportNotifier.class to the @ DefaultFactoryFor annotation. < /p > < p > org.infinispan.notifications.jgroupstransport.JGroupsTransportNotifier < /p > < p > Interface for the JGroupsTransportNotifier notifier. < /p > < p > org.infinispan.notifications.jgroupstransport.JGroupsTransportNotifierImpl < /p > < p > The JGroupsTransportNotifier notifier implementation . Supports events for a merge. < /p > < p > org.infinispan.notifications.jgroupstransport.annotation.MergeViewAccepted < /p > < p > The bare annotations to add to JGroupsTransport listeners. < /p > < p > org.infinispan.notifications.jgroupstransport.event.Event < /p > < p > The interface for the merge view accepted event implementations. < /p > < p > org.infinispan.notifications.replicationqueuelistener.event.MergeViewAcceptedEvent < /p > < p > The event implementations. < /p > < p > org.infinispan.transport.Transport < /p > < p > Updated to implement listenable. < /p > < p > org.infinispan.transport.jgroups.JGroupsTransport < /p > < p > Updated to throw an event when a merge view is accepted. < /p > 
[ ISPN-610 ] Apply isStateTransferEnabled attribute to consumer only < p > We needed to be able to configure state transfer providers and consumers separately . The short term strategy is to make each node a provider . We then use the & # 39 ; fetchInMemoryState & # 39 ; attribute to determine if a node can be a consumer or not. < /p > < p > org.infinispan.factories.StateTransferManagerFactory < /p > < p > Updated to remove the & # 39 ; isStateTransferEnabled & # 39 ; check . Now every node is a state transfer provider. < /p > < p > org.infinispan.statetransfer.StateTransferManagerImpl < /p > < p > public void start ( ) < /p > < p > Updated to now check the & # 39 ; fetchInMemoryState & # 39 ; attribute to determine if this node can operate as a consumer. < /p > < p > public void generateState ( ) < /p > < p > Updated so that any node can generate the state. < /p > 
[ ISPN-2808 ] Make Infinispan use its own thread pool for sending messages in order to avoid thread deadlocks [ ISPN-2849 ] Don t keep threads blocked when waiting for locks to be released < ul class= alternate type= square > < li > when an OOB thread sends a sync request it blocks waiting on a sync in jgroups RequestCorrelator < /li > < li > it gets released by an another OOB thread when the remote node responds < /li > < /ul > < p > Now if all the OOB threads are blocked in sending , then there s no available OOB thread to unblock them even if responses from remote nodes have arrived - deadlock . In order to avoid this deadlock we can use a different thread pool for sending OOB messages. < /p > < p > For a discussion around this please refer to : < a href= http : //infinispan.markmail.org/search/ # query : % 20list % 3Aorg.jboss.lists.infinispan-dev+page:1+mid:7buuwljp7i7fvnpe+state : results class= external-link rel= nofollow > http : //infinispan.markmail.org/search/ # query : % 20list % 3Aorg.jboss.lists.infinispan-dev+page:1+mid:7buuwljp7i7fvnpe+state : results < /a > < /p > < p > ATM if a tx2 waits on a lock to be released by tx1 , the ( incoming ) tx2 thread is BLOCKED and taken out from the pool . A better way to implement this is by using a structure that would hold and order the depending transactions on the receiver correlated with the async execution API from JGroups 3.3.0 , result being that tx2 would not BLOCK but return to the pool this ( not maxing out the thread pool that executes commands ) . < br/ > More about it in the Async invocation section of < a href= https : //docspace.corp.redhat.com/docs/DOC-134411 class= external-link rel= nofollow > https : //docspace.corp.redhat.com/docs/DOC-134411 < /a > < /p > 
[ ISPN-612 ] Allow substitution of Infinispan server properties < p > From Brian S : < /p > < p > Can whatever reads these properties ( HotRodServer and MemcachedServer or some delegate ) do system property substitution ? Then the file has < br/ > infinispan.server.port = $ < /p > { jboss.infinispan.server.port:11311 } < br/ > < br/ > or , if the substitution logic is simpler , even just < br/ > < br/ > infinispan.server.port = $ { jboss.infinispan.server.port } < p > and we tweak the config in datagrid/conf/bindingservice/beans to set jboss.infinispan.server.port < /p > 
[ ISPN-6178 ] Add ability to define indexable classes via config < p > Queryable classes are currently auto-detected on the fly by the QueryInterceptor on each write operation . The set of discovered classes is replicated by means of ClusterRegistry. < /p > < p > This approach creates a lot of technical complexity and the implementation has a number of flaws ; some have been fixed after several iterations but the solution is still brittle and can lead to locking issues . It also forces Hibernate Search to reconfigure the factory which is rather messy . Instead of continuing to patch and improve this we should consider pre-declaring the indexable classes in the cache configuration ( indexing configuration actually ) . < /p > < p > Given the impact of this change to existing codebase I would propose an approach that allows an easy transition : < br/ > 1 . Introduction of a new config in indexing configuration to be able to specify the classes. < br/ > 2 . If cache is indexed but no indexable classes were defined fallback to on-demand auto-detection as it worked in 8.1. < br/ > 3 . If cache is indexed and classes were specified use them and do not perform on-demand auto-detection anymore . Also do not use ClusterRegistry to propagate the set of classes anymore. < /p > < p > This is how it should work in 8.2 . Auto-detection should also be documented as deprecated in 8.2 and should be removed completely in 9.0 . In 9.0 , marking a cache as indexed but not specifying which exact classes should result in an error at config time validation. < /p > 
[ ISPN-6198 ] Add category and level filtering to event logger < p > The event log should be queryable by category and level. < /p > 
[ ISPN-6348 ] Full-text features for query dsl < ul > < li > we need to extend the query language by adding full-text operators < /li > < li > we need a way to configure analysers for fields in the protobuf schema , similar to the ones from hibernate-search < /li > < li > keyword and fuzzy querying wanted < /li > < /ul > 
[ ISPN-648 ] Allow suppressing of CacheNotFoundExceptions in the RpcManagerImpl < p > Could be a flag on the & lt ; clustering ... / & gt ; config element . If set , the exception should not be re-thrown but simply logged. < /p > 
[ ISPN-650 ] DefaultCacheManager.getCache ( ... ) should block until newly created cache is started < p > Currently , DefaultCacheManager stores it s caches in a concurrent map . When a call to getCache ( ... ) is made for a cache that does not yet exist , the cache is created , put into the map ( via putIfAbsent ( ) ) and then the cache is started . Consequently , a subsequent , but concurrent thread calling getCache ( ... ) with the same cache name may end up with a cache that is not yet ready for use , leading to unexpected behavior. < /p > < p > Ideally , calls to getCache ( ... ) should block if the requested cache is newly created , but not yet started . Requests for an already started cache should not block. < /p > < p > A possible implementation might involve storing the cache along side a volatile single-use thread gate ( e.g . new CountDownLatch ( 1 ) ) in the concurrent map . The algorithm might look like : < br/ > 1 . Lookup the map entry ( i.e . cache + gate ) using the cache name < br/ > 2 . If the map entry exists , but no gate is present , return the cache. < br/ > 3 . If the map entry exists , and a latch is present , wait on the latch ( ideally with a timeout ) and return the cache. < br/ > 4 . If the map entry does not exist , create the cache and put it into the map ( if absent ) with a new thread gate. < br/ > 4a . If the put was not successful ( i.e . an entry already existed ) , goto 1. < br/ > 5 . Start the cache - if start fails , stop the cache and remove the map entry ( threads waiting on it s gate will timeout , oh well ) < br/ > 6 . Open the gate < br/ > 7 . Remove the gate from the map entry < br/ > 8 . Return the cache < /p > < p > A horridly generic version of the above can be found in the HA-JDBC source code : < br/ > < a href= http : //ha-jdbc.svn.sourceforge.net/viewvc/ha-jdbc/trunk/src/main/java/net/sf/hajdbc/util/concurrent/Registry.java ? revision=2399 & amp ; view=markup class= external-link rel= nofollow > http : //ha-jdbc.svn.sourceforge.net/viewvc/ha-jdbc/trunk/src/main/java/net/sf/hajdbc/util/concurrent/Registry.java ? revision=2399 & amp ; view=markup < /a > < br/ > and an example demonstrating use of a Registry with a MapRegistryStoreFactory can be found here : < br/ > < a href= http : //ha-jdbc.svn.sourceforge.net/viewvc/ha-jdbc/trunk/src/main/java/net/sf/hajdbc/sql/Driver.java ? revision=2414 & amp ; view=markup class= external-link rel= nofollow > http : //ha-jdbc.svn.sourceforge.net/viewvc/ha-jdbc/trunk/src/main/java/net/sf/hajdbc/sql/Driver.java ? revision=2414 & amp ; view=markup < /a > < /p > 
[ ISPN-6501 ] Create a ProbeHandler for JGroups < p > Expose the remote thread pool status to JGroups probe . It returns the following : < /p > < ul > < li > current-pool-size = & gt ; the current pool size < /li > < li > keep-alive=60000 = & gt ; the configure keep alive time in milliseconds < /li > < li > min-thread = & gt ; the minimum thread pool size configured < /li > < li > active-thread = & gt ; the current active number of threads < /li > < li > queue-size = & gt ; the current queue size < /li > < li > max-thread = & gt ; the maximum thread pool size configured < /li > < li > largest-pool-size = & gt ; the largest thread pool < /li > < /ul > 
[ ISPN-2806 ] Add a more efficient FileCacheStore implementation < p > Based on the feedback we got from community/users Infinispan needs a more efficient FileCacheStore implementation . See the < a href= https : //community.jboss.org/wiki/FileCacheStoreRedesign class= external-link rel= nofollow > design document < /a > that contains several suggestion of implementing it . It would be nice to also have a benchmark written in order to evaluate the performance between various implementation suggestion. < /p > 
[ ISPN-6553 ] Configuration to XML serializer < p > Provide a configuration serializer which can convert a Configuration object to XML < /p > 
[ ISPN-661 ] Make the timeout values for statetransfer flush configurable < p > it seems I m in need to configure the flush timeout defined in org.infinispan.statetransfer.StateTransferManagerImpl.generateTransactionLog ( ObjectOutput ) < br/ > this is currently hardcoded to 60 seconds. < br/ > This might actually cover another problem , but these are the stacktraces : < /p > < p > Node1 : < /p > < p > 2010-09-21 17:09:24,329 STREAMING_STATE_TRANSFER-sender-5 , scarlet-cluster , ip-10-196-114-15-45100 ERROR < span class= error > & # 91 ; remoting.transport.jgroups.JGroupsTransport & # 93 ; < /span > Caught while responding to state transfer request < br/ > org.infinispan.statetransfer.StateTransferException : java.util.concurrent.TimeoutException : Timed out waiting for a cluster-wide sync to be acquired . ( timeout = 60 seconds ) < br/ > at org.infinispan.statetransfer.StateTransferManagerImpl.generateState ( StateTransferManagerImpl.java:171 ) < br/ > at org.infinispan.remoting.InboundInvocationHandlerImpl.generateState ( InboundInvocationHandlerImpl.java:118 ) < br/ > at org.infinispan.remoting.transport.jgroups.JGroupsTransport.getState ( JGroupsTransport.java:569 ) < br/ > at org.jgroups.blocks.MessageDispatcher $ ProtocolAdapter.handleUpEvent ( MessageDispatcher.java:691 ) < br/ > at org.jgroups.blocks.MessageDispatcher $ ProtocolAdapter.up ( MessageDispatcher.java:772 ) < br/ > at org.jgroups.JChannel.up ( JChannel.java:1453 ) < br/ > at org.jgroups.stack.ProtocolStack.up ( ProtocolStack.java:887 ) < br/ > at org.jgroups.protocols.pbcast.FLUSH.up ( FLUSH.java:483 ) < br/ > at org.jgroups.protocols.pbcast.STREAMING_STATE_TRANSFER $ StateProviderHandler.process ( STREAMING_STATE_TRANSFER.java:653 ) < br/ > at org.jgroups.protocols.pbcast.STREAMING_STATE_TRANSFER $ StateProviderThreadSpawner $ 1.run ( STREAMING_STATE_TRANSFER.java:582 ) < br/ > at java.util.concurrent.ThreadPoolExecutor $ Worker.runTask ( ThreadPoolExecutor.java:886 ) < br/ > at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:908 ) < br/ > at java.lang.Thread.run ( Thread.java:619 ) < br/ > Caused by : java.util.concurrent.TimeoutException : Timed out waiting for a cluster-wide sync to be acquired . ( timeout = 60 seconds ) < br/ > at org.infinispan.remoting.transport.jgroups.JGroupsDistSync.blockUntilAcquired ( JGroupsDistSync.java:42 ) < br/ > at org.infinispan.statetransfer.StateTransferManagerImpl.generateTransactionLog ( StateTransferManagerImpl.java:209 ) < br/ > at org.infinispan.statetransfer.StateTransferManagerImpl.generateState ( StateTransferManagerImpl.java:161 ) < br/ > ... 12 more < /p > < p > Node2 : < /p > < p > org.infinispan.statetransfer.StateTransferException : java.io.EOFException : Read past end of file < br/ > at org.infinispan.statetransfer.StateTransferManagerImpl.applyState ( StateTransferManagerImpl.java:331 ) < br/ > at org.infinispan.remoting.InboundInvocationHandlerImpl.applyState ( InboundInvocationHandlerImpl.java:101 ) < br/ > at org.infinispan.remoting.transport.jgroups.JGroupsTransport.setState ( JGroupsTransport.java:586 ) < br/ > at org.jgroups.blocks.MessageDispatcher $ ProtocolAdapter.handleUpEvent ( MessageDispatcher.java:712 ) < br/ > at org.jgroups.blocks.MessageDispatcher $ ProtocolAdapter.up ( MessageDispatcher.java:772 ) < br/ > at org.jgroups.JChannel.up ( JChannel.java:1410 ) < br/ > at org.jgroups.stack.ProtocolStack.up ( ProtocolStack.java:887 ) < br/ > at org.jgroups.protocols.pbcast.FLUSH.up ( FLUSH.java:483 ) < br/ > at org.jgroups.protocols.pbcast.STREAMING_STATE_TRANSFER.connectToStateProvider ( STREAMING_STATE_TRANSFER.java:525 ) < br/ > at org.jgroups.protocols.pbcast.STREAMING_STATE_TRANSFER.handleStateRsp ( STREAMING_STATE_TRANSFER.java:464 ) < br/ > at org.jgroups.protocols.pbcast.STREAMING_STATE_TRANSFER.up ( STREAMING_STATE_TRANSFER.java:225 ) < br/ > at org.jgroups.protocols.FRAG2.up ( FRAG2.java:188 ) < br/ > at org.jgroups.protocols.FC.up ( FC.java:474 ) < br/ > at org.jgroups.protocols.pbcast.GMS.up ( GMS.java:888 ) < br/ > at org.jgroups.protocols.pbcast.STABLE.up ( STABLE.java:234 ) < br/ > at org.jgroups.protocols.UNICAST2.handleDataReceived ( UNICAST2.java:637 ) < br/ > at org.jgroups.protocols.UNICAST2.up ( UNICAST2.java:262 ) < br/ > at org.jgroups.protocols.pbcast.NAKACK.up ( NAKACK.java:707 ) < br/ > at org.jgroups.protocols.VERIFY_SUSPECT.up ( VERIFY_SUSPECT.java:132 ) < br/ > at org.jgroups.protocols.FD_SOCK.up ( FD_SOCK.java:270 ) < br/ > at org.jgroups.protocols.MERGE2.up ( MERGE2.java:210 ) < br/ > at org.jgroups.protocols.Discovery.up ( Discovery.java:281 ) < br/ > at org.jgroups.protocols.TP.passMessageUp ( TP.java:1009 ) < br/ > at org.jgroups.protocols.TP.access $ 100 ( TP.java:56 ) < br/ > at org.jgroups.protocols.TP $ IncomingPacket.handleMyMessage ( TP.java:1549 ) < br/ > at org.jgroups.protocols.TP $ IncomingPacket.run ( TP.java:1526 ) < br/ > at java.util.concurrent.ThreadPoolExecutor $ Worker.runTask ( ThreadPoolExecutor.java:886 ) < br/ > at java.util.concurrent.ThreadPoolExecutor $ Worker.run ( ThreadPoolExecutor.java:908 ) < br/ > at java.lang.Thread.run ( Thread.java:619 ) < br/ > Caused by : java.io.EOFException : Read past end of file < br/ > at org.jboss.marshalling.AbstractUnmarshaller.eofOnRead ( AbstractUnmarshaller.java:184 ) < br/ > at org.jboss.marshalling.AbstractUnmarshaller.readUnsignedByteDirect ( AbstractUnmarshaller.java:319 ) < br/ > at org.jboss.marshalling.AbstractUnmarshaller.readUnsignedByte ( AbstractUnmarshaller.java:280 ) < br/ > at org.jboss.marshalling.river.RiverUnmarshaller.doReadObject ( RiverUnmarshaller.java:207 ) < br/ > at org.jboss.marshalling.AbstractUnmarshaller.readObject ( AbstractUnmarshaller.java:85 ) < br/ > at org.infinispan.marshall.jboss.GenericJBossMarshaller.objectFromObjectStream ( GenericJBossMarshaller.java:162 ) < br/ > at org.infinispan.marshall.VersionAwareMarshaller.objectFromObjectStream ( VersionAwareMarshaller.java:180 ) < br/ > at org.infinispan.statetransfer.StateTransferManagerImpl.processCommitLog ( StateTransferManagerImpl.java:228 ) < br/ > at org.infinispan.statetransfer.StateTransferManagerImpl.applyTransactionLog ( StateTransferManagerImpl.java:258 ) < br/ > at org.infinispan.statetransfer.StateTransferManagerImpl.applyState ( StateTransferManagerImpl.java:320 ) < br/ > ... 28 more < /p > 
[ ISPN-6647 ] DecoratedCache.putForExternalRead method with Metadata ignores Metadata < p > The implementation of the < tt > putForExternalRead < /tt > method ignores the < tt > Metadata < /tt > parameter , instead of passing it on to the < tt > putForExternalRead < /tt > method in the cache implementation . This is no doubt because the cache implementation previously didn t support < tt > Metadata < /tt > for < tt > putForExternalRead < /tt > . < /p > < p > I will prepare a PR and attach it to this ticket shortly . It was a gargantuan effort to patch this up , as you ll see ! < /p > 
[ ISPN-675 ] Make Infinispan JOPR plugin friendly with AS environments < p > Within the descriptor : < /p > < ul class= alternate type= square > < li > Change top level from server to service < /li > < li > Within the service add : < br/ > & lt ; parent-resource-type name= JMX Server plugin= JMX / & gt ; < br/ > & lt ; parent-resource-type name= JBossAS Server plugin= JBossAS / & gt ; < br/ > & lt ; parent-resource-type name= JBossAS Server plugin= JBossAS5 / & gt ; < /li > < /ul > < p > Within source : < /p > < ul class= alternate type= square > < li > From implements ResourceComponent should convert into extend MBeanResourceComponent ( like StatisticsComponent ) < /li > < li > You might be able to reduce the code with the above change < /li > < /ul > < p > Base your work on what has been done in : < a href= https : //svn.jboss.org/repos/jopr/trunk/modules/plugins/hibernate class= external-link rel= nofollow > https : //svn.jboss.org/repos/jopr/trunk/modules/plugins/hibernate < /a > < /p > < p > Test : < /p > < ul class= alternate type= square > < li > Test with AS6 admin console ( drop the plugin jar into the plugins subdirectory in the admin console ) < /li > < li > Test with RHQ < /li > < /ul > 
[ ISPN-693 ] Implement a SKIP_CACHE_LOAD flag to prevent loading an entry < p > As mentioned on the mailing list , when doing < /p > < p > cache.withFlags ( Flag.SKIP_REMOTE_LOOKUP ) .put ( key , value ) < /p > < p > this will cause a CacheLoaderInterceptor to try loading the data , there is no way to prevent this ; this is a major performance issue when I m not interested in the return value of put. < /p > < p > Apparently SKIP_REMOTE_LOOKUP work only to prevent return values from other nodes , but there s not way to prevent loading from the store . SKIP_CACHE_STORE would correctly skip the read , but I actually want the value to be written to the store , just needing to avoid the read. < /p > 
[ ISPN-70 ] Transparent eager locking for transactions < p > Allow a configuration attribute on & lt ; transaction / & gt ; to be able to specify whether cluster-wide locks are acquired eagerly or lazily . The current scheme ( lazy ) should be the default. < /p > < p > This could be implemented by broadcasting LockControlCommands alongside acquiring local locks for necessary keys. < /p > 
[ ISPN-704 ] Make cache events generic where possible < p > It would be nice if the Cache events were generic , and save the user from needless casting . e.g . CacheEntryActivatedEvent & lt ; K , V & gt ; < br/ > This would also further discourage users from fetching values from their own generic Cache & lt ; K , V & gt ; rather than having to cast the values from the event or DataContainer ( a potential gotcha , see < a href= https : //issues.jboss.org/browse/ISPN-703 title= Add cache value to event objects class= issue-link data-issue-key= ISPN-703 > < del > ISPN-703 < /del > < /a > ) . < br/ > Type erasure should ensure that any current unparameterized usage is fully compatible. < /p > 
[ ISPN-2797 ] Support Query on Caches configured with INVALIDATION mode < p > This is currently not supported as other nodes won t get a copy of the value , and are consequentially unable to scan annotations or recognize new services which need to be started. < /p > 
[ ISPN-72 ] Asynchronous Cache API < p > Unscheduled for now. < /p > < p > From Tim Fox : < /p > < p > E.g . imagine I set a value in the cache , by the time I get the response that the value has been set in the cache , I also need to know that it s been replicated to another node so I can have the redundancy guarantees for high availability. < /p > < p > One way to do that is just to block the thread that calls set ( ) until the replication has been performed synchronously to the other node and returns , however that will involve a network round trip per set. < /p > < p > What would be nice would to be able to get the acknowledgements of replication back asynchronously in a different stream , e.g. < /p > < p > S = Set in cache , A = acknowledgement of replication of Set ( ) in cache < /p > < p > With a blocking approach you d have < /p > < p > S1 < br/ > A1 < br/ > S2 < br/ > A2 < br/ > S3 < br/ > A3 < /p > < p > I.e . you wait for the ack of the set before calling the next set , which involves a network RTT per set. < /p > < p > With a non blocking ( pipelined ) approach , you call your sets in quick succession without waiting for a response , then some time later you d get your ack back. < /p > < p > E.g . chronologically something like : < /p > < p > S1 < br/ > S2 < br/ > S3 < br/ > S4 < br/ > S5 < br/ > S6 < br/ > S7 < br/ > A1 < br/ > A2 < br/ > S8 < br/ > A3 < br/ > S9 < br/ > A4 < br/ > S10 < br/ > S11 < br/ > A5 < /p > < p > Since you re not blocking , you can use the throughput of the network without being limited by its latency. < /p > < p > This is the kind of thing we in messaging replication , i.e . when someone sends a load of message one by one we can t individually do a network RTT per message ( it would be too slow ) to replicate them , but they still need the guarantee the message has reached the backup before they get the acknolwedgement of send back. < /p > < p > Manik : < /p > < p > Returning a Future would probably be the way to do this , but I would need to think about what the API would look like though , since the API should look and behave the same regardless of cache mode/cluster config used . < /p > 
[ ISPN-749 ] Infinispan servers should expose some stats over JMX < p > Infinispan servers should expose some stats of their own , such as : amount of data read , amount of data written back to clients ... etc. < /p > 
[ ISPN-776 ] Add configurable properties for each configuration lookup class < p > See < a href= https : //issues.jboss.org/browse/ISPN-379 title= JGroupsChannelLookup should take in Properties created from props set on the transport class= issue-link data-issue-key= ISPN-379 > < del > ISPN-379 < /del > < /a > . < br/ > Currently , most pluggable components can only be specified by a lookup class name . While some accept a configurable Properties object ( e.g . JGroupsChannelLookup ) , not all do ( e.g . MBeanServerLookup ) . Consequently , it is very awkward to implement a parameterized MBeanServerLookup implementation ( e.g . to find the server using a jmx agent id , use an injected mbean server instance , etc . ) . < br/ > I can think of 2 ways to improve this : < br/ > 1 . Add the ability to specify properties objects for each pluggable component . e.g . GlobalConfiguration.setMBeanServerProperties ( ... ) , MBeanServerLookup.getMBeanServer ( Properties properties ) < br/ > 2 . Allow the user to define the instance directly . e.g . GlobalConfiguration.setMBeanServerLookup ( MBeanServerLookup lookup ) < /p > < p > Ideally , Infinispan could support both mechanisms . The 1st allows flexible declarative configuration . The 2nd allows even more flexible programmatic configuration. < /p > < p > Thinking this through a bit more - we can support both approaches using the following ( using MBeanServerLookup as an example ) : < /p > < ul > < li > Leave MBeanServerLookup interface as is < /li > < li > Replace GlobalConfiguration.setMBeanServerLookup ( String ) with GlobalConfiguration.setMBeanServerLookup ( MBeanServerLookup lookup ) < /li > < li > Create generic implementation of MBeanServerLookup that delegates to an instance constructed via class name and java bean properties < /li > < li > If lookup class is specified in the xml , construct generic MBeanServerLookup object accordingly ( using class name + properties ) < /li > < /ul > < p > Just a thought . Approach # 1 is good enough. < /p > 
[ ISPN-790 ] Refactor the way release versions are generated < p > Makes it easier for release scripts to update. < /p > 
[ ISPN-804 ] There should be a clustering mode for local < p > If we have a cluster.xml where the clustering mode is replication mode for the default configuration , there s no way to override a specific cache to be in local mode . This is not convenient and require us either to separate the cache definition in two cluster.xml or to make the local mode as default and change all the other caches to replication mode. < /p > 
[ ISPN-805 ] Use custom externalizers to improve performance of Lucene Directory < p > Use < a href= https : //issues.jboss.org/browse/ISPN-244 title= Enable external user/framework defined Externalizers class= issue-link data-issue-key= ISPN-244 > < del > ISPN-244 < /del > < /a > to improve the Lucene Directory < /p > 
[ ISPN-807 ] Generalize Externalizer interface < p > Make Externalizer interface generalized in order to make it more typesafe , i.e . : < /p > < p > interface Externalizer & lt ; T & gt ; < /p > { void writeObject ( ObjectOutput output , T object ) throws IOException ; T readObject ( ObjectInput input ) throws IOException , ClassNotFoundException ; } 
[ ISPN-822 ] Allow retrieving coordinator address from EmbeddedCacheManager < p > In order to get the coordinator s address I go through the following hoops : < /p > < p > cache.getAdvancedCache ( ) .getRpcManager ( ) .getTransport ( ) .getCoordinator ( ) .getJGroupsAddress ( ) . < /p > < p > which requires obtaining a clustered cache first. < /p > < p > the EmbeddedCacheManager interface exposes several methods to access the local address , the address of all members and whether the local address is also coordinator , but there is no method to get the cluster s coordinator address. < /p > 
[ ISPN-825 ] Consider staggering remote get requests when using DIST < p > In DIST mode , when a request is made on a key that is not mapped locally , a remote get is sent to all data owners of that key and the first response is used . This can add unnecessary load on the network as all nodes still eventually respond , and if values are large this can cause a lot of unnecessary network traffic. < /p > < p > The purpose of broadcasting to all data owners is so that ( 1 ) if one is down , another could still respond ( 2 ) if one is overloaded , others may respond faster. < /p > < p > A solution around this could be based on either ( or both ) of : < /p > < ul > < li > Provide a configurable stagger timeout , e.g . 100ms . E.g. , RPC to ( random ) Owner1 . Wait for timeout t. If no response , RPC to Owner2 . etc. < /li > < li > Always broadcast to a ( configurable ) subset of owners , e.g. , always 2 even if numOwners is 5. < /li > < /ul > < p > Needs careful thought and design. < /p > 
[ ISPN-859 ] Upgrade consistent hash function to use MurmurHash3 for better performance and more even spread < p > MurmurHash3 has been released . Details of the improvements here are on : < /p > < p > < a href= http : //sites.google.com/site/murmurhash/ class= external-link rel= nofollow > http : //sites.google.com/site/murmurhash/ < /a > < br/ > < a href= http : //code.google.com/p/smhasher/wiki/MurmurHash3 class= external-link rel= nofollow > http : //code.google.com/p/smhasher/wiki/MurmurHash3 < /a > < /p > < p > Would need to update the hash version in Hot Rod as well. < /p > 
[ ISPN-86 ] InternalCacheValue/InternalCacheEntry optimization < p > From a IRC discussion with Manik : < br/ > Right now an InternalCacheValue ( ICV ) is created from an InternalCacheEntry ( ICE ) by the CacheStore whenever we persist an entry : this is in order to avoid duplicate marshalling of the key. < br/ > Same way , an InternalCacheEntry is created from an ICV whenever the value is unmarshalled. < br/ > Avoid this unnecessary creation of objects by making ICE aggregate an ICV , and delegate all the state calls to it. < br/ > Impl note : in order to allow delegation from ICE to ICV , make all the ICV s methods final. < /p > 
[ ISPN-864 ] Passivate in-memory entries to cache store upon shutdown < p > When cache store configured , passivate in-memory entries when cache is shutdown . < /p > 
[ ISPN-887 ] XAResource implementation improvements ( TransactionalXAResource ) < p > Reviewing the code with Jonathan Halliday has brought the following aspects ( see TODOs below ) : < /p > < p > package org.infinispan.transaction.xa ; < /p > < p > import org.infinispan.commands.CommandsFactory ; < br/ > import org.infinispan.commands.tx.CommitCommand ; < br/ > import org.infinispan.commands.tx.PrepareCommand ; < br/ > import org.infinispan.commands.tx.RollbackCommand ; < br/ > import org.infinispan.config.Configuration ; < br/ > import org.infinispan.context.InvocationContextContainer ; < br/ > import org.infinispan.context.impl.LocalTxInvocationContext ; < br/ > import org.infinispan.interceptors.InterceptorChain ; < br/ > import org.infinispan.util.logging.Log ; < br/ > import org.infinispan.util.logging.LogFactory ; < /p > < p > import javax.transaction.xa.XAException ; < br/ > import javax.transaction.xa.XAResource ; < br/ > import javax.transaction.xa.Xid ; < /p > < p > / * * < /p > < ul > < li > This acts both as an local { @ link org.infinispan.transaction.xa.CacheTransaction } < p > and implementor of an < /p > { @ link * javax.transaction.xa.XAResource } < p > that will be called by tx manager on various tx stages. < br/ > * < /p > < /li > < li > @ author Mircea.Markus @ jboss.com < /li > < li > @ since 4.0 < br/ > * / < br/ > public class TransactionXaAdapter implements XAResource { < /li > < /ul > < p > private static final Log log = LogFactory.getLog ( TransactionXaAdapter.class ) ; < br/ > private static boolean trace = log.isTraceEnabled ( ) ; < /p > < p > //todo - comment why timeout is not used < br/ > // - it is useful only if TM and client are in separate processes and TM might fail . this is because a client might tm.begin and then the TM ( running separate process ) crashes < br/ > // - in this scenario the TM won t ever call XAResource.rollback , so these resources would be held there forever < br/ > // - not affecting us as in all scenarios TM & amp ; XAResource are collocated < /p > < p > private int txTimeout ; < /p > < p > private final InvocationContextContainer icc ; < br/ > private final InterceptorChain invoker ; < /p > < p > private final CommandsFactory commandsFactory ; < br/ > private final Configuration configuration ; < /p > < p > private final TransactionTable txTable ; < /p > < p > / * * < /p > < ul > < li > XAResource is associated with a transaction between enlistment ( XAResource.start ( ) ) XAResource.end ( ) . It s only the < /li > < li > boundary methods ( prepare , commit , rollback ) that need to be stateless . < /li > < li > Reefer to section 3.4.4 from JTA spec v.1.1 < br/ > * / < br/ > private final LocalTransaction localTransaction ; < /li > < /ul > < p > public TransactionXaAdapter ( LocalTransaction localTransaction , TransactionTable txTable , CommandsFactory commandsFactory , < br/ > Configuration configuration , InterceptorChain invoker , InvocationContextContainer icc ) < /p > { this.localTransaction = localTransaction ; this.txTable = txTable ; this.commandsFactory = commandsFactory ; this.configuration = configuration ; this.invoker = invoker ; this.icc = icc ; } < p > / * * < /p > < ul > < li > This can be call for any transaction object . See Section 3.4.6 ( Resource Sharing ) from JTA spec v1.1. < br/ > * / < br/ > public int prepare ( Xid xid ) throws XAException { < br/ > //todo if I throw an exception here then I should also cleanup resources as .rollback might never be called ! ! < br/ > LocalTransaction localTransaction = getLocalTransactionAndValidate ( xid ) ; < /li > < /ul > < p > //todo - same as last comment < br/ > validateNotMarkedForRollback ( localTransaction ) ; < /p > < p > if ( configuration.isOnePhaseCommit ( ) ) { < br/ > if ( trace ) log.trace ( Received prepare for tx : < /p > { 0 } . Skipping call as 1PC will be used . , xid ) ; < br/ > return XA_OK ; < br/ > } < br/ > < br/ > PrepareCommand prepareCommand = commandsFactory.buildPrepareCommand ( localTransaction.getGlobalTransaction ( ) , localTransaction.getModifications ( ) , configuration.isOnePhaseCommit ( ) ) ; < br/ > if ( trace ) log.trace ( Sending prepare command through the chain : + prepareCommand ) ; < br/ > < br/ > LocalTxInvocationContext ctx = icc.createTxInvocationContext ( ) ; < br/ > ctx.setLocalTransaction ( localTransaction ) ; < br/ > try { < br/ > invoker.invoke ( ctx , prepareCommand ) ; < br/ > if ( localTransaction.isReadOnly ( ) ) { if ( trace ) log.trace ( Readonly transaction : + localTransaction.getGlobalTransaction ( ) ) ; // force a cleanup to release any objects held . Some TMs don t call commit if it is a READ ONLY tx . See ISPN-845 commit ( xid , false ) ; return XA_RDONLY ; } else { return XA_OK ; } < br/ > } catch ( Throwable e ) { // todo if I throw this exception make sure that all locks are 100 % cleaned up , as TM won t do any rollback call on it . // todo - handle this ! - & gt ; if only a node fails to ack tx prepare , and that node is still part of the cluster , it needs to be sync with tx state . // one way of doing this is by pushing the tx state to that node until one of two happens : a ) node ack or b ) node is shunned from the cluster log.error ( Error while processing PrepareCommand , e ) ; throw new XAException ( XAException.XAER_RMERR ) ; } < br/ > } < br/ > < br/ > / * * < br/ > * Same comment as for { @ link # prepare ( javax.transaction.xa.Xid ) } applies for commit. < br/ > * / < br/ > public void commit ( Xid xid , boolean isOnePhase ) throws XAException { < br/ > LocalTransaction localTransaction = getLocalTransactionAndValidate ( xid ) ; < br/ > < br/ > if ( trace ) log.trace ( committing transaction { 0 } < p > , localTransaction.getGlobalTransaction ( ) ) ; < br/ > try { < br/ > LocalTxInvocationContext ctx = icc.createTxInvocationContext ( ) ; < br/ > ctx.setLocalTransaction ( localTransaction ) ; < br/ > // todo this needs to be split in two : < br/ > // - configuration.isOnePhaseCommit ( ) this is not as important , as the user ack that it doesn t really need consistency < br/ > // - on the other case ( isOnePhase ==true ) make sure that this method either commits successfully or it fails and cleans up logs eventually < br/ > if ( configuration.isOnePhaseCommit ( ) || isOnePhase ) { < br/ > validateNotMarkedForRollback ( localTransaction ) ; < /p > < p > if ( trace ) log.trace ( Doing an 1PC prepare call on the interceptor chain ) ; < br/ > PrepareCommand command = commandsFactory.buildPrepareCommand ( localTransaction.getGlobalTransaction ( ) , localTransaction.getModifications ( ) , true ) ; < br/ > try < /p > { invoker.invoke ( ctx , command ) ; } < p > catch ( Throwable e ) < /p > { log.error ( Error while processing 1PC PrepareCommand , e ) ; throw new XAException ( XAException.XAER_RMERR ) ; } < br/ > } else { < br/ > CommitCommand commitCommand = commandsFactory.buildCommitCommand ( localTransaction.getGlobalTransaction ( ) ) ; < br/ > try { invoker.invoke ( ctx , commitCommand ) ; } catch ( Throwable e ) { log.error ( Error while processing 1PC PrepareCommand , e ) ; throw new XAException ( XAException.XAER_RMERR ) ; } < p > } < br/ > } finally < /p > { cleanup ( localTransaction ) ; } < p > } < /p > < p > / * * < /p > < ul > < li > Same comment as for { @ link # prepare ( javax.transaction.xa.Xid ) } < p > applies for commit. < br/ > * / < br/ > public void rollback ( Xid xid ) throws XAException < /p > { rollbackImpl ( xid , commandsFactory , icc , invoker , txTable ) ; } < /li > < /ul > < p > public static void rollbackImpl ( Xid xid , CommandsFactory commandsFactory , InvocationContextContainer icc , InterceptorChain invoker , TransactionTable txTable ) throws XAException { < br/ > LocalTransaction localTransaction = txTable.getLocalTransaction ( xid ) ; < br/ > if ( localTransaction == null ) { < br/ > if ( trace ) log.trace ( no tx found for < /p > { 0 } , xid ) ; < br/ > throw new XAException ( XAException.XAER_NOTA ) ; < br/ > } < br/ > if ( trace ) log.trace ( rollback transaction { 0 } < p > , localTransaction.getGlobalTransaction ( ) ) ; < br/ > RollbackCommand rollbackCommand = commandsFactory.buildRollbackCommand ( localTransaction.getGlobalTransaction ( ) ) ; < br/ > LocalTxInvocationContext ctx = icc.createTxInvocationContext ( ) ; < br/ > ctx.setLocalTransaction ( localTransaction ) ; < br/ > try < /p > { invoker.invoke ( ctx , rollbackCommand ) ; } < p > catch ( Throwable e ) < /p > { log.error ( Exception while rollback , e ) ; throw new XAException ( XAException.XA_HEURHAZ ) ; } < p > finally < /p > { cleanupImpl ( localTransaction , txTable , icc ) ; } < p > } < /p > < p > private LocalTransaction getLocalTransactionAndValidate ( Xid xid ) throws XAException { < br/ > LocalTransaction localTransaction1 = txTable.getLocalTransaction ( xid ) ; < br/ > if ( localTransaction1 == null ) { < br/ > log.error ( This should not happen when XAResource and TM are in the same process ! No tx found for < /p > { 0 } , xid ) ; < br/ > throw new XAException ( XAException.XAER_NOTA ) ; < br/ > } < br/ > return localTransaction1 ; < br/ > } < br/ > < br/ > public void start ( Xid xid , int i ) throws XAException { localTransaction.setXid ( xid ) ; txTable.addLocalTransactionMapping ( localTransaction ) ; if ( trace ) log.trace ( start called on tx + this.localTransaction.getGlobalTransaction ( ) ) ; } < br/ > < br/ > public void end ( Xid xid , int i ) throws XAException { if ( trace ) log.trace ( end called on tx + this.localTransaction.getGlobalTransaction ( ) ) ; } < br/ > < br/ > public void forget ( Xid xid ) throws XAException { if ( trace ) log.trace ( forget called ) ; } < br/ > < br/ > public int getTransactionTimeout ( ) throws XAException { if ( trace ) log.trace ( start called ) ; return txTimeout ; } < br/ > < br/ > public boolean isSameRM ( XAResource xaResource ) throws XAException { < br/ > if ( ! ( xaResource instanceof TransactionXaAdapter ) ) { return false ; } < br/ > TransactionXaAdapter other = ( TransactionXaAdapter ) xaResource ; < br/ > return other.equals ( this ) ; < br/ > } < br/ > < br/ > public Xid [ ] recover ( int i ) throws XAException { if ( trace ) log.trace ( recover called : + i ) ; return null ; } < br/ > < br/ > public boolean setTransactionTimeout ( int i ) throws XAException { this.txTimeout = i ; return true ; } < br/ > < br/ > @ Override < br/ > public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof TransactionXaAdapter ) ) return false ; TransactionXaAdapter that = ( TransactionXaAdapter ) o ; return this.localTransaction.equals ( that.localTransaction ) ; } < br/ > < br/ > @ Override < br/ > public int hashCode ( ) { return localTransaction.getGlobalTransaction ( ) .hashCode ( ) ; } < br/ > < br/ > @ Override < br/ > public String toString ( ) { < br/ > return TransactionXaAdapter { + localTransaction= + localTransaction + } ; < br/ > } < br/ > < br/ > private void validateNotMarkedForRollback ( LocalTransaction localTransaction ) throws XAException { < br/ > if ( localTransaction.isMarkedForRollback ( ) ) { < br/ > if ( trace ) log.trace ( Transaction already marked for rollback : { 0 } < p > , localTransaction ) ; < br/ > throw new XAException ( XAException.XA_RBROLLBACK ) ; < br/ > } < br/ > } < /p > < p > private void cleanup ( LocalTransaction localTransaction ) < /p > { TransactionXaAdapter.cleanupImpl ( localTransaction , txTable , icc ) ; } < p > private static void cleanupImpl ( LocalTransaction localTransaction , TransactionTable txTable , InvocationContextContainer icc ) < /p > { txTable.removeLocalTransaction ( localTransaction ) ; icc.suspend ( ) ; } < p > < br/ > } < /p > 
[ ISPN-9 ] Eviction redesign < p > Eviction needs some redesigning : < /p > < p > 1 . Eviction based on timed out/unused entries ( passivation ) . This is not expiration , which removes entries. < br/ > 2 . Eviction event queue , eviction algorithm queues wasteful - can we not incorporate additional ordering into the data container and directly prune ? < /p > 
[ ISPN-3051 ] Allow configuring the number of segments per node < p > This should allow for the following use cases : < /p > < ul class= alternate type= square > < li > a node to take more load < /li > < li > a node to take no load < /li > < /ul > < p > A simple way for specifying this would be to configure a load factor per node , e.g . more powerful machine would be 2 * x and that would mean that it would take twice the load of an ordinary machine in the cluster. < /p > 
[ ISPN-905 ] Enhance cache management methods on EmbeddedCacheManager < p > These should include : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > boolean cacheExists ( String cache ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // Old : Cache & lt ; ? , ? & gt ; getCacheIfExists ( String cache ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Cache & lt ; ? , ? & gt ; getCache ( String cache , boolean createIfAbsent ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > boolean remove ( String Cache ) < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > Original request : < /p > < blockquote > < p > There seems to be no ability to check if a populated cache exists through both CacheManager and through Cache ( =is this still a valid handle ) and to get a cache if it exists. < /p > < /blockquote > 
[ ISPN-907 ] SSL access to Hot Rod < p > Investigate and integrate Adrian s patch for Hot Rod server so that it can accessed via SSL. < /p > < p > Email from Adrian : < /p > < p > While I remember heres a patch to add ssl for infinispan clients. < br/ > I did it a couple of weeks ago , but I dont know when Ill have time < br/ > to finish it off/polish it . It was based on head a few weeks ago , < br/ > but I dont remember which version . < img class= emoticon src= https : //issues.jboss.org/images/icons/emoticons/sad.png height= 16 width= 16 align= absmiddle alt= border= 0 / > < /p > < p > The horrible part is the way I had to modify all the parameter lists. < br/ > It could really do with passing some config object instead. < /p > < p > I dont know how to make git diff include new uncommitted files so Ive attached them < br/ > seperately. < /p > < p > See the test for how to use it , but it is basically set the config properties < br/ > ( with the relevant infinispan package prefixes ) < br/ > use_ssl=true < br/ > key_store_file_name=jks file containing our key < br/ > key_store_password=secret < br/ > trust_store_file_name=jks file containing public keys we trust for authentication < br/ > trust_store_password=another-secret < /p > < p > Optionally you can get the server to authenticate the client as well < /p > < p > need_client_auth=true < /p > < p > which means the server will need a trust store. < /p > < p > I ve also left it so if you dont set the properties it will use the default implementations. < br/ > But this doesnt work out of the box unless you enable the anon alogorithms on < br/ > the server , they aren t enabled by default . Those dont authenticate , they just encrypt the traffic. < /p > < p > The main thing left to do would be change the test to get maven to generate the < br/ > key/trust store in a well defined place in target . < /p > < p > Other comments : < /p > < ul > < li > The code on the serrver will also work for other protocols as well , e.g . memcached < br/ > if the client supports ssl < /li > < /ul > < ul > < li > The ssl context construction is pretty similar in the client/server < br/ > and could probably be shared if I knew where to put shared stuff in the codebase . < img class= emoticon src= https : //issues.jboss.org/images/icons/emoticons/smile.png height= 16 width= 16 align= absmiddle alt= border= 0 / > < /li > < /ul > < ul > < li > There is some commented out bits where I think the client/server should really < br/ > be adding socket timeouts . Otherwise network drops/splits could cause the connection < br/ > to hang forever . There should at least be a connection timeout on the socket construction , < br/ > if you dont want to implement a full blown ping to continually test the connection rather < br/ > than just ping on start - which doesnt run until after the connection timeout is needed. < /li > < /ul > < ul > < li > I had to modify the system property handling so you can have a default of null . < br/ > I only did this for Strings , might not be relevant for others ? < /li > < /ul > < ul > < li > Why doesnt the client side do system property replacement like the server ? < /li > < /ul > < ul > < li > Theres a lot of places in the code doing < /li > < /ul > < p > InputStream is = openStream ( ) ; < br/ > useIt ( is ) ; < /p > < p > but never close the stream . While this is probably ok in infinispans use cases < br/ > it is not good practice to leave files open for the gc to close - that could take a while < br/ > to happen and you are hogging system resources. < /p > < p > Either useIt ( ) should close the stream or the code should be < /p > < p > InputStream is = openStream ( ) ; < br/ > try < /p > { useIt ( is ) ; } < p > finally < /p > { is.close ( ) ; } < p > Feel free to post whatever parts of this message you like in the infinispan forum . < img class= emoticon src= https : //issues.jboss.org/images/icons/emoticons/smile.png height= 16 width= 16 align= absmiddle alt= border= 0 / > < /p > 
[ ISPN-911 ] Simplify configuration with fluent API < p > As is , it is rather tedious sometimes to set every little configuration toggle using coarse APIs like GlobalConfiguration or Configuration . We could simplify this model and allow users to set related units of configuration using more grouped APIs as : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > class GlobalConfiguration { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > MarshallerBuilder configureMarshaller ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > class MarshallerBuilder { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > MarshallerBuilder setInstance ( Marshaller m ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > MarshallerBuilder setType ( Class & lt ; ? extends Marshaller & gt ; c ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > MarshallerBuilder setVersion ( String s ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > & nbsp ; < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > MarshallerBuilder addProperty ( String name , String value ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > MarshallerBuilder addProperties ( Properties p ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > And on top if we can use fluent API to make configuration setting even easier : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > globalConf.configureMarshaller ( ) .setType ( MyMarshaller.class ) .addProperty ( foo , bar ) .setVersion ( 5.0 ) ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > 
[ ISPN-94 ] Implement Map.keySet ( ) , Map.values ( ) and Map.entrySet ( ) methods < p > Implement Map.keySet ( ) , Map.values ( ) and Map.entrySet ( ) methods. < /p > 
[ ISPN-948 ] Support XML marshaling of Configuration instances < p > Infinispan supports a very flexible way of configuring caches using multiple levels of inheritance . < br/ > While this is really nice , it is sometimes not easy to understand how exactly a particular cache was configured . < br/ > ( E.g . JPA is just one example where a cache configuration can be adjusted in several ways ) . < /p > < p > JMX or debuggers help but may not always be available. < /p > < p > What about allowing to convert a configuration instance back to XML to give a quick overview of the really applied settings . < em > ( Optionally it might also be a nice little feature to implement a toXmlString ( ) ; method or override the default and also make this available through JMX ) < /em > < /p > < p > JAXB annotations are already present on all configurable options but a couple getters and a @ XmlRootElement annotation is missing that would allow to convert an existing instance back to XML . The effort in doing this should be rather low. < /p > < p > & # 8212 ; < br/ > This feature request may also fit with # < a href= https : //issues.jboss.org/browse/ISPN-791 title= On node startup , ensure all peers have compatible configurations class= issue-link data-issue-key= ISPN-791 > ISPN-791 < /a > as it would allow to transfer cache configs using XML. < /p > 
[ ISPN-958 ] Java HotRod : Add client timeout option < p > There does not seem to be an option to specify a client time-out . This is pretty common and IMHO a valid feature with any client out there . < /p > < p > < a href= http : //docs.jboss.org/infinispan/4.2/apidocs/org/infinispan/client/hotrod/exceptions/package-summary.html class= external-link rel= nofollow > http : //docs.jboss.org/infinispan/4.2/apidocs/org/infinispan/client/hotrod/exceptions/package-summary.html < /a > < /p > < p > The only option is to be catching a HotRodTimeoutException which is rethrowed on replication timeout on the Infinispan side , which is not it. < /p > < p > < a href= http : //docs.jboss.org/infinispan/4.2/apidocs/org/infinispan/client/hotrod/exceptions/HotRodTimeoutException.html class= external-link rel= nofollow > http : //docs.jboss.org/infinispan/4.2/apidocs/org/infinispan/client/hotrod/exceptions/HotRodTimeoutException.html < /a > < /p > 
[ ISPN-245 ] Core module to delegate lifecycle events to sub-modules < p > Follow a service registry style approach to delegating lifecycle events so that modules can register for hooks . The purpose behind this is that some modules need to perform some setup . E.g. , the tree module needs to register specific types with the Marshaller . The query module needs to register an interceptor with the Cache if the Cache has enabled querying . Etc. < /p > < p > The approach is to use a JDK service registry style approach . The Core module defines a ModuleLifecycle interface : < /p > < p > interface ModuleLifecycle { < br/ > void cacheManagerStarting ( GlobalComponentRegistry gcr ) ; < br/ > void cacheManagerStarted ( GlobalComponentRegistry gcr ) ; < br/ > void cacheManagerStopping ( GlobalComponentRegistry gcr ) ; < br/ > void cacheManagerStopped ( GlobalComponentRegistry gcr ) ; < /p > < p > void cacheStarting ( ComponentRegistry cr , String cacheName ) ; < br/ > void cacheStarted ( ComponentRegistry cr , String cacheName ) ; < br/ > void cacheStopping ( ComponentRegistry cr , String cacheName ) ; < br/ > void cacheStopped ( ComponentRegistry cr , String cacheName ) ; < br/ > } < /p > < p > each module would implement this interface. < /p > < p > Registration is performed by each module maintaining a infinispan-module-info.properties file in its classpath , containing : < br/ > infinispan.module.lifecycle= & lt ; ModuleLifecycle impl & gt ; < /p > < p > The DefaultCacheManager , when starting up , scans its classpath for infinispan-module-info.properties and registers all listeners . Everytime the cache manager starts , stops , or caches start or stop , the appropriate callbacks are invoked. < /p > 
[ ISPN-964 ] ConsistentHash interface should deal with Sets and not Lists of Addresses < p > This will prevent adding an address to the hash wheel more than once. < /p > 
[ ISPN-975 ] Make Hot Rod topology cache parameters configurable < p > Ups , my fault . Hot Rod topology cache state retrieval timeout is not configurable ! Neither the lock timeout. < /p > < p > These two need to be made configurable. < /p > 
[ ISPN-994 ] Create tooling ( JMX ) to handle heuristic transactions < p > now that < a href= https : //issues.jboss.org/browse/ISPN-272 title= Implement XA recovery in TransactionXaAdapter class= issue-link data-issue-key= ISPN-272 > < del > ISPN-272 < /del > < /a > is implemented the TM is aware about the heuristic transactions . < br/ > After TM determines such a transaction it informs the System Administrator . It s SA s job to force the rollback/commit of those pending transactions. < br/ > In order to do that he needs tooling in order to access the cluster . A solution would be JMX as described here : < a href= http : //lists.jboss.org/pipermail/infinispan-dev/2011-March/007651.html class= external-link rel= nofollow > http : //lists.jboss.org/pipermail/infinispan-dev/2011-March/007651.html < /a > < /p > < p > This is complementary to < a href= https : //issues.jboss.org/browse/ISPN-272 title= Implement XA recovery in TransactionXaAdapter class= issue-link data-issue-key= ISPN-272 > < del > ISPN-272 < /del > < /a > and very important as without it transaction failure can not be fixed. < /p > 
[ ISPN-161 ] REST API based on the server module as a back-end [ ISPN-171 ] Build a server module based on the HotRod protocol < p > Essentially , a module that can be deployed as a REST API to talk to the cache backend . Possibly something that wraps the cache , making use of libraries such as RESTEasy. < /p > < p > Could be based on existing JBoss Remoting components which have the capability to handle load balancing and faoliver . Needs to share some components with < a href= https : //issues.jboss.org/browse/ISPN-172 title= Build a Java-based smart client that makes use of the HotRod protocol class= issue-link data-issue-key= ISPN-172 > < del > ISPN-172 < /del > < /a > so that protocol parsing code isn t repeated . May also share some components with < a href= https : //issues.jboss.org/browse/ISPN-173 title= Build memcached server module class= issue-link data-issue-key= ISPN-173 > < del > ISPN-173 < /del > < /a > so that abstract transport and socket handling code is reused. < /p > < p > Will also need a comprehensive wiki page detailing usage and demonstration. < /p > 
[ ISPN-4211 ] Introduce dialect attribute for jdbc cache stores [ ISPN-800 ] Infinispan inside OSGI < p > The main goal is to provide a specific configuration attribute for XML configuration . I.e . < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; string-keyed-jdbc-store name= jdbc-store datasource= java : jboss/datasources/JdbcDS dialect= MYSQL ... < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > instead of having to specify a custom property by < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > string < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > -keyed-jdbc-store < /span > < span style= color : gray ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > name < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > = < /span > < span style= color : blue ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > jdbc-store < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : gray ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > datasource < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > = < /span > < span style= color : blue ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > java : jboss/datasources/JdbcDS < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ... & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > property < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : gray ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > name < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > = < /span > < span style= color : blue ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > databaseType < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & gt ; $ { database.type } & lt ; / < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > property < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ... < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; / < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > string < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > -keyed-jdbc-store & gt ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > This will also result in different way of configuring ISPN in embedded mode : .addStore ( JdbcBinaryStoreConfigurationBuilder.class ) .table ( ) .databaseType ( .... ) - & gt ; .addStore ( JdbcBinaryStoreConfigurationBuilder.class ) ) .dialect ( ... ) < /p > < p > We need to import infinispan inside a OSGI repository . Tests are made with Felix. < /p > < p > I added the configuration to use infinispan inside a osgi repository . We need to ignore all listed dependencies . With this configuration we can install infinispan-core.jar inside OSGI . Its achievement will be as a base installation here : < a href= https : //github.com/flashboss/infinispan class= external-link rel= nofollow > https : //github.com/flashboss/infinispan < /a > < /p > < p > I added the Import-Package because you are forced to put manually in Felix all dependencies as jgroups , jboss marshalling , jcip , all apache commons . I ve seen infinispan core working by default without all those libraries , so I think the same achievement should be replicated in OSGI. < /p > < p > Inside the Import-Package tag I excluded those libraries so Infinispan core can be started in default mode without errors . If we want use the replication in OSGI , it is enough add manually the other packages ( jgroups.jar etc etc ) < /p > < p > Actually the core bundle can be installed . But to be used it needs theese projects be installed as osgi bundles : < /p > < p > jboss transaction api 1.0.1.GA < br/ > We patched it . There is a new OSGI version here : < a href= https : //repository.jboss.org/nexus/content/groups/public/org/jboss/spec/javax/transaction/jboss-transaction-api_1.1_spec/1.0.1.Beta1/ class= external-link rel= nofollow > https : //repository.jboss.org/nexus/content/groups/public/org/jboss/spec/javax/transaction/jboss-transaction-api_1.1_spec/1.0.1.Beta1/ < /a > ) < /p > < p > jgroups 2.10.1.GA < br/ > ( it s a osgi bundle since the 3.x version ) < /p > < p > river 1.2.3.GA < br/ > ( opened an issue for marshalling 1.4.0 in < a href= https : //issues.jboss.org/browse/JBMAR-118 title= jboss marshalling in OSGI class= issue-link data-issue-key= JBMAR-118 > < del > JBMAR-118 < /del > < /a > and < a href= https : //github.com/flashboss/jboss-marshalling/blob/master/river/pom.xml class= external-link rel= nofollow > https : //github.com/flashboss/jboss-marshalling/blob/master/river/pom.xml < /a > ) < /p > < p > marshalling-api 1.2.3.GA < br/ > ( opened an issue for marshalling 1.4.0 in < a href= https : //issues.jboss.org/browse/JBMAR-118 title= jboss marshalling in OSGI class= issue-link data-issue-key= JBMAR-118 > < del > JBMAR-118 < /del > < /a > and < a href= https : //github.com/flashboss/jboss-marshalling/blob/master/api/pom.xml class= external-link rel= nofollow > https : //github.com/flashboss/jboss-marshalling/blob/master/api/pom.xml < /a > ) < /p > < p > jboss logging spi 2.0.5.GA < br/ > ( added a jira issue in < a href= https : //issues.jboss.org/browse/JBLOGGING-51 title= jboss-logging-spi in OSGI class= issue-link data-issue-key= JBLOGGING-51 > < del > JBLOGGING-51 < /del > < /a > . It could be fixed in the 2.2.0.CR2 version . Fixed in the 3.x version ) < /p > < p > rhq plugin annotations 1.4.0.B01 < br/ > ( opened a feature request in < a href= https : //bugzilla.redhat.com/show_bug.cgi ? id=657754 class= external-link rel= nofollow > https : //bugzilla.redhat.com/show_bug.cgi ? id=657754 < /a > ) < /p > < p > i18nlog 1.0.9 < br/ > ( sent a patch in < a href= https : //sourceforge.net/projects/i18nlog class= external-link rel= nofollow > https : //sourceforge.net/projects/i18nlog < /a > . It could become a OSGI bundle in the 1.0.10 version . Waiting for a response . Fixed in 1.15 ) < /p > < p > log4j 1.2.16 < br/ > ( that s ok ... it is a osgi bundle < img class= emoticon src= https : //issues.jboss.org/images/icons/emoticons/wink.png height= 16 width= 16 align= absmiddle alt= border= 0 / > ) < /p > < p > jcip-annotations 1.0 < br/ > ( I sent a patch via email to brian @ briangoetz.com and a post in < a href= http : //tembrel.blogspot.com class= external-link rel= nofollow > http : //tembrel.blogspot.com < /a > . Sent the patch in concurrency-interest @ cs.oswego.edu too . They responded to me . There is a OSGI version with a different artifact name . I changed the dependency in the pom.xml of the parent project ) < /p > < p > We should make sure proper Import-Package property is specified in the MANIFEST.MF so that : < /p > < p > 1- it fails to load obviously when there s any missing bundles that are essential in using the very core functionality of Infinispan. < br/ > 2 - it does not fail due to the dependency that is not really essential. < /p > 
[ ISPN-1000 ] PUSH based rehashing < p > Current rehash schemes are based on a PULL of state . Joiners ( and new owners after a leave ) pull state from their neighbours . This JIRA is to reimplement this as a PUSH based scheme , where all nodes detect new joiners ( or leavers ) and analyse their internal state and determine what needs to be pushed where. < /p > < p > The scheme should be more robust , involving far fewer RPCs and coordination , and would work better for merge views detected when partitions heal. < /p > < p > Based on Bela s prototype on < a href= https : //github.com/belaban/infinispan/tree/rebalance-changes class= external-link rel= nofollow > https : //github.com/belaban/infinispan/tree/rebalance-changes < /a > < /p > 
[ ISPN-3950 ] Deploy user-code to Infinispan server [ ISPN-5131 ] Deploy custom cache store to Infinispan Server < p > Infinispan Server should allow deploying JARs which follow the standard Java service provider API. < br/ > Support : groupers , listeners , map/reduce jobs , distexec jobs , interceptors , JPA entities , etc < /p > < h2 > < a name= Overview > < /a > Overview < /h2 > < p > Support the deployment and configuration of a custom cache store. < /p > < h2 > < a name= ClientPerspective > < /a > Client Perspective < /h2 > < p > The client will be able to deploy a custom Cache Store jar into Hotrod server ( put it into $ HOTROD_SERVER/standalone/deployments ) . The jar will need to contain one of the following service entries : < /p > < ul > < li > /META-INF/services/org.infinispan.persistence.spi.AdvancedCacheWriter < /li > < li > /META-INF/services/org.infinispan.persistence.spi.AdvancedCacheLoader < /li > < li > /META-INF/services/org.infinispan.persistence.spi.CacheLoader < /li > < li > /META-INF/services/org.infinispan.persistence.spi.CacheWriter < /li > < li > /META-INF/services/org.infinispan.persistence.spi.ExternalStore < /li > < li > /META-INF/services/org.infinispan.persistence.spi.AdvancedLoadWriteStore < br/ > Those services might used later used in the configuration. < /li > < /ul > < h2 > < a name= Implementationoverview > < /a > Implementation overview < /h2 > < p > Refer to the < a href= https : //github.com/infinispan/infinispan/wiki/Custom-Cache-stores- ( deployable ) class= external-link rel= nofollow > Implementation details on Wiki page < /a > < /p > 
[ ISPN-1759 ] Throw an exception when using < hash > or < l1 > while configured in replicated , invalidated or local mode . < p > Makes for more sane configurations. < /p > 
[ ISPN-712 ] GET and HEAD requests on non-existent caches or keys should return a 404 error rather than a 500 error < p > To be closer in line with REST standards < /p > 
[ ISPN-658 ] Asymmetric clusters should be supported < p > Note that this would affect both distributed and replicated cache modes. < /p > < p > Currently clusters are always symmetric . E.g. , assume 5 nodes , N1 ~ N5 . Infinispan assumes that each node has the same set of named caches ( e.g. , C1 ~ C5 ) deployed on each node , and is designed accordingly . This causes problems for applications where caches are defined and started lazily on each node . For example : < /p > < p > Considering a cache manager with 2 caches in DIST mode ( C1 and C2 ) deployed on 2 nodes ( N1 and N2 ) . < br/ > Currently , the DistributionManager does not properly handle the following scenarios : < br/ > 1 . Stop C1 on N1 . This ought to trigger a rehash for the C1 cache . Currently , rehashing is only triggered via view change . Failure to rehash on stopping of a cache can inadvertently cause data loss , if all backups of a given cache entry have stopped. < br/ > 2 . A new DIST mode cache , C3 , is started on N2 . If N1 is the coordinator , the join request sent to N1 will get stuck in an infinite loop , since the cache manager on N1 does not contain a C3 cache. < br/ > 3 . Less critically , a new node , N3 is started . It does not yet have a C1 or C2 cache , though it s cache manager is started . This prematurely triggers a rehash of C1 and C2 , even though there are no new caches instances to consider. < /p > < p > To solve this , one proposal would involve : < /p > < p > 1 . Providing a named cache coordinator for each distributed named cache , which would coordinate rehashes . This may or may not be the JGroups coordinator , and named caches may or may not share the same named cache coordinator. < br/ > 2 . The DistManager would maintain a list of available members , which would be a subset of all of the members available in the RpcManager. < br/ > 3 . A concept of a LEAVE message , broadcast when a cache stops . This would serve the same effect as a view change with a member removed , with the exception of affecting only a single named cache. < /p > < p > With the above 3 in place , a proper solution could be devised to handle asymmetric distributed clusters. < /p > 
[ ISPN-3926 ] The Internal Cache Registry needs to be persistent < p > Several improvements suggested by Sanne : < /p > < ul class= alternate type= square > < li > protobuf schemas should be persisted , hotrod topology info and security cache should not < /li > < li > also for security I want to set lifetime properties < /li > < /ul > 
[ ISPN-1453 ] Infinispan CLI < p > Infinispan needs an official CLI tool with the following features : < /p > < ul class= alternate type= square > < li > simple CRUD operations ( get , put , delete ) < /li > < li > queries ( if the cache is indexed ) < /li > < li > administrative tasks ( eg . invoking JMX commands ) < /li > < /ul > < p > Optional cool things : < /p > < ul class= alternate type= square > < li > run map/reduce scripts ? ? ? < /li > < li > import/export to/from XML/CSV ? ? ? < /li > < /ul > 
[ ISPN-993 ] Help to prevent deadlocks by making the lock id accessible through the public API < p > To prevent deadlocks when we use ISPN with transactions , we need to sort the keys before calling a method that acquires a lock such as cache.put and cache.remove . For example when we don t use the lock striping ( i.e . we use one lock per key ) , the following use case will create a deadlock : < /p > < p > Thread # 1 does : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > tm.begin ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // We acquire the lock on A < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.put ( A , A ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // We acquire the lock on B < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.put ( B , B ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // Here all the acquired locks will be released < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > tm.commit ( ) ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > Thread # 2 does : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > tm.begin ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // We acquire the lock on B < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.put ( B , B ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // We acquire the lock on A < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.put ( A , A ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // Here all the acquired locks will be released < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > tm.commit ( ) ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > To prevent this deadlock we can simply sort the keys within the Tx such that the lock acquisition is done in the same order . Unfortunately when we use lock striping even when we sort the keys we can face deadlocks because we can not predict how the locks are distributed over the keys . For example the following test case creates a deadlock when the lock striping is enabled. < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public class TestDeadlock extends TestCase < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > / * * < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * We get an unpredictable deadlock because apart if we know the implementation < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * of the ReentrantStripedLockContainer , we can not know that the keys < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * 8 * a and 13 * a are mapped to the same lock and 11 * a and 14 * a are < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * both mapped to the same lock that is different from the first one. < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * In the use case below the keys are sorted but we still get a deadlock < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * / < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public void testUseLockStripingTrueUnpredictableDeadLock ( ) throws Exception < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > DefaultCacheManager manager = new DefaultCacheManager ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > manager.getDefaultConfiguration ( ) .setInvocationBatchingEnabled ( true ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > manager.getDefaultConfiguration ( ) .setLockAcquisitionTimeout ( 1000 ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > final Cache & lt ; String , String & gt ; cache = manager.getCache ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > final CountDownLatch startSignal = new CountDownLatch ( 1 ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > final CountDownLatch endSignal = new CountDownLatch ( 2 ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > final AtomicReference & lt ; Exception & gt ; exception = new AtomicReference & lt ; Exception & gt ; ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > new Thread ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > / * * < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * @ see java.lang.Thread # run ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * / < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > @ Override < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public void run ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > try < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.startBatch ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > startSignal.await ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // 8 * a < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.put ( aaaaaaaa , Value ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // 14 * a < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.put ( aaaaaaaaaaaaaa , Value ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.endBatch ( true ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > catch ( Exception e ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > exception.set ( e ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > finally < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > endSignal.countDown ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } .start ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > new Thread ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > / * * < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * @ see java.lang.Thread # run ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > * / < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > @ Override < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public void run ( ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > try < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.startBatch ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > startSignal.await ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // 11 * a < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.put ( aaaaaaaaaaa , Value2 ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // 13 * a < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.put ( aaaaaaaaaaaaa , Value2 ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > cache.endBatch ( true ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > catch ( Exception e ) < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > exception.set ( e ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > finally < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > endSignal.countDown ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } .start ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > startSignal.countDown ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > endSignal.await ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > assertNull ( exception.get ( ) ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > If we could get the lock id thanks to the public API , we could sort our keys according to this value and then avoid the deadlocks even when the lock striping is enabled. < /p > 
[ ISPN-4983 ] Public API for tracking completion of Infinispan work for a given user transaction < p > When using Infinispan with user transactions , Infinispan will persist the changes to the cache store using a synchronization on the user transaction . This means the persistence operation begins when the user transaction has committed . However , components using Infinispan will likely want to know when Infinispan s work has completed for a given transaction. < /p > < p > In Infinispan 6 , it was possible to do this by registering a transaction listener : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > org.infinispan.Cache cache = ... < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > javax.transaction.Transaction activeTransaction = ... < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > org.infinispan.transaction.TransactionTable txnTable = cache.getAdvancedCache ( ) .getComponentRegistry ( ) .getComponent ( TransactionTable.class ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > org.infinispan.transaction.xa.GlobalTransaction ispnTxID = txnTable.getLocalTransaction ( activeTransaction ) .getGlobalTransaction ( ) ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > We d then use the < tt > GlobalTransaction < /tt > in our < tt > @ Listener < /tt > : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > @ Listener < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > class TxnListener { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > @ TransactionCompleted < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public void transactionCompleted ( TransactionCompletedEvent event ) { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > if ( ! event.isOriginLocal ( ) ) return ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > GlobalTransaction eventIspnTransaction = event.getGlobalTransaction ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > if ( eventIspnTransaction == null || < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > ispnTxID.getId ( ) ! = eventIspnTransaction.getId ( ) ) return ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > if ( ! event.isSuccessful ( ) ) { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // do stuff < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } else { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > // do other stuff < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > } < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > However , this is no longer possible in Infinispan 7 since these classes were moved to an impl package. < /p > < p > Can we please have a public API to be notified when Infinispan has complete its work for a specific user transaction ? It doesn t have to be like it was in 6 , but ModeShape needs something ( see < a href= https : //issues.jboss.org/browse/MODE-2353 title= Concurrently creating child nodes for the same parent results in node loss when using Wildfly class= issue-link data-issue-key= MODE-2353 > < del > MODE-2353 < /del > < /a > for details ) . < /p > 
[ ISPN-2420 ] Increment the topology id when a node leaves the cache < p > We currently increment the topology id only when we rebalance the consistent hash ( i.e . we add new owners ) . This allows us to to do some optimizations after a leave , like not forwarding commands ( because there are no new owners ) . < /p > < p > Unfortunately , it is not very intuitive , because it doesn t match how JGroups works , so it can cause bugs like < a href= https : //issues.jboss.org/browse/ISPN-2417 title= Topology check in LocalTransaction.getCommitNodes ( ) is wrong class= issue-link data-issue-key= ISPN-2417 > < del > ISPN-2417 < /del > < /a > . < /p > < p > Additionally , it turns out there are many places where we care that a node left , so the code is more complex to handle this ( e.g . TransactionTable.useStrictTopologyIdComparison ( ) ) , or it is more slow for the common case when there is no leaver ( e.g . LocalTransaction.getCommitNodes ( ) ) . < /p > 
[ ISPN-6214 ] Add configuration for initial number of nodes < p > It should be possible to specifiy a minimum number of nodes that need to belong to a cluster before the transport is considered started . < /p > 
[ ISPN-1367 ] Make JBoss Marshalling class resolver configurable < p > JBoss Marshalling s class resolver should be configurable in order to enable the following use case and to help with classloading in a modular environment : < /p > < p > In an environment such as JBoss AS , where there is some sort of consistent identification of deployments across nodes ( i.e . a deployment id ) this SPI can be used to attach the deployment id to the serialized data , and then on deserialization used to locate the correct classloader to use < /p > 
[ ISPN-1967 ] Expose CacheView string via JMX < p > The JGroups view and CacheView differs and this causes trouble finding out what state the CacheView is in during elasticity/reslience tests. < /p > < p > My test controller is driven by JGroups view , there was this particular case where this lead to test failure , or better said wrongly controlled test. < /p > < p > After node0002 was killed in view 7 : < br/ > < a href= http : //www.qa.jboss.com/~mlinhard/hyperion/run53-elas-dist-basic/table.html class= external-link rel= nofollow > http : //www.qa.jboss.com/~mlinhard/hyperion/run53-elas-dist-basic/table.html < /a > < /p > < p > the controller saw JGroups view : < span class= error > & # 91 ; node0003/default|5 & # 93 ; < /span > < span class= error > & # 91 ; node0003/default , node0004/default & # 93 ; < /span > < br/ > which maybe existed in JGroups layer but never in Infinispan - in infinispan there was partition < /p > { node0003 } < p > + < /p > { node0004 } < p > and therefore it went on with the test which lead to errors , among others < a href= https : //issues.jboss.org/browse/ISPN-1965 title= Some entries not available during view change class= issue-link data-issue-key= ISPN-1965 > < del > ISPN-1965 < /del > < /a > , might be caused by this. < /p > 
[ ISPN-986 ] Dynamic Externalizer discovery < p > Look into how JBMAR sends Externalizers can be sent via the wire so that receiving side does not need to know about Externalizers in advance. < /p > 
[ ISPN-730 ] A DefaultSharedExecutorFactory is needed < p > ... which uses a common executor for all caches in a cache manager . This should be the default executor factory used , to prevent multiple eviction threads , etc. , one for each cache in a cache manager. < /p > 
[ ISPN-4357 ] Use a specific cache for managing protofiles < p > Portofile defining schema should be held in a separate cache . This would allow users to manage schema from a hotrod client . Security should be considered as well. < /p > 
[ ISPN-449 ] Streaming over Hot Rod < p > Extend large object support/streaming to Hot Rod < /p > 
[ ISPN-312 ] Ability to group data entries < p > This is a spin-off from < a href= http : //lists.jboss.org/pipermail/infinispan-dev/2009-December/001968.html class= external-link rel= nofollow > http : //lists.jboss.org/pipermail/infinispan-dev/2009-December/001968.html < /a > . < /p > < p > The requested feature would allow distinct entries to be assigned to custom arbitrary groups . Later in time those groups could be flushed on demand without any knowledge of entry keys. < /p > < p > This feature exists in other open source cache library , see : < a href= http : //www.opensymphony.com/oscache/api/com/opensymphony/oscache/base/Cache.html class= external-link rel= nofollow > http : //www.opensymphony.com/oscache/api/com/opensymphony/oscache/base/Cache.html < /a > < /p > 
[ ISPN-5816 ] Implement an event logger for server < p > Create an event logger so that the management interface can show events : < /p > < ul class= alternate type= square > < li > 7 day retention < /li > < li > Task execution < /li > < li > Cluster events ( node join/leave , split/merge , rebalance start/stop , mass-indexer start/stop , server shutdown/start , remote site up/down ) < /li > < li > Cache events ( start , stop ) < /li > < li > Security audit < /li > < /ul > 
[ ISPN-694 ] Create expiration notification for in-memory cache entries < p > Create a CacheEntryExpired notification and make EvictionManager send this notification when a cache entry is evicted because it is expired. < br/ > Also mage sure the cache entry value is sent over in the event. < /p > < p > CacheEntryEvicted notification should also send the entry value in the event. < /p > 
[ ISPN-384 ] Implement topology headers in Hot Rod < p > Implement Topology-Aware Client Topology Change headers as per : < a href= http : //community.jboss.org/docs/DOC-14421 class= external-link rel= nofollow > http : //community.jboss.org/docs/DOC-14421 < /a > < /p > 
[ ISPN-4825 ] Add JMX/DMR operation to change the availability mode of the partition < p > The administrator should be able to bring the cluster back to available mode if the cache entered degraded mode after successive node crashes. < /p > 
[ ISPN-1397 ] Optimise thread local usage in Infinispan [ ISPN-1205 ] Redesign marshallers to be per named cache instance , per thread < p > Three separate areas to consider : < /p > < p > 1 . Remove ThreadLocal usage in OwnableReentrantLock < br/ > 2 . Remove ThreadLocal usage in InvocationContextContainer < br/ > 3 . Remove ThreadLocal usage in Flags API < /p > < p > Look for any other ThreadLocal usage with a critical eye. < /p > < p > Since we have switched to explicit classloaders in Infinispan 5.0 , we can now pass the correct classloader to use into JBoss Marshalling , rather than rely on the TCCL . However at the moment marshallers are per thread , not per named cache instance . We will need to change the way marshallers are created to make a marshaller per-thread-per-named-cache-instance . This will also require investigation of the best way of propagating this through the DI system . Dan has previously suggested using the InvocationContext < /p > 
[ ISPN-4222 ] Add support for distributed entry iterator < p > < a href= https : //issues.jboss.org/browse/ISPN-4068 title= Add support for IncludeCurrentState to listeners class= issue-link data-issue-key= ISPN-4068 > < del > ISPN-4068 < /del > < /a > requires the need of being able to iterate over all entries found in the cache , irrespective of it is a distributed cache and with or without a loader/store . This jira is to cover adding that support. < /p > 
[ ISPN-44 ] Integrate JBoss Marshalling < p > The current magic number based marshalling framework works well , but the impl is clunky and unreadable , and hard to unit test. < /p > < p > Consider XNIO libs where marshallers can be defined for specific types , and consider using this instead. < /p > 
[ ISPN-30 ] DIST - distributed cache < ul class= alternate type= square > < li > Detailed designs should be on a wiki somewhere for review < /li > < li > Consistent hash algo should be pluggable < /li > < li > A new cache mode ( d or distributed , in addition to r , replicated , i , invalidated ) < /li > < li > Should include code for rebalancing < /li > < li > A front-end L1 cache for fast reads < /li > < li > Multicast invalidation to flush L1 s < /li > < /ul > 
[ ISPN-353 ] Add a single shell script to handle cache server startup < p > Rather than having separate startup scripts for memcached and hotrod , a single script should be used , which would take in a protocol parameter to determine which server module to start. < /p > < p > From my email to infinispan-dev : < /p > < p > I notice you have a memcached.sh script to start the memcached server . I believe this should be something like startServer.sh , given that we are not actually starting memcached ? < img class= emoticon src= https : //issues.jboss.org/images/icons/emoticons/wink.png height= 16 width= 16 align= absmiddle alt= border= 0 / > < /p > < p > And perhaps the script could be reused for HotRod as well ... passing in a flag to specify which protocol to speak , perhaps something like : < /p > < p > $ startServer.sh -p memcached < /p > < p > or < /p > < p > $ startServer.sh -p hotrod < /p > < p > Perhaps org.infinispan.server.memcached.Main could be in the server/core module instead , and based on the protocol flag passed in , kick start the appropriate server ? WDYT ? < /p > 
[ ISPN-1884 ] Expose JMX statistics from Hibernate Search < p > it is possible to add jmx hook to obtain Hibernate Search SearchFactory Statistics by using this property : < br/ > & lt ; indexing enabled= true indexLocalOnly= true & gt ; < br/ > & lt ; properties & gt ; < br/ > & lt ; property name= hibernate.search.jmx_enabled value= true / & gt ; < br/ > & lt ; /properties & gt ; < br/ > & lt ; /indexing & gt ; < /p > < p > tough this property does not allow multiple registration ( one registration per cache ) . < br/ > it would be nice to wrap the Statistics object from HibernateSearch into the actual cache object mbean. < /p > < p > i guess the implementation could look like this : < br/ > // get search factory statistics < br/ > org.hibernate.search.stat.Statistics statistics = Search.getSearchManager ( org.infinispan.Cache ) .getSearchFactory ( ) .getStatistics ( ) ; < br/ > // wrap search factory statistics < br/ > SearchFactoryStatisticMBean mbean = new SearchFactoryStatisticMBeanImpl ( statistics ) ; < br/ > // expose mbean < br/ > ManagementFactory.getPlatformMBeanServer ( ) .registerMBean ( new ObjectName ( ... ) , mbean ) ; < /p > 
[ ISPN-5465 ] Replace the Hash function with a segment mapper < p > Currently , we allow the user to customize the mapping of keys to CH segments with a custom < tt > Hash < /tt > function . But the Hash function doesn t give the user direct control over where a key is mapped , the ultimate location depends on the CH implementation . The CH implementation is also customizable , but it s much harder for the user to get right. < /p > < p > We should replace the Hash with something like this : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > interface < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > SegmentMapper { < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > public < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > int < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > getSegment ( Object key , < /span > < span style= color : # 006699 ; font-weight : bold ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > int < /span > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > numSegments ) ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > This should also be easier to implement than the < tt > Grouper < /tt > interface we have now , when the user only needs co-location and doesn t need additional grouping features like < tt > cache.getGroup ( name ) < /tt > . < /p > < p > I think this should also help internally , e.g . to replace the < tt > GroupingConsistentHash < /tt > that needs to be re-created on every topology update with a constant < tt > SegmentMapper < /tt > wrapper . It might also help to compute the segment of a key only once and save it in the context , instead of computing it every time we need to know the location of a key. < /p > 
[ ISPN-3477 ] Make storeAsBinary not keep both the object and the byte [ ] < p > more about it on this email thread : < a href= http : //infinispan.markmail.org/thread/nrua3ssqprj34ang class= external-link rel= nofollow > http : //infinispan.markmail.org/thread/nrua3ssqprj34ang < /a > < /p > < p > This also means that the Cache.compact will be dropped < /p > 
[ ISPN-5013 ] Server-side scripting using JSR-223 ( javax.script ) < p > Implement a scripting manager which stores custom scripts in a dedicated cache . These scripts will be invoked with a user-specified binding ( i.e . a set of named parameters ) . < br/ > This component should support all known code extension points : simple , tasks , distexec , map/reduce , listeners , etc. < br/ > The script type should be supported by the available JSR-223 scripting engines < /p > 
[ ISPN-2357 ] New coordinator installs old CH containing crashed members < p > After merging the round of pull requests today ( including < a href= https : //issues.jboss.org/browse/ISPN-2349 title= If the coordinator leaves while rebalancing is in progress , the new coordinator doesn & # 39 ; t finish rebalancing class= issue-link data-issue-key= ISPN-2349 > < del > ISPN-2349 < /del > < /a > ) , there still is an issue where a killed node can appear in the CH even after JGroups passes up the new view . This appears to happen when the old coordinator was killed. < /p > < p > Obviously , if the CH contains the old member , writes that map to the segments previously owned by the dead node will fail. < /p > < p > Here are ISPN trace logs . You are looking for erm-cluster. < /p > < p > < a href= http : //dl.dropbox.com/u/50401510/5.2.0.ALPHA4/relay2/10.30.12.83/server.log.gz class= external-link rel= nofollow > http : //dl.dropbox.com/u/50401510/5.2.0.ALPHA4/relay2/10.30.12.83/server.log.gz < /a > ( phl-dg1 ) < br/ > < a href= http : //dl.dropbox.com/u/50401510/5.2.0.ALPHA4/relay2/10.30.12.84/server.log.gz class= external-link rel= nofollow > http : //dl.dropbox.com/u/50401510/5.2.0.ALPHA4/relay2/10.30.12.84/server.log.gz < /a > ( phl-dg2 ) < br/ > < a href= http : //dl.dropbox.com/u/50401510/5.2.0.ALPHA4/relay2/10.30.12.83/server.log.gz class= external-link rel= nofollow > http : //dl.dropbox.com/u/50401510/5.2.0.ALPHA4/relay2/10.30.12.83/server.log.gz < /a > ( phl-dg3 , the node that was killed ) < /p > 
[ ISPN-2256 ] Cache creation is serialized < p > There is a synchronisation code in DCM which serialisez cache creation . This was added together with < a href= https : //issues.jboss.org/browse/ISPN-1051 title= Potential concurrency issues when retrieving a cache concurrently ( for the first time ) class= issue-link data-issue-key= ISPN-1051 > < del > ISPN-1051 < /del > < /a > but can be further optimised to only serialize the access to GlobalComponentRegistry which is the concurrent bit. < /p > 
[ ISPN-1005 ] Update SerializableXid.toString to clone JBossTM s Xid.toString < p > This is in order to support better integration between Infinispan s recovery support and JBossTM by making log-reading easier : XID is logged by both JBossTM and Infinispan s recovery. < /p > 
[ ISPN-1018 ] Multiple Synchronization are registered for the same transaction < p > For the same transaction a SynchronizationAdapter is registered on each transactional invocation . The enlistment code should verify that and only enlist/register a Synchronization once. < /p > 
[ ISPN-1019 ] Add @ ConfigurationDocRef for recovery and useSynchronizationForTransactions config elements < p > These are needed by the documentation generation engine. < /p > 
[ ISPN-106 ] JdbcXXXCacheStore should honor cacheName < p > Creating multiple caches from a CacheManager configured with a JdbcXXXCacheStore results in unpredicted behaviour : < br/ > After creating a CacheManger that persists its entries with a JdbcXXXCacheStore one will see strange behaviour like this : < /p > < p > Cache fooCache = cacheManager.getCache ( foo ) ; < br/ > Cache barCache = cacheManager.getCache ( bar ) ; < /p > < p > // single put : < br/ > fooCache.put ( 42 , Hello World ) ; < /p > < p > After restart : < /p > < p > fooCache.contains ( 42 ) ; // true < br/ > barCache.contains ( 42 ) ; // true ! ! ! ! < /p > < p > To circumvent this behaviour the only solution is to create one CacheStore per Cache . So one migth end up using a lot of different CacheManagers. < /p > < p > The best solution IMHO would be to add sopport for a cacheName column to TableManipulation . So different caches could share the same table. < /p > 
[ ISPN-1074 ] TransactionXaAdapter.commit with onePhase=true doesn t rollback when tx is marked rollbackOnly < p > Scenario : use eager locking with lockSingleNode=true . Start a transaction and kill a node where a lock is acquired . Then commit the transaction using JBossTM . As there s only one transaction enlisted , JBossTM optimizes the 2PC and only invokes TransactionXAAdaptr.commit with onePhase flag set to true . Right now this call results in an exception that leaves the cluster with locks being acquired . Instead of this , infinispan should rollback the transaction and throw an exception ( XA_HEURRB ? ) that would be propagated to the user as well . < /p > 
[ ISPN-20 ] check whether locking in JDBC cache stores can be replaced with SELECT FOR UPDATE < p > Not sure whether the outside locking ( MVCC ) can t be used so that we won t need locking code within cache stores < /p > 
[ ISPN-1075 ] Configuration.getName does not work for programmatically defined caches < p > String aName = aName ; < br/ > Configuration configuration = cacheManager.defineConfiguration ( aName , configurationOverride ) ; < br/ > Cache c = cacheManager.getCache ( aName ) ; < br/ > assertEquals ( c.getConfiguration ( ) .getName ( ) , aName ) ; // this fails ! ! < /p > 
[ ISPN-1080 ] Investigate and document XA recovery integration with JBossTS < p > Reading the JBossTS recovery documentation < span class= error > & # 91 ; 1 & # 93 ; < /span > , the recovery process should be able to pull recovery info from ISPN s XAResource implementation by calling .recover ( ) . The issue is that this method needs to be called in the same process where ISPN node leaves and ATM its not possible to invoke it from a different process. < /p > < p > This documentation would also be useful for users that want to set up/play with transaction recovery in general. < /p > < p > < span class= error > & # 91 ; 1 & # 93 ; < /span > < a href= http : //docs.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/4.3/html-single/JBoss_Transactions_Failure_Recovery_Guide/index.html class= external-link rel= nofollow > http : //docs.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/4.3/html-single/JBoss_Transactions_Failure_Recovery_Guide/index.html < /a > < /p > 
[ ISPN-1158 ] Passivation without Eviction is an invalid configuration and should log a warning < p > It needs to be verified whether Passivation without eviction does make sense. < br/ > We should display warning that this is not a good configuration if not. < br/ > cache store probably won t get used at all in that case. < /p > 
[ ISPN-118 ] expose CacheManager to be accessible as an MBean < p > < span class= error > & # 91 ; Galder & # 93 ; < /span > < br/ > & gt ; & gt ; & gt ; Couple methods , discussed in more detail at < a href= http : //tinyurl.com/lq688t class= external-link rel= nofollow > http : //tinyurl.com/lq688t < /a > section 11.2 < br/ > & gt ; & gt ; & gt ; < br/ > & gt ; & gt ; & gt ; 1 ) Use the CacheManager to create your cache ; the CacheManager is available in JNDI at java : /CacheManager . See Section 11.2.1. < br/ > & gt ; & gt ; & gt ; < br/ > & gt ; & gt ; & gt ; 2 ) Use CacheJmxWrapperMBean and it s cache mbean attribute . Simplest way is to deploy it via a -service.xml . Section 5.4.2 of JBC 3.1 docs at < a href= http : //tinyurl.com/m49qen class= external-link rel= nofollow > http : //tinyurl.com/m49qen < /a > has other methods. < br/ > & gt ; < /p > 
[ ISPN-1198 ] Cache entrySet , keySet and values operations ignoring expired entries < p > Cache s entrySet/keySet/values implementations do not take into account that entries might have expired , so the collections returned might contain key/value pairs that should be removed. < /p > < p > This has the side effect of getBulk remote cache operation returning entries even after their lifespan ends . From Martin : < /p > < blockquote > < p > This is related to a getBulk operation on an Infinispan HotRod client. < /p > < p > Simple test snippet that fails ATM : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Map & lt ; String , String & gt ; mapIn = new HashMap & lt ; String , String & gt ; ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > Map & lt ; String , String & gt ; mapOut = new HashMap & lt ; String , String & gt ; ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > mapOut.put ( aKey , aValue ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > mapOut.put ( bKey , bValue ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > remoteCache.putAll ( mapOut , lifespanInSecs , TimeUnit.SECONDS ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > sleepForSecs ( lifespanInSecs ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > mapIn = remoteCache.getBulk ( ) ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > assertTrue ( mapIn.size ( ) == 0 ) ; //fails , entries are still there < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > However , when I call remoteCache.get ( & lt ; key & gt ; ) ; for all the keys and then getBulk , the getBulk return empty map. < /p > < p > So it seems the get operations cause the entries to be removed from the cache . Please implement this also for getBulk operation or reject it with an explanation. < /p > < /blockquote > 
[ ISPN-1276 ] warn when using indexing but query module isn t present on classpath < p > It is possible to use indexing in the config xml : < /p > < p/ > < div id= syntaxplugin class= syntaxplugin style= border : 1px dashed # bbb ; border-radius : 5px ! important ; overflow : auto ; max-height : 30em ; > < table cellspacing= 0 cellpadding= 0 border= 0 width= 100 % style= font-size : 1em ; line-height : 1.4em ! important ; font-weight : normal ; font-style : normal ; color : black ; > < tbody > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-top : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; infinispan & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; default & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; invocationBatching enabled= true / & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; indexing enabled= true indexLocalOnly= true & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; properties & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; property name= hibernate.search.default.directory_provider value= ram / & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; /properties & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; /indexing & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; /default & gt ; < /span > < /pre > < /td > < /tr > < tr id= syntaxplugin_code_and_gutter > < td style= line-height : 1.4em ! important ; padding : 0em ; vertical-align : top ; > < pre style= font-size : 1em ; margin : 0 10px ; margin-bottom : 10px ; width : auto ; padding : 0 ; > < span style= color : black ; font-family : Consolas , Bitstream Vera Sans Mono , Courier New , Courier , monospace ! important ; > & lt ; /infinispan & gt ; < /span > < /pre > < /td > < /tr > < /tbody > < /table > < /div > < p/ > < p > but without query module + it s dependencies on the classpath. < /p > < p > I d expect to be warned in such case ... < /p > < p > what happens is that LocalQueryInterceptor isn t added to the interceptor chain and indexing is not used , nothing is reported ... < /p > 
[ ISPN-1331 ] Log something about auto discovered modules and extensions < p > It seems that when looking in the classpath for instances of < em > infinispan-module.properties < /em > files , nothing is logged . No idea why it s not loading an extension. < /p > < p > Also specific modules should log their registration happening : < br/ > < em > org.infinispan.tree.LifecycleCallbacks < /em > should mention that it s being enabled. < /p > < p > ( when registration of such a module doesn t happen , people experience misleading errors ) < /p > 
[ ISPN-134 ] Update ManagedAttribute annotations to expose more information for use by JOPR < p > Details are in the mail list thread. < /p > 
[ ISPN-1342 ] Support for Near-Cache Pattern < p > Please create some support for near-cache pattern for distributed cache . Some detailed description could be found in Oracle Coherence documentation < a href= http : //download.oracle.com/docs/cd/E13924_01/coh.340/e13819/nearcache.htm class= external-link rel= nofollow > http : //download.oracle.com/docs/cd/E13924_01/coh.340/e13819/nearcache.htm < /a > or in Cameron Purdy presentation < a href= http : //frech.info/themen/CameronPurdy-DistributedCachingEssentialLessons.pdf class= external-link rel= nofollow > http : //frech.info/themen/CameronPurdy-DistributedCachingEssentialLessons.pdf < /a > < /p > < p > It is based on combination of L1 caching in local JVM of application with combination of L2 cache based on distributed cache cluster on other servers . I tried to implement this myself , but HotRod does not support Client-side listeners ( The UnsupportedOperationException is thrown ) . It could be cool , if I could register some kind of eviction listener on client side and use it for invalidation of records in local cache based on event from remote distributed cache ( L2 ) . < /p > < p > Some kind of workaround was described in < a href= http : //community.jboss.org/thread/166993 class= external-link rel= nofollow > http : //community.jboss.org/thread/166993 < /a > : We don t have L1s yet , but you could implement Cache Listeners on the server side and use JMS to notify your clients and build an L1 that way . < /p > < p > Thanks for so great cache like infinispan is . < /p > 
