Add support queries using EntryRetriever p current search implementation requires indexes fields referenced queries p Need able query also fields potential implementation
config schema clustering mode validate format string p currently schema clustering mode says string mode decided first letter string means garbage starting correct letter may lead use specific mode p lasjadgadfg gt local rhdbhgh gt replication dfghbmjfgh gt distribution IlkHhdf gt invalidation p forcing documented values distribution set mode either dist distribution replication use either r repl replication Finally invalidation inv invalidation LOCAL
JMX information exposed p folks want see exposed via JMX JOPR Please add comments would like
methods provide feedback p Problem new ErrorInducingInterceptor NonTransactionalLockingInterceptor exist chain method return silently without informing user succeed API p Suggested solution throw exception inform user attempt correct
Log version information p running unit tests system uses log filled following messages div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important INFO ISPN000128 version Brahma p looks like may logged time cache manager instantiated would really nice done perhaps static initializer one classes would likely mean little change production
CacheManager allow retrieving Configuration instances defining configurations based existing config p Enhance CacheManager API define configurations based named caches default one also way retrieve Configuration instances CacheManager without starting cache p redefine defineCache methods p Configuration defineConfiguration String configurationName Configuration overrides registers names NEW configuration based default cfg overrides passed p Configuration defineConfiguration String configurationName String templateName Configuration overrides registers names NEW configuration based existing predefined configuration overrides passed
Refactor distribution interceptor p DistributionInterceptor looks unnecessary complex adding functionality top https Optimisation reduce number RPCs L1 enabled default del refactored ul alternate square li extract L1 logic different interceptor li would require moving StateTransferLock logic another interceptor well li separation tx caches extract remaining logic TransactionalDistributionInterceptor NonTransactional
InvocationContext keep entries BidirectionalLinkedHashMap p moment InvocationContext keeps looked entries BidirectionalLinkedHashMap uses BidirectionalLinkedHashMap order commit entries reversed order added context inherited feature JBossCache made sense due cache tree structure make sense though adds unnecessary burden InvocationContext problem particularly performance costly case caches operations need single entry lookup held invocation
Implement REPLICATED mode degenerated DISTRIBUTED mode nowOwners p already done case state transfer distribution state transfer code reused replicated caches p main reason behind improvement code Also additional benefits ul alternate square li ATM replicated mode JGroups coordinator always plays role main lock owner coordinator might get overwhelmed process additional TxCompletionNotificationCommand every transaction direct consequence main lock owner OTOH distributed mode lock owner spread cluster p optimisation REPL mode use multicasting UDP message
Remove log verbosity cache shutdown p cache shuts transaction table recalculates minViewId value based new topology whole cluster shuts though thread recalculates might throw exception expected internal components RPC example responding anymore causes lot log noise logs removed WARN span error 91 jta 93 Transaction Reaper Worker 0 ARJUNA16045 attempted rollback lt ffffac11fa3e a055 ffffac11fa3e a056 eis name gt TransactionXaAdapter lt ffffac11fa3e a055 ffffac11fa3e a056 eis name gt p LocalTransaction lt ac BasicAction 0 ffffac11fa3e a055 status gt p 2947 failed exception code cache stopped invocations allowed
Allow configuration Hot Rod client connection timeout p Currently possible specify socket timeout applies reading
Add ops TransactionManagerLookup p Add following two methods Configuration order enable injection transaction manager lookup instances parameters must passed hence instantiation via reflection work p public void setTransactionManagerLookup TransactionManagerLookup transactionManagerLookup public TransactionManagerLookup getTransactionManagerLookup
Immutables optimised set implementations p Unknown set types go lot scanning often involving reflection simple copy constructor used include commonly used p ConcurrentHashMap KeySet ConcurrentHashMap EntrySet FastCopyHashMap KeySet FastCopyHashMap EntrySet Collections EmptySet Collections SingletonSet Collections EmptyList Collections SingletonList Collections EmptyMap Collections SingletonMap p treated accordingly avoid reflection
Add combiner function MapReduce p Add functionality optionally use combiner Map Reduce phases see http nofollow http part Combiner Function enables adjust API less restrictive function could consume return different types
Add String p Currently EmbeddedCacheManager provides mechanism retrieve defined cache configuration without starting corresponding Formerly one could achieve via defineConfiguration String Configuration method passing empty Configuration object however work new configuration API returned object always equivalent one passed
Add variant new configuration API p current method returns deprecated object currently method return object cache manager
Use SingleKeyNonTxInvocationContext possible p CPU memory performance improvement SingleKeyNonTxInvocationContext used cases know single key accessed command places evict putForExternalRead context still
Replace bounded hash map alternative p Recently looking replacing bounded concurrent hash map something like Caffeine also need get rid equivalence
Use Synchronization enlistment rather XAResource BatchModeTransactionManager p XAResource enlistment less efficient enlistment BatchModeTransactionManager built top DummyTransactionManager support recovery point using XAResource enlistment
Add javadoc xsd doc custom interceptors p missing old config missing
missing javadoc xsddoc p missing UnsafeConfiguration UnsafeConfigurationBuilder xml xsd
CacheManager expose list cache names p Useful helper method
Make connection refused exceptions TRACE p proposal feel free p Default behaviour PropsKeyedObjectPoolFactory minIdle 1 timeBetweenEvictionRunsMillis 2min 2minutes idle RemoteCacheManager try ensure least one connection try create might surprise user get WARNING without anything div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 138699 WARN ISPN004008 Could connect server tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Connection refused tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Native Method tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt init gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 1600 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important p course easy change via minIdle property think strange default IMHO 0 instead p WDYT
Implement MongoDB based cache store p implementation submit
Virtual nodes enabled default p ATM default value virtualNodes 1 means node uneven small 15 nodes Increasing value even small number would significantly improve node share wheel chance well balanced data distribution cluster p suggestions email Dan lt snip gt p working test search optimal default value https nofollow https p measuring number keys node primary owner number keys one owners compared ideal distribution keys node former tells us much work node could expected latter much memory node likely p running 10000 loops max figure absolute maximum certainly bigger p full results https nofollow https p uniformity distribution goes number virtual nodes number physical nodes think go default 48 nodes 50 prefer decimal 32 nodes chance node hold ul li keys chance node primary owner p could go higher run risk node addresses colliding hash wheel According formula Birthday Paradox page http nofollow http need 2072 addresses hash wheel get chance collision means 21 nodes 96 virtual nodes 32 nodes 64 virtual nodes 43 nodes 48 virtual p lt gt
Improve writes triangle p current algorithm 4 messages network worst case happended sequentially 1 originator gt primary owner 2 primary owner gt backups 3 backups gt primary owner ack 4 primary owner gt originator reply p algorithm improved following 1 originator gt primary owner 2 primary owner gt backups amp primary owner gt originator parallel 3 backups gt originator amp backups gt primary owners acks p main flow would originator gt primary gt backups gt originator lt triangle img emoticon https 16 16 absmiddle 0
Specify node name JGroups channel p simple configuration element perhaps lt transport gt specified passed JGroups channel clearer
Lazily initialize executors scheduled executors p Unused JDK executors expensive even idle lazy initializing facade first use better
Smart L1 cache invalidation p Need build mechanism L1 invalidation multicast instead unicast em necessary specific nodes may cached given entry detected maintaining list nodes requested key via remote get would need relayed data p Benefits would performance removing unnecessary invalidation needed reducing noise network stacks
Expose cluster partition name p span error 91 93 lt pilhuhn gt get cluster partition name as7 Similar aliases span error 91 93 lt gt pilhuhn think exposing http nofollow http span error 91 93 lt gt could expose via cache manager span error 91 93 lt gt pilhuhn u add jira p as7 needs exposed within as7 management
Ability tune data container concurrency levels p See discussion http nofollow http
Make ReplicationQueueImpl configuration usable subclasses p allow subclasses access
XAResource implementation ISPN become fully stateless p needed might called even XAResource currently associated
Listen state transfer events keep indexes sync datacontainers p index shared across nodes supposed contain data owned node need keep data sync view p See also https nofollow https
Add methods specifying expiration intervals p div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important ConfigurationBuilder 60000L gt ConfigurationBuilder span color 009900 Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 60 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important SECONDS p would make interval unit
Make ClusterCacheLoader configurable via new configuration API p ClusterCacheLoader proper XML configuration element compatible API
Configuration builders parsers JDBC Cache Store p Add configuration builders parser support JDBC Cache Store
Configuration builders parsers Cassandra Cache Store p Add configuration builders parser support Cassandra Cache Store
Configuration builders parsers BDBJE Cache Store p Add configuration builders parser support BDBJE Cache Store
Configuration builders parsers JDBM Cache Store p Add configuration builders parser support JDBM Cache Store
Configuration builders parsers HBase Cache Store p Add configuration builders parser support HBase Cache Store
Configuration builders parsers Remote Cache Store p Add configuration builders parser support Remote Cache Store
Configuration builders parsers Cloud Cache Store p Add configuration builders parser support Cloud Cache Store
CacheManager needs identifiable p need CacheManager expose kind name id differenciates rest jmxDomain enough since could different machines running different VMs deploying CacheManager instances jmxDomain p reason need Jopr show different cache manager amongst resources Currently show
ConcurrentModificationException cancellation outbound state transfer p following exception thrown sender node receiving node leaves cache state transfer leave result cancellation outbound state transfers fails exception seen div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Caused tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important
Lucene LockManager use atomic operations p wrongly assigned issue reassigning Sanne
BoundedConcurrentHashMap using CHMv8 designs p better current approach terms memory footprint well performance high
invoked TopologyAffectedCommands p invoked handleDefault p mistakenly introduced fixing https Flag checks done commands context del
Exception thrown user xsite ROC failurePolicy set WARN p exhibit upgrading jgroups caused fact another site jgroups throws
Operate Query MassIndexer via JMX p MassIndexer exposed JMX expose
Transaction boundary commands forwarded state transfer p Two issues 1 invoking handleTopologyAffectedCommand internally wrongly calculates 2nd param invocation 2 logic filters commands forwarded late commands happened state transfer completed div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important pendingCh span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important null span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important amp amp cmdTopologyId lt localTopologyId span color 009900 Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 1 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important ConsistentHash writeCh tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Set lt Object gt affectedKeys getAffectedKeys ctx command tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Set lt Address gt newTargets affectedKeys tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color 008200 Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Update topology id prevent cycles tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important localTopologyId tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color blue Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Forwarding command new targets span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important command newTargets tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color 008200 Consolas Bitstream Vera Sans Mono Courier New Courier monospace important TODO find way forward command async received async tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important newTargets command span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important true span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important false span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important p
Default task failover policy enhancements p new failover policy enhancements behave differently release default random failover causes problems environment due pessimistic locks acquired default policy none p Secondly user specifies key set failover policy respect Using pessimistic locks example valid optimization would submit local data owner avoid additional RPCs random node failover policy really fit
Allow 1PCs synchronous xsite replication p allow 1PC optimization xsite synchronous replication Since synchronous replication performed originating site transactional context remote locks acquired prepare time still guarantee consistency data p default use 1PC However feature require new configuration option lt backup true gt allow traditional 2PC
Allow DistributedExecutorService control shutdown given local ExecutorService p Constructors receive thread pool clients shut stop good rule resource management creator resource thread pool us manage shutdown think solved 1 Add new Ctor besides pool also flag allow us take ownership pool destroy DistExec shutdow leave current constructor make internally invoke would preserve backward compatibility amend executor shutdown thread pool ownership document threadpool ownership constructors
Enable SPIs implement commands p Much nicer IMHO would nice SPI plug point allow applications extend set commands Let app create ExtensionCommand comes channel pass handler application p could example used instead solution currently used http nofollow http cache used notification vehicle bit hack limitations example trying implement similar solution evict key p Another use case would HTTP session ownership Brian Stansberry p 1 server time able use session failover send extension command requesting ownership actually servlet spec requirement one server time access session ejb spec properly handle basically lock distributed lock distributed lock give 1 request acquires subsequent requests server use local lock key thing operation per session unless failover
Enhance grouping API support group manipulation methods p following methods ul alternate square li getGroup goup Map lt K V gt li removeGroup groupId
Handle cluster partitions p JGroups already detects split brains issues callback cache layer needs decide idea implement canned policies restart wipe etc allow custom handlers attached p Analogous https Handle JGroups MERGE del
Support LevelDB CacheStore p Support LevelDB fast persistence pure java implementation jni fuse
Expose physical address management purpouses p Create abstraction Transport return getPhysicalAddress p RpcManagerImpl could call show via physical address information available top logical address help users debug issues
Expose global information RpcManagerImpl via CacheManager p RpcManagerImpl exposes information global caches cache manager information specific p idea would expose global information via CacheManager mbean instead address cluster members p rest stuff cache specific expose via rpc manager mbean
Verify cache used index storage defining expiry p Apparently fail fast Expiry enabled chache used store Lucene Directory think Directory implementation check fail eagerly appropriate error p https amp amp nofollow https amp amp
Revamp embedded configuration Make HotRod client always read main data owner Configure Java Hot Rod client always go main data owner requesting data p Umbrella JIRA enhancements p https Configure Java Hot Rod client always go main data owner requesting data del made java Hot Rod client always write main owner ATM client picks random owner reading though really help assuming data evenly spread amount reads would distributed uniformly across cluster OTOH forcing client always read main owner would guarantee b async replicated caches Even read consistency might still problem node crashed still much stronger guarantee makes async replication usable many p ATM HR client picks randomly node owner writes https Support concurrent updates caches del place suboptimal writes secondary owner delegates write main owner lock acquisition means additional RPC make HR client always write main data owner
Use new bundling mechanism JGroups p See Message bundling described https nofollow https makes sense remove flag entirely per https belaban Bela Ban even single sync request performance bundling enabled without bundling change validated QA performance
Integrate CloudTM extended statistics p extended statistics allows profile implemented two separated modules p first give information like example average transaction execution message sizes number operations per transaction p addition second module support called streaming technique allows check keys p made full list current implemented statistics
Implement stale lock cleanup mechanism p Similar braking stale locks JBoss Cache prevent situations p N1 starts tx acquires locks N1 prepares N2 acquires necessary locks N1 crashes p locks N2 held indefinitely resources released
implement asynchronous get method getAsync p Like async methods existing would useful natural method getAsync prefetching data immediately
Transport API change collection physical addresses returned p modify p Address getPhysicalAddress p potentially return List physical addresses might case future p List lt Address gt getPhysicalAddresses
HotRod endpoint SSL support p server endpoints able use SSL configuration
Task Management p Task Management ul alternate square li running jobs metadata type start subject caches involved status li see running jobs allow cancelling
Implement LIRS eviction policy p Need investigate implemented manner Would probably make LRU p http nofollow http
TimeService implementation p Implementation TimeService described mailling list http nofollow http p Interface found https nofollow https p Default implementation wrap p Provide also implementation p suggestions
JPA based cache store p Store uses JPA persistence
CacheLoader preload load many entries configured eviction max entries p prevent loading much memory causing OOMs well unnecessary eviction thread churn Probably would require another CacheLoader interface method loadAll int maxEntries default version method could call loadAll trim resultset size sophisticated impls could load necessary number entries LIMIT SQL query JDBC cache
Enhance test fwk report resource properly cleaned test p test fails clean resources properly case destroy cache managers next test running thread see already existing cluster blockUntil methods Make fwk report cluster properly shutdown test another tries create
Provide Stats via AdvancedCache interface p Create method returns Stats interface instance commonly accessed p allows fast access stats fast efficient typesafe way without go via JMX time satisfying requirement memcached txt protocol expose stats via stats
Integrate Query API p Grab JBCS
Add event handling Hot Rod HotRod client support separate CH cache Revisit cache name predefinition limitation cache servers Add support CH HotRod protocol Make SyncConsistentHashFactory default CH factory Index Affinity support p Enable Hot Rod servers send events asynchronously registered clients persistent connections would allow use cases clients maintaining L1 caches events could used servers invalidate keys client side See dev list thread p asymmetric clusters cache consistent hash primary owner key one cache necessarily owner caches Even symmetric cluster client may used access distributed replicated caches would certainly different p order send operations correct owner HotRod client use different CH p two primary reasons servers require predefined caches started startup allow invocations undefined caches p 1 Concurrent cache startups resulting NPEs https NPE acquire lock del already solved since days 2 issues dealing asymmetric clusters https Asymmetric clusters supported del p two issues resolved revisit limitation p server CH changed version client CH stayed server able translate server CH client CH translation imperfect 1 Sometimes client CH computes different primary owner server 2 client CH gets slower number segments increases server CH performance stays p https Improve SyncConsistentHashFactory key distribution del fixed SyncConsistentHashFactory good enough default still allows variation number owned segments per node owned segments segments acceptable purposes p major advantage SCHF depends cache members order joined Users expect key map node caches long caches members p One downside SCHF especially testing segment ownership differs test runs based random address assigned node However tests depend key ownership use tt ControlledConsistentHashFactory p also need verify number segments moved SCHF comparable number segments moved DefaultConsistentHashFactory https Minimize number moved segments SyncConsistentHashFactory p described https nofollow https
Add MassIndexer operation server p expose MassIndexer DMR
Allow KeyFilters applied listeners p registering listener users able provide tt KeyFilter simple interface determines whether listener invoked based whether affected key matches p proposed API may overload tt addListener Object listener method tt Cache adding div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important void addListener Object listener KeyFilter filter p tt KeyFilter may interface looks like div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public interface KeyFilter tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important boolean match Object key tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important
Allow listeners invoked primary data owner p Could parameter annotation tt primaryOnly prevent replicas firing updates div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Listener primaryOnly true tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public class MyListener
LevelDB Cache Store support JNI p Use LevelDB JNI cache store proper fallback Java implementation
Add abstract delegating Cache implementation p people extending simply mocking tests etc Perhaps implement AdvancedCache case abstract delegate take AdvancedCache constructor delegate calls p Perhaps called AbstractDelegatingCache img emoticon https 16 16 absmiddle 0
Write CacheLoaderConfiguration corresponding Builder Lucene module p Lucene module needs updated Configuration Builder class currently uses implementation CacheLoaderConfig wiped
Add support clustered listeners p opposed current listener approach listener instance invoked data owners JIRA adding support cluster listener listener instance notified disregarding data ownership RPC calls involved Due fact listener notification might involve RPC nice able specify filters clustered listener support opens way interesting architectures ul li queries query transformed filter notification listener stateful updates query state li simplistic CEP built top persistent query described li notifications might based clustered listeners
Add flag Hot Rod p Add flag Hot Rod protocol allow data loaded cache
Inject dependecies marshaller used compatibility mode p Interoperability remote query embedded mode requires special marshaller specified CompatibilityProtoStreamMarshaller dependency CacheManager user responsibility inject dependency could work programmatic configuration would impossible xml p Probably best way solve automatically wire user provided marshaller em instances annotated
joining cache receive rebalancedEnabled flag coordinator p issue starting set nodes cluster coordinator told surviving members state transfer disabled rebalancing disabled cluster running disabled p However new set nodes join afterwards know rebalancing p consequences new coordinator elected like MERGE set p prevent ensure greatest probablility success node joining get state flag response
Create new events inform listeners rehashing consistent hash changes p relation http 529547 nofollow http 529547 well known scenario start cluster ENTIRE cluster started start work Right CacheStarted ViewChanged notifications First tells us local node started nodes might still process starting Second one tells us view changed cluster started cache might process rebalancing state etc possible solution would NodeJoined event would called whenever new node finished joining cluster Finished joining means state transfer happened node possible workaround feature see forum post
Add simple eviction p Existing eviction strategies FIFO LRU may cases people care eviction ordering want efficiency faster simpler data
clear store state transfer p Right integrating state fetch persistent state true performed within cacheStore moved outside store StateTransferManager state transfer document store cleared integrating remote state relation http nofollow http
p like add methods p p would return current configuration values flat key value structure property keys would reflect names configuration fields structure would reflected extending key prefix dividing dot p least intrusive maintenance demanding implementation via p flat configuration would exposed via JMX objects testCache default attribute configurationProperties default attribute globalConfigurationProperties p diagnostic output feature affect way
Graceful shutdown supported JMX operation suppress state transfer Controlled cluster shutdown data restore persistent storage p Currently killing node result rehash mechanism clean shutdown also supported rehash b triggered Useful entire cluster intentionally brought p Need think perhaps LEAVE message prevent nodes triggering rehash subsequent view change detected could done programmatically via tt clean parameter tt stop explore alternatives p feature request expose JMX operation node suppress state transfer period time flag would tt false p use case flag would ease bringing cluster maintenance work typical workflow would p 1 Shut application requests data grid 2 Suppress state transfer nodes via JMX 3 Bring nodes 4 Perform maintenance work 5 Bring nodes one time node comes disable state transfer node via 6 nodes enable state transfer node via JMX 7 Allow application requests reach grid p purpose allow smooth fast shutdown startup remove risk OOM errors bringing grid p small useful subset full manual state transfer defined https Investigate possibility manual rehashing del p https amp nofollow https amp p https nofollow https
JGroupsChannelLookup take Properties created props set transport p current JGroupsChannelLookup interface http nofollow http mechanism receive configuration props configuring transport allows arbitrary lt properties gt set see http nofollow http simply passed
Optional expiration arguments p BasicCache optional lifespan idle time arguments put methods hoping putForExternalRead p Cheers p Vladimir
Early distributed deadlock detection p Based Jason old designs dig docs put
Cache view rank ViewChange listener Hot Rod version generation p Hot Rod server generates version numbers cache entries based JGroups view id view rank location current server view Currently rank calculated whenever new version generated quite wasteful view rank could calculated upon view change reused new view change would speed version
Distributed executors p new API allow users provide set keys run ability move code data execute returning results across p Scope objectives task described https nofollow https
Filter objects using query DSL without using index p cluster listeners want use Query DSL filtering projection views want tie Lucene discussed implement using
HotRod client keep trying recover connections failed cluster p cluster longer reachable reason network disconnect client try lost client library retry fixed calculation based max numbers connections pool 10 multiplied number available lead long time application continue react wait p improve behaviour configurable limit retries per server timeout p give application chance handle failure reply user instead hanging minutes default settings
Cache loading remote nodes optimised away certain conditions Enable external defined Externalizers p See discussion thread details http nofollow http p Create internal magic number 255 user defined externalizers done avoid users using number p internally lt gt lt stream gt Users lt gt lt user defined magic number int gt lt stream gt p Mandate unsigned ints optimise sending variable lenght Internal frameworks could use high enough numbers example 2 bytes 5000 7000 20000 1 byte 128 2 bytes 32767 3 bytes p Class type Externalizer ext int id p Maybe CacheManager better p Class type Externalizer ext int id p Future improvement maybe generate ids automatically user defined classes
optimize cleanup ReplicateCommand p ReplicateCommand split SingleRPCCommand MultipleRPCCommand ul alternate square li name suggestive ReplicateCommand name simillr ReplicableCommand makes code hard read li replicating single command current impl inefficient internally builds array store single entry
Add property display full byte arrays logs p useful marshalled caches
Delta view logging p Currently view change log INFO ISPN000094 Received new cluster view div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important INFO ISPN000094 Received new cluster view 24 p large cluster environment view list truncated sys prop value 20 default increase still hard see p would nice see delta view change like following div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important DEBUG Joined Left
Add support IncludeCurrentState listeners p Cluster listeners added https Add support clustered listeners del cover includeInitialState support able work local cluster
Add Query CDI JCache LevelDB REST modules p Query CDI JCache LevelDB REST modules need added modules ship
remoted tasks inject services via CDI execution p Second step discussed http query results nofollow http query results http 642300 nofollow http 642300 p https Provide references Cache distributed executor tasks MapReduce tasks del provide Cache references one provide anything CDI container knows defined injection points remoted tasks injection happen node avoiding serialization injected
useSynchronization disabled default p registers transaction manager synchronization failures commit reported p Even registering synchronization faster cases default safe
Make JPA cache store work Karaf p JPA cache store currently work Karaf several thing make work OSGi ul li use dependency possibly change dependencies li JpaStoreConfigurationParser70 exposed service Blueprint li EntityManagerFactory obtained service registry similar https nofollow https
Provide user friendly error able parse configuration files p failing parse configuration file XML format apparently unsupported error message
Add ability fetch set keys getAll p transaction knows advance set keys needs read k1 k2 kn method bring performance improvement keys fetched remote nodes parallel keys map node grouped fetched RPC request p Note achieved even time using K method elegant though requires user write code code waits Future objects returned
Add searching TransactionManager OSGi GenericTransactionManagerLookup p current implementation able find transaction manager embedded Apache Karaf p Apache Karaf includes Apache Aries installing optional feature transaction feature install transaction transaction manager available JNDI need check right
Allow configuring keepalive hotrod connections p Also consider making Tcp connections
Release lock thread interrupted p lock acquired acquiring thread interrupted lock couple try finally impact quite important since lock never released entry
Log rebalancing messages specific category p ease management logging major rebalancing events sent appropriate p Use level INFO
OffHeap Data Container p want able allocate data Requirements ideas ul li data stored Direct ByteBuffers easily accessible integration types clustering persistence server done efficiently li consider raw byte storage performed servers store binary li allocator pluggable li implementation use Netty Buffers li type allocation heap li allocation configuration global possibly shared among multiple containers li optional allocation keys li ability monitor global memory usage
Enable tcp delay default make configurable servers p increased performance Hot Rod client server enable tcp delay Also add configuration options client server tcp delay
Introduce lock unlock API methods p would fabled distributed locking p APIs AdvancedCache following sigs p void lock K key boolean eager void lock Collection lt extends K gt keys boolean eager void unlock K key void unlock Collection lt extends K gt keys p implementation use new Command LockControlCommand contains ul li boolean indicate whether lock unlock li boolean indicate whether eager lock li array keys p command handled LockingInterceptor locks p eager ReplicationInterceptor replicate command b synchronously even repl mode async ensure remote nodes well sync force lock unlock using DIST would replicated among peers relevant keys p transaction prepare lock eager also respected applied p transaction rollback locks unlocked usual unlock commands need part
Configuration templates p Currently relationship configuration named caches programmatic API ability existing configuration create new one declarative config introduce concept configuration inheritance div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt eviction LIRS 10000 gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt mycache gt p Possibly cache templates made abstract instantiated named caches directly div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt true gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt gt
Improve HR client security test coverage p Extends security test HR client tests cover HR operations available https nofollow Remote cache
Allow modifying eviction size JMX DMR Expose mutable configuration attributes JMX Make eviction size parameter configurable runtime p cache bounded need able modify eviction size runtime JMX DMR p got would like able dynamically runtime configure parameter eviction configuration would allow example decrease dynamically system starts running
Expose via unwrap methods p spec includes Class Class methods allow access underlying caching implementation Currently unwrap instance concrete implementations However classes expose underlying p Ideally able following div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt K V gt jcache name tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt K V gt icache p div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important CacheManager jmanager tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important EmbeddedCacheManager imanager tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important CacheContainer container
Expose Distributed Iterators HotRod p Integration external distributed query engines requires capacity ul li Partition data li Iterate partitions p distributed iterators covers exposed hotrod p Wiki page https nofollow https
Execute Mapper Reducer tasks parallel possible p current implementation Mapper Reducer tasks executed remote JVMs load process serially single thread possible use executors process parallel
Create generic execution framework EntryIterator p framework could used power segment aware framework events require execution across
HotRod millisecond precision p Currently precision requires MILLISECONDS
size local cache could accurate concurrent modifications expiration enabled p totally aware cache size approximation according doc however value could improved class DefaultDataContainer case cache entry expiration first check method remove key returns non null value decrementing variable numEntries otherwise could decrement several times entry div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important k null tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important p attached test case set maxIdle 0 make issue happens easily also attached patch proposal apply reject
Grouping aggregations DSL based queries p Implement group statement aggregate functions count sum average min
Refactor DataContainer various Maps use new Java 8 classes p Currently lot stop gap interfaces KeyValueAction replaced newer Java 8 classes move classes remove redundant code also provide
Introduce separate thread pool async cache operations p moment easy application start huge number putAsync operations fill transport executor thread pool delaying internal work state transfer Increasing size transport executor thread pool work would turn fill remote commands JGroups OOB thread pools p cache async operations used different thread pool would possible configure tt remoteCommandsThreadPool threads tt asyncOperationsThreadPool threads avoiding
Expose segment ownership Hot Rod client p https Expose Distributed Iterators HotRod del exposes entry iteration via Hot Rod allows filter based segments order able eventually calculate segments filtered ownership information cache needs exposed well API suggestion wburns div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Set lt Integer gt getSegments tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Map lt Address Set lt Integer gt gt getSegmentsByServer
Upgrade Server WildFly p Upgrade WildFly using build machinery
Upgrade Lucene 5 p Update directory Lucene 5 Also required update Hibernate Search Hibernate ORM Wildfly integration tests
Improved lifecycle control JGroupsChannelLookup p Currently JGroupsChannelLookup indicate whether JGroupsTransport connect provided channel provided case Wildfly like distinguish disconnect close service provided channel allow JGroupsTransport manage lifecycle leads conditions cache manager restart jgroups channel service https nofollow https p fix need introduce hacks channel returned channel service introduce separate method invisible perform actual close p propose following p boolean shouldConnect Notice renamed distinction start connect p boolean shouldDisconnect p boolean shouldClose
Log relevant events event logger p using event logger make sure different subsystems log relevant events ul li Task execution requested users li Node li li Rebalancing start stop li Mass indexer li Server li Site li Cache related events
Flush cache operation server p Implement operation registered every cache type passivation enabled evicts entries store otherwise cache store enabled waits completion otherwise
document CacheManager default constructor p Current javadoc says p ul li Constructs starts default instance CacheManager using configuration public DefaultCacheManager null null true p make user configuration defaults load default file default cache mode etc
Caches created via InternalCacheRegistry optionally searchable p Add SEARCHABLE flag enum use filtering caches need search components
Make replication queue implementation pluggable p needed make ReplicationQueue listenable needed events adding command flushing p p added DefaultFactoryFor p p Interface ReplicationQueue p p ReplicationQueue notifier implementation Supports events adding command flushing p p bare annotations add ReplicationQueue p p interface command added flush event p p event p p Updated implement Throws command added event added queue includes size queue command Throws flush event queue flushed includes size queue
Report Merge events via listener API p needed make JGroupsTransport listenable needed events detecting merge taken place p p added DefaultFactoryFor p p Interface JGroupsTransportNotifier p p JGroupsTransportNotifier notifier implementation Supports events p p bare annotations add JGroupsTransport p p interface merge view accepted event p p event p p Updated implement p p Updated throw event merge view
Apply isStateTransferEnabled attribute consumer p needed able configure state transfer providers consumers separately short term strategy make node provider use 39 fetchInMemoryState 39 attribute determine node consumer p p Updated remove 39 isStateTransferEnabled 39 check every node state transfer p p public void start p Updated check 39 fetchInMemoryState 39 attribute determine node operate p public void generateState p Updated node generate
Make use thread pool sending messages order avoid thread deadlocks keep threads blocked waiting locks released ul alternate square li OOB thread sends sync request blocks waiting sync jgroups RequestCorrelator li gets released another OOB thread remote node responds p OOB threads blocked sending available OOB thread unblock even responses remote nodes arrived deadlock order avoid deadlock use different thread pool sending OOB p discussion around please refer http query 20list results nofollow http query 20list results p ATM tx2 waits lock released tx1 incoming tx2 thread BLOCKED taken pool better way implement using structure would hold order depending transactions receiver correlated async execution API JGroups result tx2 would BLOCK return pool maxing thread pool executes commands Async invocation section https nofollow https
Allow substitution server properties p Brian p whatever reads properties HotRodServer MemcachedServer delegate system property substitution file substitution logic simpler even p tweak config set
Add ability define indexable classes via config p Queryable classes currently fly QueryInterceptor write operation set discovered classes replicated means p approach creates lot technical complexity implementation number flaws fixed several iterations solution still brittle lead locking issues also forces Hibernate Search reconfigure factory rather messy Instead continuing patch improve consider indexable classes cache configuration indexing configuration actually p Given impact change existing codebase would propose approach allows easy transition 1 Introduction new config indexing configuration able specify 2 cache indexed indexable classes defined fallback worked 3 cache indexed classes specified use perform anymore Also use ClusterRegistry propagate set classes p work also documented deprecated removed completely marking cache indexed specifying exact classes result error config time
Add category level filtering event logger p event log queryable category
features query dsl ul li need extend query language adding operators li need way configure analysers fields protobuf schema similar ones li keyword fuzzy querying wanted
Allow suppressing CacheNotFoundExceptions RpcManagerImpl p Could flag lt clustering gt config element set exception simply
block newly created cache started p Currently DefaultCacheManager stores caches concurrent map call getCache made cache yet exist cache created put map via putIfAbsent cache started Consequently subsequent concurrent thread calling getCache cache name may end cache yet ready use leading unexpected p Ideally calls getCache block requested cache newly created yet started Requests already started cache p possible implementation might involve storing cache along side volatile thread gate new CountDownLatch 1 concurrent map algorithm might look like 1 Lookup map entry cache gate using cache name 2 map entry exists gate present return 3 map entry exists latch present wait latch ideally timeout return 4 map entry exist create cache put map absent new thread 4a put successful entry already existed goto 5 Start cache start fails stop cache remove map entry threads waiting gate timeout oh well 6 Open gate 7 Remove gate map entry 8 Return cache p horridly generic version found source code http amp nofollow http amp example demonstrating use Registry MapRegistryStoreFactory found http amp nofollow http amp
Create ProbeHandler JGroups p Expose remote thread pool status JGroups probe returns following ul li gt current pool size li gt configure keep alive time milliseconds li gt minimum thread pool size configured li gt current active number threads li gt current queue size li gt maximum thread pool size configured li gt largest thread pool
Add efficient FileCacheStore implementation p Based feedback got needs efficient FileCacheStore implementation See https nofollow design document contains several suggestion implementing would nice also benchmark written order evaluate performance various implementation
Configuration XML serializer p Provide configuration serializer convert Configuration object XML
Make timeout values statetransfer flush configurable p seems need configure flush timeout defined ObjectOutput currently hardcoded 60 might actually cover another problem stacktraces p Node1 p ERROR span error 91 93 Caught responding state transfer request Timed waiting sync acquired timeout 60 seconds StateProviderThreadSpawner Caused Timed waiting sync acquired timeout 60 seconds 12 p Node2 p Read past end file 100 Caused Read past end file 28
method Metadata ignores Metadata p implementation tt putForExternalRead method ignores tt Metadata parameter instead passing tt putForExternalRead method cache implementation doubt cache implementation previously support tt Metadata tt putForExternalRead p prepare PR attach ticket shortly gargantuan effort patch see
Make JOPR plugin friendly environments p Within descriptor ul alternate square li Change top level server service li Within service add lt JMX Server JMX gt lt JBossAS Server JBossAS gt lt JBossAS Server JBossAS5 gt p Within source ul alternate square li implements ResourceComponent convert extend MBeanResourceComponent like StatisticsComponent li might able reduce code change p Base work done https nofollow https p Test ul alternate square li Test AS6 admin console drop plugin jar plugins subdirectory admin console li Test RHQ
Implement flag prevent loading entry p mentioned mailing list p key value p cause CacheLoaderInterceptor try loading data way prevent major performance issue interested return value p Apparently work prevent return values nodes way prevent loading store would correctly skip read actually want value written store needing avoid
Transparent eager locking transactions p Allow configuration attribute lt transaction gt able specify whether locks acquired eagerly lazily current scheme lazy p could implemented broadcasting LockControlCommands alongside acquiring local locks necessary
Make cache events generic possible p would nice Cache events generic save user needless casting CacheEntryActivatedEvent lt K V gt would also discourage users fetching values generic Cache lt K V gt rather cast values event DataContainer potential gotcha see https Add cache value event objects del Type erasure ensure current unparameterized usage fully
Support Query Caches configured INVALIDATION mode p currently supported nodes get copy value consequentially unable scan annotations recognize new services need
Asynchronous Cache API p Unscheduled p Tim Fox p imagine set value cache time get response value set cache also need know replicated another node redundancy guarantees high p One way block thread calls set replication performed synchronously node returns however involve network round trip per p would nice would able get acknowledgements replication back asynchronously different stream p Set cache acknowledgement replication Set cache p blocking approach p S1 A1 S2 A2 S3 A3 p wait ack set calling next set involves network RTT per p non blocking pipelined approach call sets quick succession without waiting response time later get ack p chronologically something like p S1 S2 S3 S4 S5 S6 S7 A1 A2 S8 A3 S9 A4 S10 S11 A5 p Since blocking use throughput network without limited p kind thing messaging replication someone sends load message one one individually network RTT per message would slow replicate still need guarantee message reached backup get acknolwedgement send p Manik p Returning Future would probably way would need think API would look like though since API look behave regardless cache config used
servers expose stats JMX p servers expose stats amount data read amount data written back clients
Add configurable properties configuration lookup class p See https JGroupsChannelLookup take Properties created props set transport del Currently pluggable components specified lookup class name accept configurable Properties object JGroupsChannelLookup MBeanServerLookup Consequently awkward implement parameterized MBeanServerLookup implementation find server using jmx agent id use injected mbean server instance etc think 2 ways improve 1 Add ability specify properties objects pluggable component Properties properties 2 Allow user define instance directly MBeanServerLookup lookup p Ideally could support mechanisms 1st allows flexible declarative configuration 2nd allows even flexible programmatic p Thinking bit support approaches using following using MBeanServerLookup example ul li Leave MBeanServerLookup interface li Replace String MBeanServerLookup lookup li Create generic implementation MBeanServerLookup delegates instance constructed via class name java bean properties li lookup class specified xml construct generic MBeanServerLookup object accordingly using class name properties p thought Approach 1 good
Refactor way release versions generated p Makes easier release scripts
clustering mode local p clustering mode replication mode default configuration way override specific cache local mode convenient require us either separate cache definition two make local mode default change caches replication
Use custom externalizers improve performance Lucene Directory p Use https Enable external defined Externalizers del improve Lucene Directory
Generalize Externalizer interface p Make Externalizer interface generalized order make typesafe p interface Externalizer lt gt void writeObject ObjectOutput output object throws IOException readObject ObjectInput input throws IOException ClassNotFoundException
Allow retrieving coordinator address EmbeddedCacheManager p order get coordinator address go following hoops p p requires obtaining clustered cache p EmbeddedCacheManager interface exposes several methods access local address address members whether local address also coordinator method get cluster coordinator
Consider staggering remote get requests using DIST p DIST mode request made key mapped locally remote get sent data owners key first response used add unnecessary load network nodes still eventually respond values large cause lot unnecessary network p purpose broadcasting data owners 1 one another could still respond 2 one overloaded others may respond p solution around could based either ul li Provide configurable stagger timeout 100ms RPC random Owner1 Wait timeout response RPC Owner2 li Always broadcast configurable subset owners always 2 even numOwners p Needs careful thought
Upgrade consistent hash function use MurmurHash3 better performance even spread p MurmurHash3 released Details improvements p http nofollow http http nofollow http p Would need update hash version Hot Rod
optimization p IRC discussion Manik Right InternalCacheValue ICV created InternalCacheEntry ICE CacheStore whenever persist entry order avoid duplicate marshalling way InternalCacheEntry created ICV whenever value Avoid unnecessary creation objects making ICE aggregate ICV delegate state calls Impl note order allow delegation ICE ICV make ICV methods
Passivate entries cache store upon shutdown p cache store configured passivate entries cache shutdown
XAResource implementation improvements TransactionalXAResource p Reviewing code Jonathan Halliday brought following aspects see TODOs p package p import import import import import import import import import import p import import import p ul li acts local link p implementor link p called tx manager various tx li author li since public class TransactionXaAdapter implements XAResource p private static final Log log private static boolean trace p comment timeout used useful TM client separate processes TM might fail client might TM running separate process crashes scenario TM ever call resources would held forever affecting us scenarios TM amp XAResource collocated p private int txTimeout p private final InvocationContextContainer icc private final InterceptorChain invoker p private final CommandsFactory commandsFactory private final Configuration configuration p private final TransactionTable txTable p ul li XAResource associated transaction enlistment li boundary methods prepare commit rollback need stateless li Reefer section JTA spec private final LocalTransaction localTransaction p public TransactionXaAdapter LocalTransaction localTransaction TransactionTable txTable CommandsFactory commandsFactory Configuration configuration InterceptorChain invoker InvocationContextContainer icc localTransaction txTable commandsFactory configuration invoker icc p ul li call transaction object See Section Resource Sharing JTA spec public int prepare Xid xid throws XAException throw exception also cleanup resources might never called LocalTransaction localTransaction getLocalTransactionAndValidate xid p last comment validateNotMarkedForRollback localTransaction p trace Received prepare tx 0 Skipping call 1PC used xid return PrepareCommand prepareCommand trace Sending prepare command chain prepareCommand LocalTxInvocationContext ctx localTransaction try ctx prepareCommand trace Readonly transaction force cleanup release objects held TMs call commit READ tx See commit xid false return else return catch Throwable e todo throw exception make sure locks 100 cleaned TM rollback call todo handle gt node fails ack tx prepare node still part cluster needs sync tx state one way pushing tx state node one two happens node ack b node shunned cluster Error processing PrepareCommand e throw new XAException comment link prepare applies public void commit Xid xid boolean isOnePhase throws XAException LocalTransaction localTransaction getLocalTransactionAndValidate xid trace committing transaction 0 p try LocalTxInvocationContext ctx localTransaction todo needs split two important user ack really need consistency case isOnePhase make sure method either commits successfully fails cleans logs eventually isOnePhase validateNotMarkedForRollback localTransaction p trace 1PC prepare call interceptor chain PrepareCommand command true try ctx command p catch Throwable e Error processing 1PC PrepareCommand e throw new XAException else CommitCommand commitCommand try ctx commitCommand catch Throwable e Error processing 1PC PrepareCommand e throw new XAException p finally cleanup localTransaction p p ul li comment link prepare p applies public void rollback Xid xid throws XAException rollbackImpl xid commandsFactory icc invoker txTable p public static void rollbackImpl Xid xid CommandsFactory commandsFactory InvocationContextContainer icc InterceptorChain invoker TransactionTable txTable throws XAException LocalTransaction localTransaction xid localTransaction null trace tx found 0 xid throw new XAException trace rollback transaction 0 p RollbackCommand rollbackCommand LocalTxInvocationContext ctx localTransaction try ctx rollbackCommand p catch Throwable e Exception rollback e throw new XAException p finally cleanupImpl localTransaction txTable icc p p private LocalTransaction getLocalTransactionAndValidate Xid xid throws XAException LocalTransaction localTransaction1 xid localTransaction1 null happen XAResource TM process tx found 0 xid throw new XAException return localTransaction1 public void start Xid xid int throws XAException xid localTransaction trace start called tx public void end Xid xid int throws XAException trace end called tx public void forget Xid xid throws XAException trace forget called public int getTransactionTimeout throws XAException trace start called return txTimeout public boolean isSameRM XAResource xaResource throws XAException xaResource instanceof TransactionXaAdapter return false TransactionXaAdapter TransactionXaAdapter xaResource return public Xid recover int throws XAException trace recover called return null public boolean setTransactionTimeout int throws XAException return true Override public boolean equals Object return true instanceof TransactionXaAdapter return false TransactionXaAdapter TransactionXaAdapter return Override public int hashCode return Override public String toString return TransactionXaAdapter localTransaction private void validateNotMarkedForRollback LocalTransaction localTransaction throws XAException trace Transaction already marked rollback 0 p localTransaction throw new XAException p private void cleanup LocalTransaction localTransaction localTransaction txTable icc p private static void cleanupImpl LocalTransaction localTransaction TransactionTable txTable InvocationContextContainer icc localTransaction p
Eviction redesign p Eviction needs redesigning p 1 Eviction based timed entries passivation expiration removes 2 Eviction event queue eviction algorithm queues wasteful incorporate additional ordering data container directly prune
Allow configuring number segments per node p allow following use cases ul alternate square li node take load li node take load p simple way specifying would configure load factor per node powerful machine would 2 x would mean would take twice load ordinary machine
Enhance cache management methods EmbeddedCacheManager p include div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important boolean cacheExists String cache tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Old Cache lt gt getCacheIfExists String cache tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Cache lt gt getCache String cache boolean createIfAbsent tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important boolean remove String Cache p Original request blockquote p seems ability check populated cache exists CacheManager Cache still valid handle get cache
SSL access Hot Rod p Investigate integrate Adrian patch Hot Rod server accessed via p Email Adrian p remember heres patch add ssl couple weeks ago dont know Ill time finish based head weeks ago dont remember version img emoticon https 16 16 absmiddle 0 p horrible part way modify parameter could really passing config object p dont know make git diff include new uncommitted files Ive attached p See test use basically set config properties relevant package prefixes file containing key file containing public keys trust authentication p Optionally get server authenticate client well p p means server need trust p also left dont set properties use default doesnt work box unless enable anon alogorithms server enabled default dont authenticate encrypt p main thing left would change test get maven generate store well defined place target p comments ul li code serrver also work protocols well memcached client supports ssl ul li ssl context construction pretty similar could probably shared knew put shared stuff codebase img emoticon https 16 16 absmiddle 0 ul li commented bits think really adding socket timeouts Otherwise network could cause connection hang forever least connection timeout socket construction dont want implement full blown ping continually test connection rather ping start doesnt run connection timeout ul li modify system property handling default null Strings might relevant others ul li doesnt client side system property replacement like server ul li Theres lot places code p InputStream openStream useIt p never close stream probably ok infinispans use cases good practice leave files open gc close could take happen hogging system p Either useIt close stream code p InputStream openStream try useIt p finally p Feel free post whatever parts message like forum img emoticon https 16 16 absmiddle 0
Simplify configuration fluent API p rather tedious sometimes set every little configuration toggle using coarse APIs like GlobalConfiguration Configuration could simplify model allow users set related units configuration using grouped APIs div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important class GlobalConfiguration tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important MarshallerBuilder configureMarshaller tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important class MarshallerBuilder tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important MarshallerBuilder setInstance Marshaller tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important MarshallerBuilder setType Class lt extends Marshaller gt c tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important MarshallerBuilder setVersion String tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 nbsp tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important MarshallerBuilder addProperty String name String value tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important MarshallerBuilder addProperties Properties p tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important p top use fluent API make configuration setting even easier div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important foo bar
Implement methods p Implement
Support XML marshaling Configuration instances p supports flexible way configuring caches using multiple levels inheritance really nice sometimes easy understand exactly particular cache configured JPA one example cache configuration adjusted several ways p JMX debuggers help may always p allowing convert configuration instance back XML give quick overview really applied settings em Optionally might also nice little feature implement toXmlString method override default also make available JMX p JAXB annotations already present configurable options couple getters XmlRootElement annotation missing would allow convert existing instance back XML effort rather p 8212 feature request may also fit https node startup ensure peers compatible configurations would allow transfer cache configs using
Java HotRod Add client timeout option p seem option specify client pretty common IMHO valid feature client p http nofollow http p option catching HotRodTimeoutException rethrowed replication timeout side p http nofollow http
Core module delegate lifecycle events p Follow service registry style approach delegating lifecycle events modules register hooks purpose behind modules need perform setup tree module needs register specific types Marshaller query module needs register interceptor Cache Cache enabled querying p approach use JDK service registry style approach Core module defines ModuleLifecycle interface p interface ModuleLifecycle void cacheManagerStarting GlobalComponentRegistry gcr void cacheManagerStarted GlobalComponentRegistry gcr void cacheManagerStopping GlobalComponentRegistry gcr void cacheManagerStopped GlobalComponentRegistry gcr p void cacheStarting ComponentRegistry cr String cacheName void cacheStarted ComponentRegistry cr String cacheName void cacheStopping ComponentRegistry cr String cacheName void cacheStopped ComponentRegistry cr String cacheName p module would implement p Registration performed module maintaining file classpath containing lt ModuleLifecycle impl gt p DefaultCacheManager starting scans classpath registers listeners Everytime cache manager starts stops caches start stop appropriate callbacks
ConsistentHash interface deal Sets Lists Addresses p prevent adding address hash wheel
Make Hot Rod topology cache parameters configurable p Ups fault Hot Rod topology cache state retrieval timeout configurable Neither lock p two need made
Create tooling JMX handle heuristic transactions p https Implement XA recovery TransactionXaAdapter del implemented TM aware heuristic transactions TM determines transaction informs System Administrator SA job force pending order needs tooling order access cluster solution would JMX described http nofollow http p complementary https Implement XA recovery TransactionXaAdapter del important without transaction failure
REST API based server module Build server module based HotRod protocol p Essentially module deployed REST API talk cache backend Possibly something wraps cache making use libraries p Could based existing JBoss Remoting components capability handle load balancing faoliver Needs share components https Build smart client makes use HotRod protocol del protocol parsing code repeated May also share components https Build memcached server module del abstract transport socket handling code p also need comprehensive wiki page detailing usage
Introduce dialect attribute jdbc cache stores inside OSGI p main goal provide specific configuration attribute XML configuration div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt java MYSQL p instead specify custom property div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important string span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color gray Consolas Bitstream Vera Sans Mono Courier New Courier monospace important name span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color blue Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color gray Consolas Bitstream Vera Sans Mono Courier New Courier monospace important datasource span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color blue Consolas Bitstream Vera Sans Mono Courier New Courier monospace important java span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important property span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color gray Consolas Bitstream Vera Sans Mono Courier New Courier monospace important name span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color blue Consolas Bitstream Vera Sans Mono Courier New Courier monospace important databaseType span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important gt lt span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important property span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important string span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important gt p also result different way configuring ISPN embedded mode gt p need import inside OSGI repository Tests made p added configuration use inside osgi repository need ignore listed dependencies configuration install inside OSGI achievement base installation https nofollow https p added forced put manually Felix dependencies jgroups jboss marshalling jcip apache commons seen core working default without libraries think achievement replicated p Inside tag excluded libraries core started default mode without errors want use replication OSGI enough add manually packages etc etc p Actually core bundle installed used needs theese projects installed osgi bundles p jboss transaction api patched new OSGI version https nofollow https p jgroups osgi bundle since version p river opened issue marshalling https jboss marshalling OSGI del https nofollow https p opened issue marshalling https jboss marshalling OSGI del https nofollow https p jboss logging spi added jira issue https OSGI del could fixed version Fixed version p rhq plugin annotations opened feature request https nofollow https p i18nlog sent patch https nofollow https could become OSGI bundle version Waiting response Fixed p log4j ok osgi bundle img emoticon https 16 16 absmiddle 0 p sent patch via email brian post http nofollow http Sent patch responded OSGI version different artifact name changed dependency parent project p make sure proper property specified p fails load obviously missing bundles essential using core functionality 2 fail due dependency really
PUSH based rehashing p Current rehash schemes based PULL state Joiners new owners leave pull state neighbours JIRA reimplement PUSH based scheme nodes detect new joiners leavers analyse internal state determine needs pushed p scheme robust involving far fewer RPCs coordination would work better merge views detected partitions p Based Bela prototype https nofollow https
Deploy server Deploy custom cache store Server p Server allow deploying JARs follow standard Java service provider Support groupers listeners jobs distexec jobs interceptors JPA entities etc h2 Overview Overview p Support deployment configuration custom cache h2 ClientPerspective Client Perspective p client able deploy custom Cache Store jar Hotrod server put jar need contain one following service entries ul li li li li li li services might used later used h2 Implementationoverview Implementation overview p Refer https deployable nofollow Implementation details Wiki page
Throw exception using hash l1 configured replicated invalidated local mode p Makes sane
GET HEAD requests caches keys return 404 error rather 500 error p closer line REST standards
Asymmetric clusters supported p Note would affect distributed replicated cache p Currently clusters always symmetric assume 5 nodes N1 N5 assumes node set named caches C1 C5 deployed node designed accordingly causes problems applications caches defined started lazily node example p Considering cache manager 2 caches DIST mode C1 C2 deployed 2 nodes N1 N2 Currently DistributionManager properly handle following scenarios 1 Stop C1 N1 ought trigger rehash C1 cache Currently rehashing triggered via view change Failure rehash stopping cache inadvertently cause data loss backups given cache entry 2 new DIST mode cache C3 started N2 N1 coordinator join request sent N1 get stuck infinite loop since cache manager N1 contain C3 3 Less critically new node N3 started yet C1 C2 cache though cache manager started prematurely triggers rehash C1 C2 even though new caches instances p solve one proposal would involve p 1 Providing named cache coordinator distributed named cache would coordinate rehashes may may JGroups coordinator named caches may may share named cache 2 DistManager would maintain list available members would subset members available 3 concept LEAVE message broadcast cache stops would serve effect view change member removed exception affecting single named p 3 place proper solution could devised handle asymmetric distributed
Internal Cache Registry needs persistent p Several improvements suggested Sanne ul alternate square li protobuf schemas persisted hotrod topology info security cache li also security want set lifetime properties
CLI p needs official CLI tool following features ul alternate square li simple CRUD operations get put delete li queries cache indexed li administrative tasks eg invoking JMX commands p Optional cool things ul alternate square li run scripts li
Help prevent deadlocks making lock id accessible public API p prevent deadlocks use ISPN transactions need sort keys calling method acquires lock example use lock striping use one lock per key following use case create deadlock p Thread 1 div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important acquire lock tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important acquire lock B tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important B B tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important acquired locks released tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important p Thread 2 div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important acquire lock B tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important B B tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important acquire lock tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important acquired locks released tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important p prevent deadlock simply sort keys within Tx lock acquisition done order Unfortunately use lock striping even sort keys face deadlocks predict locks distributed keys example following test case creates deadlock lock striping div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public class TestDeadlock extends TestCase tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important get unpredictable deadlock apart know implementation tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important ReentrantStripedLockContainer know keys tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 8 13 mapped lock 11 14 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important mapped lock different first tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important use case keys sorted still get deadlock tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public void testUseLockStripingTrueUnpredictableDeadLock throws Exception tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important DefaultCacheManager manager new DefaultCacheManager tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important true tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 1000 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important final Cache lt String String gt cache tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important final CountDownLatch startSignal new CountDownLatch 1 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important final CountDownLatch endSignal new CountDownLatch 2 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important final AtomicReference lt Exception gt exception new AtomicReference lt Exception gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important new Thread tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important see run tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Override tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public void run tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important try tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 8 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important aaaaaaaa Value tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 14 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important aaaaaaaaaaaaaa Value tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important true tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important catch Exception e tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important e tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important finally tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important new Thread tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important see run tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Override tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public void run tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important try tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 11 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important aaaaaaaaaaa Value2 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important 13 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important aaaaaaaaaaaaa Value2 tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important true tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important catch Exception e tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important e tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important finally tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important assertNull tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important p could get lock id thanks public API could sort keys according value avoid deadlocks even lock striping
Public API tracking completion work given user transaction p using user transactions persist changes cache store using synchronization user transaction means persistence operation begins user transaction committed However components using likely want know work completed given p 6 possible registering transaction listener div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important cache tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important activeTransaction tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important txnTable tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important ispnTxID activeTransaction p use tt GlobalTransaction tt Listener div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Listener tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important class TxnListener tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important TransactionCompleted tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public void transactionCompleted TransactionCompletedEvent event tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important return tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important GlobalTransaction eventIspnTransaction tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important eventIspnTransaction null tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important return tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important stuff tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important else tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important stuff tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important p However longer possible 7 since classes moved impl p please public API notified complete work specific user transaction like 6 ModeShape needs something see https Concurrently creating child nodes parent results node loss using Wildfly del details
Increment topology id node leaves cache p currently increment topology id rebalance consistent hash add new owners allows us optimizations leave like forwarding commands new owners p Unfortunately intuitive match JGroups works cause bugs like https Topology check wrong del p Additionally turns many places care node left code complex handle slow common case leaver
Add configuration initial number nodes p possible specifiy minimum number nodes need belong cluster transport considered started
Make JBoss Marshalling class resolver configurable p JBoss Marshalling class resolver configurable order enable following use case help classloading modular environment p environment JBoss sort consistent identification deployments across nodes deployment id SPI used attach deployment id serialized data deserialization used locate correct classloader use
Expose CacheView string via JMX p JGroups view CacheView differs causes trouble finding state CacheView p test controller driven JGroups view particular case lead test failure better said wrongly controlled p node0002 killed view 7 http nofollow http p controller saw JGroups view span error 91 93 span error 91 93 maybe existed JGroups layer never partition node0003 p node0004 p therefore went test lead errors among others https entries available view change del might caused
Dynamic Externalizer discovery p Look JBMAR sends Externalizers sent via wire receiving side need know Externalizers
DefaultSharedExecutorFactory needed p uses common executor caches cache manager default executor factory used prevent multiple eviction threads one cache cache
Use specific cache managing protofiles p Portofile defining schema held separate cache would allow users manage schema hotrod client Security considered
Streaming Hot Rod p Extend large object Hot Rod
Ability group data entries p http nofollow http p requested feature would allow distinct entries assigned custom arbitrary groups Later time groups could flushed demand without knowledge entry p feature exists open source cache library see http nofollow http
Implement event logger server p Create event logger management interface show events ul alternate square li 7 day retention li Task execution li Cluster events node rebalance server remote site li Cache events start stop li Security audit
Create expiration notification cache entries p Create CacheEntryExpired notification make EvictionManager send notification cache entry evicted Also mage sure cache entry value sent p CacheEntryEvicted notification also send entry value
Implement topology headers Hot Rod p Implement Client Topology Change headers per http nofollow http
Add operation change availability mode partition p administrator able bring cluster back available mode cache entered degraded mode successive node
Optimise thread local usage Redesign marshallers per named cache instance per thread p Three separate areas consider p 1 Remove ThreadLocal usage OwnableReentrantLock 2 Remove ThreadLocal usage InvocationContextContainer 3 Remove ThreadLocal usage Flags API p Look ThreadLocal usage critical p Since switched explicit classloaders pass correct classloader use JBoss Marshalling rather rely TCCL However moment marshallers per thread per named cache instance need change way marshallers created make marshaller also require investigation best way propagating DI system Dan previously suggested using InvocationContext
Add support distributed entry iterator p https Add support IncludeCurrentState listeners del requires need able iterate entries found cache irrespective distributed cache without jira cover adding
Integrate JBoss Marshalling p current magic number based marshalling framework works well impl clunky unreadable hard unit p Consider XNIO libs marshallers defined specific types consider using
DIST distributed cache ul alternate square li Detailed designs wiki somewhere review li Consistent hash algo pluggable li new cache mode distributed addition r replicated invalidated li include code rebalancing li L1 cache fast reads li Multicast invalidation flush L1
Add single shell script handle cache server startup p Rather separate startup scripts memcached hotrod single script used would take protocol parameter determine server module p email p notice script start memcached server believe something like given actually starting memcached img emoticon https 16 16 absmiddle 0 p perhaps script could reused HotRod well passing flag specify protocol speak perhaps something like p memcached p p hotrod p Perhaps could module instead based protocol flag passed kick start appropriate server WDYT
Expose JMX statistics Hibernate Search p possible add jmx hook obtain Hibernate Search SearchFactory Statistics using property lt indexing true true gt lt properties gt lt property true gt lt gt lt gt p tough property allow multiple registration one registration per cache would nice wrap Statistics object HibernateSearch actual cache object p guess implementation could look like get search factory statistics statistics wrap search factory statistics SearchFactoryStatisticMBean mbean new SearchFactoryStatisticMBeanImpl statistics expose mbean new ObjectName mbean
Replace Hash function segment mapper p Currently allow user customize mapping keys CH segments custom tt Hash function Hash function give user direct control key mapped ultimate location depends CH implementation CH implementation also customizable much harder user get p replace Hash something like div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important interface span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important SegmentMapper tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important public span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important int span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important getSegment Object key span color 006699 bold Consolas Bitstream Vera Sans Mono Courier New Courier monospace important int span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important numSegments p also easier implement tt Grouper interface user needs need additional grouping features like tt name p think also help internally replace tt GroupingConsistentHash needs every topology update constant tt SegmentMapper wrapper might also help compute segment key save context instead computing every time need know location
Make storeAsBinary keep object byte p email thread http nofollow http p also means dropped
scripting using p Implement scripting manager stores custom scripts dedicated cache scripts invoked binding set named parameters component support known code extension points simple tasks distexec listeners script type supported available scripting engines
New coordinator installs old CH containing crashed members p merging round pull requests today including https coordinator leaves rebalancing progress new coordinator 39 finish rebalancing del still issue killed node appear CH even JGroups passes new view appears happen old coordinator p Obviously CH contains old member writes map segments previously owned dead node p ISPN trace logs looking p http nofollow http http nofollow http http nofollow http node killed
Cache creation serialized p synchronisation code DCM serialisez cache creation added together https Potential concurrency issues retrieving cache concurrently first time del optimised serialize access GlobalComponentRegistry concurrent
Update clone JBossTM p order support better integration recovery support JBossTM making easier XID logged JBossTM
Multiple Synchronization registered transaction p transaction SynchronizationAdapter registered transactional invocation enlistment code verify Synchronization
Add ConfigurationDocRef recovery useSynchronizationForTransactions config elements p needed documentation generation
JdbcXXXCacheStore honor cacheName p Creating multiple caches CacheManager configured JdbcXXXCacheStore results unpredicted behaviour creating CacheManger persists entries JdbcXXXCacheStore one see strange behaviour like p Cache fooCache foo Cache barCache bar p single put 42 Hello World p restart p 42 true 42 true p circumvent behaviour solution create one CacheStore per Cache one migth end using lot different p best solution IMHO would add sopport cacheName column TableManipulation different caches could share
rollback tx marked rollbackOnly p Scenario use eager locking Start transaction kill node lock acquired commit transaction using JBossTM one transaction enlisted JBossTM optimizes 2PC invokes onePhase flag set true Right call results exception leaves cluster locks acquired Instead rollback transaction throw exception would propagated user well
check whether locking JDBC cache stores replaced SELECT UPDATE p sure whether outside locking MVCC used need locking code within cache stores
work programmatically defined caches p String aName aName Configuration configuration aName configurationOverride Cache c aName assertEquals aName fails
Investigate document XA recovery integration JBossTS p Reading JBossTS recovery documentation span error 91 1 93 recovery process able pull recovery info ISPN XAResource implementation calling issue method needs called process ISPN node leaves ATM possible invoke different p documentation would also useful users want set transaction recovery p span error 91 1 93 http nofollow http
Passivation without Eviction invalid configuration log warning p needs verified whether Passivation without eviction make display warning good configuration cache store probably get used
expose CacheManager accessible MBean p span error 91 Galder 93 gt gt gt Couple methods discussed detail http nofollow http section gt gt gt gt gt gt 1 Use CacheManager create cache CacheManager available JNDI java See Section gt gt gt gt gt gt 2 Use CacheJmxWrapperMBean cache mbean attribute Simplest way deploy via Section JBC docs http nofollow http gt
Cache entrySet keySet values operations ignoring expired entries p Cache implementations take account entries might expired collections returned might contain pairs p side effect getBulk remote cache operation returning entries even lifespan ends Martin blockquote p related getBulk operation HotRod p Simple test snippet fails ATM div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Map lt String String gt mapIn new HashMap lt String String gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important Map lt String String gt mapOut new HashMap lt String String gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important aKey aValue tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important bKey bValue tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important mapOut lifespanInSecs tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important sleepForSecs lifespanInSecs tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important mapIn tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important assertTrue 0 entries still p However call lt key gt keys getBulk getBulk return empty p seems get operations cause entries removed cache Please implement also getBulk operation reject
warn using indexing query module present classpath p possible use indexing config xml div syntaxplugin syntaxplugin border 1px dashed bbb 5px important overflow auto 30em table 0 0 0 100 1em important normal normal color black tbody tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt default gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt invocationBatching true gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt indexing true true gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt properties gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt property ram gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt gt tr td important padding 0em top pre 1em margin 0 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt gt tr td important padding 0em top pre 1em margin 0 10px 10px width auto padding 0 span color black Consolas Bitstream Vera Sans Mono Courier New Courier monospace important lt gt p without query module dependencies p expect warned case p happens LocalQueryInterceptor added interceptor chain indexing used nothing reported
Log something auto discovered modules extensions p seems looking classpath instances em files nothing logged idea loading p Also specific modules log registration happening em mention p registration module happen people experience misleading errors
Update ManagedAttribute annotations expose information use JOPR p Details mail list
Support Pattern p Please create support pattern distributed cache detailed description could found Oracle Coherence documentation http nofollow http Cameron Purdy presentation http nofollow http p based combination L1 caching local JVM application combination L2 cache based distributed cache cluster servers tried implement HotRod support listeners UnsupportedOperationException thrown could cool could register kind eviction listener client side use invalidation records local cache based event remote distributed cache L2 p kind workaround described http nofollow http L1s yet could implement Cache Listeners server side use JMS notify clients build L1 way p Thanks great cache like
