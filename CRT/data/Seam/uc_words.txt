I think seam team should consider building seam 2.5 version so we can upgrade our old project to jsf2.0 , ejb3.1 , hibernate 3.6 , beanvalidation , glassfish3 or jboss6 and get rid of hibernate3.2 validation and richfaces3 dependcy . I have upgraded my old project a few months ago from seam2.2 to use jsf2.1 , hibernate 3.6 , beanvalidation , granite-seam21 , spring3.05 under tomcat 7.0.5-dev and used in the production environment.I test it on glassfish v3.1 and jboss6 but not test ejb . If considered i can provide my patch to seam team as a reference or push full source code to github with your team permission . Please consider . heyoulin . 
More flexible mapping of URLs to view ids . For example , I want to be able to use a URL like this : To get me to archive.xhtml with a request parameter 200306 ( not really a request parameter , but we could try to abstract that so that it can be used with @ RequestParameter ) . Not sure if this is possible without changing the JSF implementation . . 
Drools API has been changed since 4.0.0M3 . Please see : Corresponding changes in the Seam codebase and Seam reference should be made if Drools 4.0 GA is to be used in the future Seam . . 
Users want an operation to kill all conversations , and they want that to happen in the same action as beginning a new conversation . . 
When parsing XML files that we don t control , like ejb-jar.xml it s possible for the parser to make network connections to resolve DTDs . Rather than trying to maintain a local cache , I am adding a safe parsing mode which will completely ignore external references . If the external DTD is critical to parsing ( default attributes , for example ) , the DTD still can be cached and the document parsed normally . . 
We should allow : ( 1 ) switching of a user s locale using # { local.language } , # { locale.switch } ( 2 ) templated resource bundles # { messages } where bundle.key=some text with an # { expression } . 
We now have EL support ( templating ) for all messages except Hibernate Validator . We need it there too . . 
Currently Seam does no special processing for qualified names . The only way to alias a name to a shorter name is via & lt ; factory & gt ; . We should provide : global import of a qualifier in components.xml import into a component or Java package via @ Import import into a page ( ie . a view id ) via pages.xml . 
To support eager loading of associations . 
It would be nice to have page actions which are called at the beginning of the render response phase . . 
We need a way to dynamically load pageflow at runtime . This gives a lot of power in letting the users customize their navigation rules to fit their needs . Refer to : for details . . 
Create an configuration option to disable some default interceptors that there are never used , improving the application s performance . On some systems there are no necessity of some interceptors , for example , the transactional ones ( RollbackInterceptor , TransactionInterceptor and ManagedEntityIdentityInterceptor ) that degrade performance . . 
Would it be possible to get the Seam i18n features to scan for multiple resource bundles , so that common resources can be shared across mutliple applications ? Here s a few ways this could be accomplished : 1 ) Rename the default bundle messages.properties to seam-messages.properties , and scan for multiple seam-messages.properties in the EAR . 2 ) Add a new property name , or change the resourceBundle.bundleName property , to handle a delimited list of resourceBundles . So the default implementation uses a single bundle messages.properties , but by adding a configuration property you can get it to scan multiple resource bundles in the order specified . e.g . resourceBundle.bundleName=Messages.properties , GlobalMessages.properties 3 ) Implement a cascading scheme , similar to the sample posted in the forum . . 
Mail sessions will currently not work on smtp servers without SSL enabled . Please add a mechanism to disable TLS . . 
Currently , it s not possible to use EL in the view-id string in an page exception handler . This makes it awkward to redirect to different pages depending on the cause for a given exception . See forum reference for a use case and a workaround . . 
Currently you can t integration test Seam mail as we don t provide mocked out mail Session . . 
Seamgen generates classes derived from EntityHome which often must be customized by the end user developer . Currently there is no documentation , not even javadocs , for the various functions inherited from Home and EntityHome ( what is the contract for the wire ( ) /isWired ( ) functions ? If a new instance needs to be initialized with default values , where should that be done ( createInstance ( ) ? wire ( ) ? somewhere else ? ) . How is getDefinedInstance ( ) intended to be used ? Under what circumstances should setId ( ) be called ? Seamgen is all well and good for getting a sort-of-working CRUD application up and running , but the generated files invariably need to be edited / adapted / customized and without documentation for how they are intended to be used , each end user developer must guess at what the seamgen framework intends . . 
During the execution of one JSF request , I noticed a lot of calls to the org.jboss.seam.Component.hasAnnotation method . Couldn t this information be cached somewhere ? I know the reflection API is quite fast but in this particular context , couldn t all the metadata of a component be stored as class members of the Component class ? I know some if already is but I found something that could be added . In the org.jboss.seam.contexts.ServerConversationContext class , the following method seems to be called hundreds of times per request : Code : private boolean isPerNestedConversation ( String name ) { Component component = Component.forName ( name ) ; return ( component ! = null ) & amp ; & amp ; component.beanClassHasAnnotation ( PerNestedConversation.class ) ; } Could t a perNestedConversation class member be added on the org.jboss.seam.Component class and initialized when initializing the component instead of looking for the annotation every time ? This is just one example . I haven t looked everywhere where the org.jboss.seam.Component.hasAnnotation is called but perhaps similar optimizations could be done elsewhere . . 
This can be done with the annotations , but not from within a pageflow XML . . 
Currently instrumentation is done through a custom classloader . If it was done at build time , the classes could be deployed to WEB-INF/classes . 
I don t see any reason why Query can not be defined as Query & lt ; T , E & gt ; rather than Query & lt ; T & gt ; . The general design of Query is that it operates on a static base query ( only the conditions are dynamic ) . Therefore , the item type in the result list should be anticipated . In any case , if it is not , you can always define it using the generic type Object . To cite an example , we start with : public class EntityQuery & lt ; E & gt ; extends Query & lt ; EntityManager , E & gt ; { } We can use it as : public class CategoryQuery extends EntityQuery & lt ; Category & gt ; { } CategoryQuery q = new CategoryQuery ( ) ; for ( Category c : q.getResultList ( ) ) { // didn t need to cast ! } On the other hand , if the query component is defined without the type , it will still work . The type will be treated as java.lang.Object . public class CategoryQuery extends EntityQuery { } . 
Page actions currently have one severe quirk . If multiple page actions are configured for a view-id pattern , they all execute without checking whether or not a navigation has occurred ( a navigation match was found ) . What is even more strange is that even when a navigation match is found and the JSF NavigationHandler has processed the navigation , the actions just keep on executing . I can not imagine that invoking the navigation handler multiple times was anticipated behavior . Even if it is , the developer is still going to be massively confused which navigation event is going to actually stick . Here is the current logic : for ( Action action : getActions ( ) ) { if ( action.isExecutable ( ) ) { String outcome = action.getOutcome ( ) ; String fromAction = outcome ; if ( outcome==null ) { fromAction = action.getMethodExpression ( ) .getExpressionString ( ) ; result = true ; outcome = Pages.toString ( action.getMethodExpression ( ) .invoke ( ) ) ; Pages.handleOutcome ( facesContext , outcome , fromAction ) ; } else { Pages.handleOutcome ( facesContext , outcome , fromAction ) ; } } } I think that the short-circuit that needs to take place is that if the response is marked as complete ( which indicates a redirect navigation ) or if the UIViewRoot changed ( which indicates a non-redirect navigation ) , then the actions should stop executing . We should definitely include a test case if we make this change . Its too important to screw up . If there is a desire to maintain the previous behavior , then I believe a flag should be added on the page element like so & lt ; page short-circuit-actions= false & gt ; . 
Currently , it is not possible to assign the value of a Enum property using the component configuration mechanism ( components.xml or * .component.xml ) . Enums are very easy to support since Java 5+ has a built-in mechanism for translating strings into Enums . This support can be added by registering an EnumConverter in Conversions . It works much the same way as the JSF enum converter . . 
Seam does not provide any notification when an out of date schema or DTD is used in pages.xml , the file is transparently downloaded from the jboss website with every time a page is viewed , resulting in a major performance degradation . Seam should provide some indication to the developer that this is happening ( probably throw an exception , I can not think of any use case where you would want this behavior ) . . 
I d like a org.jboss.seam.postLogout or maybe org.jboss.seam.postSessionInvalidate to observe . ( I need to redirect the user to our single signin/out server ) . . 
I can use dot qualified component names in EL . ( I.e , I can use # { org.jboss.seam.security.identity.username } in my page instead of # { identity.username } ) . However , I can t do the same for @ Factory variables ( and presumably other kinds of non-component context variables ) . I d like to . . 
Extend the behaviour of Remember-Me to automatically authenticate the user after they have selected the Remember Me service rather than have him or her re-enter their password each time . . 
Conversation id generation should be managed by a component that can be overridden for specific deployments . We might even consider providing a more interesting default ( or optional ) strategy like a GUID . . 
When a component template class is being configured ( such as EntityHome , EntityQuery , etc ) , the class attribute should be considered prior to deriving the class name from the namespace info + XML element name . By first consulting the class attribute , it can prevent the case where two components are being configured for the same name when the developer intends only to use the XML declaration for component configuration . Case in point : Let s say I create a class that extends EntityHome to provide some extra behavior . @ Name ( myEntityHome ) public class MyEntityHome extends EntityHome { } Now I want to configure the properties of this class in components.xml & lt ; framework : entity-home name= myEntityHome class= org.example.model.MyEntityHome & gt ; & lt ; framework : created-message & gt ; You created it ! Yeah ! & lt ; /framework : created-message & gt ; & lt ; framework : updated-message & gt ; You updated it ! Yeah ! & lt ; /framework : updated-message & gt ; & lt ; framework : deleted-message & gt ; You deleted it ! Yeah ! & lt ; /framework : deleted-message & gt ; & lt ; /framework : entity-home & gt ; If the class attribute is not consulted , it will look for a @ Name annotation on org.jboss.seam.framework.EntityHome rather than org.example.model.MyEntityHome . When it doesn t find one on the built-in class , it tries to create a new component definition . Why would I want to use XML namespace tags in this case ? Simple . Tag completion and property recognition support . Note that this works if the class resolved from XML namespace + element name is the same as the component class . In the case when the component class extends the built-in class , you get this problem . . 
& lt ; page ... & gt ; & lt ; navigation ... & gt ; & lt ; rule ... & gt ; & lt ; raise-event type= event1 / & gt ; & lt ; raise-event type= event2 / & gt ; & lt ; /rule & gt ; & lt ; /navigation & gt ; & lt ; /page & gt ; or even & lt ; page ... & gt ; & lt ; raise-event type= event1 / & gt ; & lt ; raise-event type= event2 / & gt ; & lt ; /page & gt ; . 
I am having some political problems getting this into Tomahawk ( which is living in a java 1.4 world ) . The work is here and it s tested . I think this would be a good addition to Seam , considering that Seam has done so much w/ the other stuff that came out in 1.5 . I intend to document this , so please advise on what the protocol is . Also , I looked around the code base and couldn t find a faces-config to register these . . 
It may be desirable to nullify any injected dependencies when the invocation ends . . 
Make LocalDispatcher not dependent on javax.ejb.Timer . I m attempting to create a port of the @ Asynchronous annotation for Spring . ( ) It would appear the correct way to do this would be to create a Spring Dispatcher component that would override the core Dispatcher component . However , the LocalDispatcher Interface is dependent on javax.ejb.Timer I can probably wrap my spring dispatch implementation into the javax.ejb.Timer but it would be nice if a seam version of javax.ejb.Timer were created so that the j2ee.jar would not be required for users who wish to use @ Asynchronous under a web container . . 
Identity should raise events for a successful login and a failed login , and the JSF-specific code in Identity should be refactored into a separate component ( SecurityMessage ? ) , which is based on these new event types . . 
When using JBoss Identity for server delegated security authentication using the jaas-config-name attribute in security : identity XML element inside JBoss SEAM components.xml file and deploying that on BEA WebLogic Server then the authentication is always failing if the default WebLogic JAAS module is used . Follows the WebLogic server JAAS configuration file content : myrealm { weblogic.security.auth.login.UsernamePasswordLoginModule required authOnLogin= true debug= false ; } ; The problem is that the WebLogic server passes JAAS callback weblogic.security.auth.callback.URLCallback on which Seam throws an UnsupportedCallbackException class exception . To make this functionality to work you have to either 1 ) create custom JAAS module for WebLogic server 2 ) Extend org.jboss.seam.security.Identity and org.jboss.seam.security.RuleBasedIdentity classes to override protected CallbackHandler getDefaultCallbackHandler ( ) method and include a new else branch before the default that throws UnsupportedCallbackException } else if ( callbacks & # 91 ; i & # 93 ; .getClass ( ) .getName ( ) .equals ( weblogic.security.auth.callback.URLCallback ) ) { // deliberately ignored . } 3 ) Include the code in 2 inside the JBoss Seam Identity class - not having the User to debug why it is not working and then to create a new class to extend that in order to make it workable In my opinion performing 3 will be the easier from User s point of view and will allow Seam to use WebLogic JAAS server authentication without any coding from JBoss Seam User point of view . Note that the proposed code doesn t depend on any BEA WebLogic specific classes . . 
It would be useful for the @ Observer annotation to specify multiple events to watch for e.g . @ Observer ( somethingChanged , somethingElseChanged ) . 
Use of EL at no-conversation-view-id . 
Instead of : & lt ; rule if-outcome= redirectToDocument & gt ; & lt ; redirect view-id= /wiki.xhtml & gt ; & lt ; param name= nodeId value= # { documentHome.instance.id } / & gt ; & lt ; /redirect & gt ; & lt ; /rule & gt ; I d like to be able to do : & lt ; rule if-outcome= redirectToDocument & gt ; & lt ; redirect url= # { wiki : renderURL ( documentHome.instance ) } / & gt ; & lt ; /rule & gt ; which would give me a nice URL without rewriting acrobatics . . 
In our project we would like to use the JBoss Seam Scanner class to browse over our EJB classes in search for our custom @ Config annotations ( see ) . Unfortunately the handleItem method on the Scanner class is only package visible . This prevents generic reusability of this really powerful Scanner class . Could you guys make the handleItem method public ? Thanks , Frank . . 
MockServletContext should look in WEB-INF/classes for resources as well as in the root . . 
I have recently run into a requirement where it would be nice to have descriptions applied to wildcard view-ids . For example , if I have the following : Code : & lt ; page view-id= /section/ * conversation-required= true & gt ; & lt ; description & gt ; Section 1 & lt ; /description & gt ; & lt ; /page & gt ; Section 1 would be the description for all pages in /section/ * unless specified otherwise in a higher precedence page definition . . 
In AbstractFilter.java , someone took this from Tomcat : / * * Pattern matching code , adapted from Tomcat . This method checks to see if the specified path matches the specified pattern . @ param request ServletRequest The request containing the path @ return boolean True if the path matches the pattern , false otherwise * / public boolean isMappedToCurrentRequestPath ( ServletRequest request ) What we really need is url-pattern= { regex } . Drop the Tomcat pattern nonsense with the wildcards and use a regex . Probably needs to be backwards compatible now with an additional url-pattern-regex= { regex } property . Usecase : Filter /servlets/ * AND /Feed/ * . . 
We need to enhance JSF s navigation rules facility to support the following : & lt ; navigation-case & gt ; & lt ; from-action & gt ; # { searchAction.search } & lt ; /from-action & gt ; & lt ; to-view-id & gt ; searchResults.jsp & lt ; /to-view-id & gt ; & lt ; redirect & gt ; & lt ; param name= searchPattern & gt ; # { searchAction.searchPattern } & lt ; /param & gt ; & lt ; /redirect & gt ; & lt ; /navigation-case & gt ; What I propose to do is introduce a navigation-rules.xml file and reproduce the functionality of JSF navigation rules in Seam ( yuck ! ) . . 
It would be nice to provide a way to globally configure the flushmode setting . Say , a way to configure begins to use flushmode=MANUAL by default . Maybe this could be configured in components.xml . This would save a lot of what is generally boilerplate configuration since this is common usage . Perhaps , I could specify : & lt ; core : manager conversation-flushmode= MANUAL / & gt ; . 
We need new functionality in jBPM to allow us to navigate to a process from an entity related to the process . . 
Is it possible to add another addFromResourceBundle method to class FacesMessages which would accept a JSF component id parameter ? This enhancement would make it easy for a session bean to display a localized message from the resource bundle against a specific JSF input field . . 
Introduce a method for constraining the object graph that is returned from a remote request . Currently the remoting API recursively walks the object graph of the return value and packages up everything that is referenced either directly or indirectly by the result . This is potentially a bad thing as it is quite possible to unintentionally return a mountain of unwanted data . This issue can be addressed by annotating the @ WebRemote methods with an additional annotation , @ Constrain and including a list of trim-points , paths within the object graph that should be excluded from the result . For example , a remotable method returns a Customer entity , which contains references to a Rep/Staff entity : Customer id firstName lastName rep - & gt ; Staff firstName lastName userName password In this example it is undesirable to return the Staff instance , as it contains sensitive information ( their password ) . To prevent this , the method would be annotated like so : @ WebMethod @ Constrain ( rep ) public Customer getCustomer ( int customerId ) { } The @ Constrain annotation would accept a String array parameter , which allows multiple trim-points to be specified . Dot notation would be used to exclude fields further down the object tree , e.g . @ Constrain ( { rep.username , rep.password } ) would include the Customer s rep field , but exclude the rep s username and password field from the result . . 
In org.jboss.seam.interceptors.BusinessProcessInterceptor , private void createProcess ( String processDefinitionName ) should be made public . . 
Equivalent of @ Startup ( depends ) for components.xml . Specify several component names space-separated . . 
Support for the most common use case of wanting to handle classes with a custom annotation . . 
Create an example of two seam WAR applications inside of an EAR . There has been quite a bit of forum traffic on the subject and it would be good to nail down an example and document . There may also be errors and other issue that need to be worked out . An admin console type application to the standard booking application may be a good way to go . It would be a real world/useful example . . 
Currently , package-info.java is required when referring to custom Seam components in components.xml . However , to further align Seam with the convention over configuration philosophy , this file can be optional by making some assumptions : 1 . In the absence of package-info.java , the XML namespace in components.xml for custom components has a well-defined mapping to a Java package 2 . This mapping can be defined as : a . The XML namespace must be parsable by java.net.URI otherwise automatic mapping is aborted a. Protocol ( scheme ) , the www/ subdomain , port , query parameters , anchors ( references ) , and userInfo are ignored , if present . b . The top-level domain becomes the root Java package c. Subdomains become Java packages under the root package , applied in right-to-left order as specified in the URI . d. The path , as returned by URI.getPath ( ) , is mapped to further Java packages such that each path element becomes another Java package appended in left-to-right order Examples : == & gt ; com.company.department.product == & gt ; com.company.department.product == & gt ; org.company.department.product abc : //company.org/department/product == & gt ; org.company.department.product company.net/foo/bar/baz == & gt ; net.company.foo.bar.baz JIRA isn t displaying my last example correctly . See for the last example . . 
ContextListener objects would receive notifications of events like destroyContext ( ) , getValue ( ) , setValue ( ) , etc . . 
these things should all be doable via components.xml or seam.properties : Seam.Remoting.setPollTimeout ( 2 ) ; // 10 seconds Seam.Remoting.setPollInterval ( 1 ) ; // 1 second Seam.Remoting.setDebug ( true ) ; . 
This is useful : . 
We need the following to allow Seam users to optimize their application s HTTP communication : A new method called selectOutputStream ( ) in AbstractResource that is able to GZIP content if supported by the browser , transparently to the actual AbstractResource implementation . Although this is the job of Tomcat , it sometimes for unknown reasons does not compress a resource representation . A new CacheControlFilter that provides cache-control headers , configurable in components.xml : & lt ; web : cache-control-filter name= resourcesCacheControlFilter regex-url-pattern= . * ( \.gif|\.png|\.jpg|\.jpeg|\.css|\.js ) value= max-age=86400 / & gt ; & lt ; ! -- 1 day -- & gt ; A new alternative to AbstractResource called ConditionalAbstractResource which provides the sendConditional ( ) method that can , using entity tags and last modified timestamps , return a 304 Not Modified instead of the actual resource representation . This is used by browsers after an item in the local cache expires , Seam users can subclass ConditionalAbstractResource to define the entity tag and last modified validation conditions . . 
Add a property of type Principal and another property ( maybe of type Group ? ) to Script . The Principal should be used by the MockHttpServletRequest to represent and authenticated user . The Group property should be used by the MockHttpServletRequest to support the isUserInRole ( ) implementation . These properties ideally should be settable by overriding the setup ( ) method of Script . . 
Make it possible replace conversationId with something else , such as cId . This will help to keep URLs tidy and good looking . . 
MultipartRequest can not easily be mocked for unit testing . This could be solved by ( 1 ) making that type into an interface , or ( 2 ) changing the constructor so that the wrapped HttpServletRequest body is not parsed when the constructor is invoked . See the forum link for more details . . 
Right now it is difficult to create UrlRewrite rules because the order of the parameters jumps around . This happens because the parameters are appended to a plain HashMap ( for s : link , s : button , etc ) , giving no guarantee to their order . My feeling is that parameters should maintain their insertion order , which can be accomplished using a LinkedHashMap . At first , I thought about having the parameters sorted alphabetically . However , that takes control away from the developer to order the links how they see fit . As long as we can document the order in which Seam appends parameters , then the developer can predict the order the parameters will appear in the URL . . 
Where the Seam-managed persistence context name is assumed , the default for Hibernate should be hibernateSession rather than session . Between Seam and the Java Servlet API , the name session is too overloaded . . 
Just about the only setting that we still need to configure in faces-config.xml is the collection of supported locales . The Application class in the JSF API exposes the public method setSupportedLocales ( Collection ) to configure this collection . To support this feature request , a new application-scoped component will need to be created in the international package . The LocaleSelector can not be used since it is per user session . . 
It would be really cool to tie in EL expressions directly with Seam remoting . For example , take this method call : Seam.Component.getInstance ( helloAction ) .sayHello ( nameValue , sayHelloCallback ) ; instead , this could be rewritten ( and tied into the page context ) like this : Seam.Remoting.pageContext.set ( name , nameValue ) ; Seam.Remoting.evaluate ( # { helloAction.sayHello ( name ) } , sayHelloCallback ) ; This is not a perfect example , however it demonstrates the potential of this feature . Plus it makes remoting more consistent with the rest of Seam . . 
Imagine a scenario like this . Some client calls someMethod ( ) on a component called Foo . BijectionInterceptor tries to inject Foo s @ in attributes , one of which requires calling a factory method on Bar . Bar s factory method in turn calls Foo.someOtherMethod ( ) . Foo is not in a state where it can support method calls , because it is in the process of injecting dependencies , so this sort of cyclic dependency should not be allowed . Seam should throw an exception in this case . BijectionInterceptor used to be coded such that someOtherMethod ( ) would run without any complaints , and any @ In attributes may or may not be null , depending on which fields were injected first . Recent changes to BijectionInterceptor ( for ) have changed this behavior , and now an finite loop results . Neither of these behaviors is desirable . . 
Currently only java.util.Date and descendent are supported as type for fields containing date values . Objects of type java.util.Calendar are also commonly used and in case of legacy code these objects can not be ( directly ) used by Seam Remoting . It would be an improvement if objects with Calendar fields could be used on the client side . . 
Add Excel tests that uses the Render component to work on .xhtml documents and JExcelAPI to inspect the result . 
Support & lt ; e : cell & gt ; # { person.age } & lt ; /e : cell & gt ; in addition to the value attribute . 
I think org.jboss.seam.core.Validators should implement and interface , so that it could be possible to replace it with one that doesn t use org.hibernate.validator.ClassValidator I guess with that we could say that Seam can be used in a 100 % free of Hibernate way I really like Hibernate , but sometimes , for really simple projects , or for projects full of interactions with stored procedures , it might be overkill or innapropiate , so it would be nice to be able to use Seam without having any Hibernate dependencies . . 
Spring Security uses a security context integration filter that wraps the HttpServletRequest so that the security framework can respond to getUserPrincipal ( ) , getRemoteUser ( ) , and isUserInRole ( ) . We should support this style of integration with our Identity component , especially since Seam prides itself on making standard Java EE stuff work . In fact , doing so is ridiculously easy . . 
I have a need where I would like to have an el expression in the view-id of a pageflow . I ve looked a bit at themes ; and while I might be able to do what I want by replacing the template.xhtml dynamically , I don t ( at least initial ) like indirection . I believe the patch for this functionality is reletively trivial . Altough , I very well could have missed something . Basically , I modified the Page.getViewId ( ) method to evaulate the value returned and replace any el expressions . I also modified the Number Guess example to use this feature . I have attached an initial patch as a proof of concept if it is of any interest to the Seam developers . & # 8211 ; JC . 
Might be convenient to relax required=true during lifecycle callbacks ( but don t forget the EJB3 callbacks @ PostCostruct/ @ PreDestroy/ @ PrePassivate/ @ PostActivate ) . 
USAGE The Action Params feature allows you to specify parameters when using the EL to call an action . So I can have something like this : & lt ; s : commandButton action= # { hotelBooking.bookHotel ( hotel , user ) } class= button value= Book Hotel / & gt ; The parameters hotel and user will be evaluated as ValueExpressions and passed into the bookHotel method of your managed bean . This gives you an alternative to @ In which forces injection to happen on every action method called . You can also pass in literal Strings using single or double quotes : & lt ; s : commandLink action= # { foo.bar ( Here is my message ) } value= Click Here / & gt ; & lt ; s : commandLink action= # { foo.bar ( Here is my message ) } value= Click Here / & gt ; You might want to use this notation for all of your action methods , even when you don t have params to pass . This improves readability by making it clear that the expression is a MethodExpression and not a ValueExpression : & lt ; s : link value= Cancel action= # { hotelBooking.cancel ( ) } buttonClass= button linkStyle= button / & gt ; This is very handy for passing in JSF implicit objects : & lt ; page view-id= /mypage.jsp action= # { foo.myMethod ( facesContext , view ) } / & gt ; If you desire , you can still use the operator for your method as defined in the EL spec . If you do , you should put both the method and the params inside the : & lt ; s : commandLink action= # { foo [ bar ( facesContext ) ] } value= Click Here / & gt ; NEW TAGS As seen in the examples , Seam now has two new tags : & lt ; s : commandButton & gt ; & lt ; s : commandLink & gt ; These are drop-in replacements for & lt ; h : commandButton & gt ; and & lt ; h : commandLink & gt ; . For Facelets , the class attribute is added just as it is in the Facelets implementation of the corresponding tag . Note that these are JSF 1.1 style tags so they will not always work properly with & lt ; c : forEach & gt ; . Fixing this requires that the tags be written in the JSF 1.2 style . So , this can be fixed if and when we can assume JSF 1.2 is present . OLD TAGS & lt ; s : link & gt ; now supports action params . Actions defined in pages.xml now support action params as well . FACELETS SUPPORT To enable action params in Facelets , you will need to use the new SeamFaceletViewHandler instead of FaceletViewHandler . So , in faces-config.xml you will have : & lt ; application & gt ; & lt ; view-handler & gt ; org.jboss.seam.ui.facelet.SeamFaceletViewHandler & lt ; /view-handler & gt ; & lt ; /application & gt ; ISSUES Normally , when a MethodExpression or MethodBinding is created , the parameter types are passed in by hand . In the case of an action , JSF assumes that there are no params to pass . With action params in an expression , you can t know the param types until the parameters are evaluated . Evaluation of the params doesn t happen until the MethodExpression is invoked . This has two minor consequences : 1 ) If you call invoke on the MethodExpression by hand , any params you pass may be ignored . Params defined in the expression will take precedence . 2 ) Since Facelets uses MethodExpression instead of MethodBinding , you would normally be able to call myMethodExpression.getMethodInfo ( ) .getParamTypes ( ) at any time . For an expression containing action params , you will only be able to do this after the method has been invoked at least once . Both of these cases are exceedingly rare and only apply when you want to invoke the MethodExpression by hand . Unlike other MethodExpressions and MethodBindings , with action params the method to invoke must be determined from the expression itself . It determines the right method based on these criteria : 1 ) The method name must match the method name in the expression 2 ) The number of parameters must match the number of params in the expression . It is possible , though unlikely , that more than one method will match the criteria . In that case , an exception is thrown explaining the criteria . I can probably fix this at some point , but it gets a little hairy . . 
People often report the their authentication method is called more than once . While there are many different conditions that can lead to this problem , the most common is developers using # { identity.loggedIn } for conditional rendering in the UI . Contrary to popular understanding , the # { identity.loggedIn } ( alternatively written as # { identity.isLoggedIn ( ) } ) is not a simple JavaBean-style accessor method . It will attempt to perform a login if the user is not currently authenticated , thus making this method unsuitable to be used in the UI for conditional rendering . While nothing troublesome happens on successful login , when the login fails , or a guest user is browsing a page that calls this method , Seam triggers the authentication method at these arbitrary points in time . A very simple workaround is use either # { identity.isLoggedIn ( false ) } or to simply create a new method on the identity component that merely checks if the user principal is null or non-null . public boolean isAuthenticated ( ) { return getPrincipal ( ) ! = null ; } In the UI you can now use # { identity.authenticated } , which is now the preferred way to check if the user has a security principal . Note : You only see the double message if you add a FacesMessage in the authenticate method . If you use Seam s built in authentication messages , you don t get the double message because the quietLogin ( ) method ( called by isLoggedIn ( ) ) skips adding the messages . You aren t privy to the information of whether the authentication method was called by quietLogin ( ) for your own message registration purposes . . 
Add a preserve-order attribute to map and set properties that would allow the ordering to be preserved . . 
If the Jpa Permission Store is used and a rule-based-permission-resolver and a persistent-permission-resolver is configured , the order for looking up permissions is : 1 ) DroolsFile , 2 ) persistent-permission-resolver 3 ) Other permission-resolvers what implments the permission-resolver interface It would be nice if it s possible to change the order for looking up the permissions . 
Create a Seam project using Jboss Tools 2.1.2 . Create a new Seam Form with name SeamDateForm Open the file SeamDateForm.java and change the value from Integer to java.util.Date . Right-click seamDateForm.xhtml and click Run As ... - & gt ; Run On Server . Write something in the form ( like for example some random string dfasdf ) You will get the error : Conversion Error setting value dfasdf for null Converter . Now create a Date Converter , as the one included in the attached test case project ( BTW it inherits from javax.faces.convert.DateTimeConverter ) . Stop the application ( just to be 100 % sure everything gets loaded correctly ) Again : Right-click seamDateForm.xhtml and click Run As ... - & gt ; Run On Server . Write something in the form ( like for example some random string dfasdf ) Now you get the right error : value must be a date , eg . 10/13/2008 . Of course it not only fails when you write a random string , even if you write a correct date , like 01/01/2001 , you will get an error that says : Conversion Error setting value 01/01/2001 for null Converter . But if you write your own converter ( for example inheriting from javax.faces.convert.DateTimeConverter ) everything works fine . I think Seam should use javax.faces.convert.DateTimeConverter by default , I shouldn t need to create my own converter . . 
Folks often request for restrictions to be combined with OR rather than AND . This very much depends on the use case , so it makes sense to give the developer the option . Obviously , there are limits to how the restrictions on Query can be used , but I think this at least opens up a couple more use cases before extension is necessary . . 
There is really no use case where the debug.xhtml should become part of a workspace ( switching enabled ) . Obviously , this only affects development since the debug page isn t even present in production . Right now , when you visit the debug page and inspect a conversation , it becomes the last viewed page in that conversation , which is really annoying . . 
It s absolutely critical that the HotDeployFilter only be applied to JSF requests or else the scanning that it does occurs for every related requested by the page . However , currently none of the XML schemas for the component descriptor recognize this filter as a configurable element . Here is how it has to be configured now : & lt ; component name= org.jboss.seam.debug.hotDeployFilter & gt ; & lt ; property name= urlPattern & gt ; * .seam & lt ; /property & gt ; & lt ; /component & gt ; I would like to do one of two things . # 1 Change the component name from org.jboss.seam.debug.hotDeployFilter to org.jboss.seam.web.hotDeployFilter ( but still keep it in jboss-seam-debug.jar ) , then add the hot-deploy-filter element to web.xsd . We would get this : & lt ; web : hot-deploy-filter url-pattern= * .seam / & gt ; We could even consider moving this filter into jboss-seam.jar because honestly it is so lightweight and really has everything to do with the core and is already controlled by the debug mode flag in Seam . # 2 Keep the component name as is and introduce a new namespace and a corresponding package-info.java and debug.xsd . Then add the hot-deploy-filter to debug.xsd . We would get this : & lt ; debug : hot-deploy-filter url-pattern= * .seam / & gt ; I really hate solution # 2 . The only redeeming quality is that it doesn t break applications that might rely on this component name . But then again , it would only affect debug mode , not production apps . . 
The possibility to kill the conversation stack with the s : conversationPropagation is missing in v2.1.1.CR1 . It is possible to do that via annotation @ End ( root=true ) , the API or with pages.xml , but not with the s : conversationPropagation tag that may use to begin/end/join etc ... a conversation Maybe by adding another enum for type like endAll ? : & lt ; s : conversationPropagation type= endAll / & gt ; . 
Currently , JpaIdentityStore uses the username as salt when hashing the user password . If you want to use a different property as salt , you need to override JpaIdentityStore . Since the salt is usually stored together with the user principal , it would be easier to select the property used as salt by annotating it , without having to override the IdentityStore component . Using a randomly generated salt is a generally accepted practice , so it should also be possible to generate the salt value automatically when creating the user via IdentityManager s API . Suggestion : A new annotation , UserPasswordSalt , to annotate property used as salt . Attributes : generate=true|false & # 8211 ; whether to generate random value length=salt length in bits ( used when generate=true ) Example usage : class User { @ UserPasswordSalt ( generate=true , length=64 ) String getSalt ( ) { .. } @ UserPassword ( hash= sha1 String getPasswordHash ( ) { ... } } . 
Especially for the pageflow built-in component , we need to be able to specify that a component has an instance per nested conversation . This could be addressed as a new scope ( NESTED_CONVERSATION ) , or it could be a tweak on CONVERSATION scoped components . . 
I hate seeing : @ In ( create=true ) EntityManager em everywhere . Perhaps we need some kind of @ Startup component for conversation scope ? . 
Currently I am using the fix I proposed for . This allows me to manage and pass additional pages.xml files to the Pages component . The problem is that for the exception definition the Exceptions component only looks at the WEB-INF/pages.xml . I propose either refactoring the processing of the exception nodes into the Pages component so that any pages.xml that is processed can define exception handlers . An alternate implementation would be to have the Pages component to notify the Exceptions component of each pages.xml it processes . This way the specific can still be encapsulated in the Exceptions compoent , but it is fed the pages.xml files to use . . 
Seam currently allows combinations such as : @ Stateless @ Name ( NoConversationHere ) @ Scope ( ScopeType.CONVERSATION ) Which make no sense and can cause problems . If possible , Seam ( or Web Beans ! ) should check for such things and WARN/ERROR on deployment . . 
We would like to create our own implementation of the org.jboss.seam.log.Log interface , like it is done in the org.jboss.seam.log.LogImpl class . The goal is to enrich the log message by adding some information . Because the org.jboss.seam.log.Logging.getLogProvider ( String , boolean ) method has a default access mode , it is only callable from a class in the same package ( which is the case for LogImpl ) . So the feature request is : please make the org.jboss.seam.log.Logging.getLogProvider ( String , boolean ) method as public . The workaround is to call the method by introspection : Method m = Logging.class.getDeclaredMethod ( getLogProvider , new Class { String.class , boolean.class } ) ; m.setAccessible ( true ) ; LogProvider log = ( LogProvider ) m.invoke ( null , new Object { category , wrapped } ) ; . 
In a Hibernate XML mapping file you can load an XML entity declaration from the classpath . The same resolver should be used in Seam . . 
CSV export should take user defined separation character ( ; or tab ) , should have wrapping optional , and probably even allow fixed length column export . . 
In the Component class , Interceptors are separated between client-side and server-side interceptors by mean of the @ Interceptor s InterceptorType type property ( see Component.addInterceptor ( Interceptor ) ) . The Interceptor s around and within properties allows to define the sort order ( see also Component.newSort ( List ) ) . Problem : Since the client-side and server-side Interceptors are stored in two different lists , and since client-side interceptors are prioritary over server-side Interceptors , the programmer may write around/within clause that are ignored . For example , he may want to put a server-side Interceptor around a client-side Interceptor . In the current Component code , these cases are simply ignored . Solution : In case of bad server-side / client-side mix in the Interceptor annotation definition , the newSort ( List ) method should raise a warning . Proposition : insert after line 1020 : if ( interceptorAnn.type ( ) ==InterceptorType.SERVER & amp ; & amp ; cl.getAnnotation ( Interceptor.class ) .type ( ) ==InterceptorType.CLIENT ) log.warn ( Interceptor clazz.getName ( ) : a server-side Interceptor can not be around the client-side Interceptor cl.getName ( ) since client-side Interceptors are always prioritary ) ; insert after line 1025 : if ( interceptorAnn.type ( ) ==InterceptorType.CLIENT & amp ; & amp ; cl.getAnnotation ( Interceptor.class ) .type ( ) ==InterceptorType.SERVER ) log.warn ( Interceptor clazz.getName ( ) : a client-side Interceptor can not be within the server-side Interceptor cl.getName ( ) since client-side Interceptors are always prioritary ) ; Pros : programmer friendly Cons : sorting takes ( a bit ) more time . 
Currently , jBPM uses its own forked EL ( which is a problem to begin with .... ) . This means that it can t see the s : functions . We need to fix this problem ASAP . . 
Currently it is not possible to specify a page parameter for a wilcard view-id in pages.xml . . 
Similar to what RoR is offering : Allow developers to declaratively map entities for CRUD through RESTful GET/POST/DELETE/PUT requests with customizable resource URI generation strategy . . 
We can allow some level of multi-client safety using a client-side interceptor . This can t do any better than plain ol synchronization though . . 
Currently org.jboss.seam.navigation.Pages is a major pain point since some of the methods are marked private and some are static ( don t know why ) . For example , selectDataModelRow ( ) is private and it s got this line if ( index & lt ; dataModel.getRowCount ( ) ) in it which I don t think is really necessary . This caused a lot of pain for us when we were trying to integrate it with RichFaces ExtendedDataModel and DataScroller . Basically when you re getting ranges from the database , the RowCount would query the database . So we had to avoid using @ DataModel and @ DataModelSelection completely . I know I can override installing the Pages component , but then I have to copy/paste pretty much everything from Pages to our CustomPages just to change a line , talk about anti-DRY . I can give you more details on this if you want . In addition , the other not so cool method is public static String getRequestScheme ( FacesContext facesContext ) which determines if a request is secure by looking at the URL . There are scenarios that you would want to override this method . Consider the case when you have an SSL accelerator . The accelerator will terminate the SSL connection and create a new HTTP connection to the app server . Now you have the option to pass an HTTP header when the accelerator decrypts HTTPS packets so you re app server knows that the request was originally secure ( so no need to redirect , or anything ) . This class has not been designed that well for extension and I think it can be improved . . 
Page actions are incredibly useful , but sometimes they can get in the way during a postback . I would like to see a postback attribute added to the & lt ; action & gt ; tag that can be used to disable the action on postback . It s possible using a conditional , but it is ugly and a lot of typing . Here is the logic that would go into Pages.java private boolean isPostBack ( FacesContext facesContext ) { return facesContext.getExternalContext ( ) .getRequestParameterMap ( ) . containsKey ( ResponseStateManager.VIEW_STATE_PARAM ) ; } The conditional alternative would be : & lt ; action execute= # { component.action } if= # { empty param } / & gt ; . 
Currently we assume a JNDI-bound EMF . If you are using JPA in Tomcat or J2EE , this will not be the case , so we should have a different solution . . 
optimize replication stuff for immutable objects / readonly methods . At class level : mark bean as not needing replication At method level : mark method as not changing state . 
In org.jboss.seam.core.Jbpm component would like the ability to specify jbpmConfiguration from jndi . 
Hi all , I don t really know what JIRA is by the way , so hopefully nobody is upset by this post . I first mailed Gavin but he told me I should put it in JIRA . I currently work on a project which uses Seam Remoting directly and I didn t find a neat way in handling errors on the client side as Exceptions are not propagated to it . Therefore I changed Seam to transmit all exceptions which can be handled in the javascript part via another callback . E.g . : Seam.Component.getInstance ( userManager ) .currentUser ( function ( user ) { alert ( user : + user ) ; } , function ( ex ) { alert ( exception occured : + ex.getMessage ( ) ) ; } ) ; As the exception handler is optional , the change would not brake any client code . If you are interested in the change , you can reach me at heinzbeinz AT googlemail.com . 
The conversation scope can be a problematic scope for FacesMessages . Often the developer may wish to end a conversation before-redirect and communitcate a message to the next page . However , this doesn t work since by default FacesMessages is a conversation scoped component . If FacesMessages were allowed to be a Session scoped component project wouldn t have this issue at the expense of a less correct concurrency situation ( multiple pages rendered at the same time from the same session may mix up messages ) . That said it would be nice to give the project a choice . The scope for FacesMessages can be overridden to be Session scoped , however , the static : instance ( ) method currently only looks in the conversation scope so the scope essentially can not be overridden . This feature request is to change FacesMessages.instance ( ) to not force lookup in the conversation scope allowing projects if they wish to override FacesMessages scope if they wish . I will plan on committing the change myself for 2.2.1 unless someone objects . . 
Query has not been well-designed for extension . . 
We should be able to define actions and parameters for a view in a viewId.xml file . This is important for seam-gen. . 
It is amazing that you can t do : collection.size datamodel.size datamodel.empty in EL . We can solve this with an ELResolver . 
get rid of the list of classes in addComponents ( ) move debug components to debug jar get rid of special casing in Scanner add @ Name ( foo , scannerIgnore=true ) . 
Let the components.xml file specify the @ JndiName . 
Before release , we have to review all logging and change all the infos to debugs . . 
& lt ; begin-conversation & gt ; should have the same options as @ Begin furthermore , & lt ; end-conversation & gt ; should have the same options as @ End . 
As Seam 2.3 should support EE6 features , it should include support for EJB 3.1 features , such as no-interface views and singletons . . 
The SynchronizationInterceptor currently contains public boolean isInterceptorEnabled ( ) { // JBSEAM-4943 return getComponent ( ) .isSynchronize ( ) & amp ; & amp ; getComponent ( ) .getType ( ) ! = ComponentType.STATEFUL_SESSION_BEAN ; } The logic should be moved to the Component.initSynchronize method and a warning should be generated telling the developer that the annotation is being ignored if the @ Synchronized annotation is present and the component is a SFSB . . 
This fix is for updates to components.xml to allow namespaces to be used to simplify component configuration . The ultimate goal is to be able to configure components like this : & lt ; core : init & gt ; & lt ; core : debug & gt ; true & lt ; /core : debug & gt ; & lt ; core : jndiPattern & gt ; @ jndiPattern @ & lt ; /core : jndiPattern & gt ; & lt ; /core : init & gt ; . 
Today , seam.properties must be packaged in the root of the ejb.jar file . This is ackward for tools like NetBeans where I need to write a custom Ant target to package it there . Ideally , seam.properties could exist in the meta-inf directory of the ejb.jar . Is this a possibility ? . 
Currently , it is not possible to evaluate an EL that refers to the current SFSB , since that would result in re-entrant call . We should have an interceptor that sets up a ref to current bean object ( not local interface ) in the request context ( should we introduce a method context ? ) . Put it in a request variable named this . . 
Just map them into a page context variable of the same name . . 
Why not just support this stuff for JavaBean components , its easy anyway . . 
jPDL allows us to make navigation decisions in EL instead of the Java code . This allows a lot of loose coupling and transparency . We should also support this for stateless navigation , ie : & lt ; page view-id= /loadCustomer.jsp & gt ; & lt ; from-action expression= # { customerHome.load } outcome= # { customerHome.found } & gt ; & lt ; from-outcome value= true & gt ; & lt ; render view-id= /displayCustomer.jsp / & gt ; & lt ; /from-outcome & gt ; & lt ; from-outcome value= false & gt ; & lt ; render view-id= /notFound.jsp / & gt ; & lt ; /from-outcome & gt ; & lt ; /from-action & gt ; & lt ; /page & gt ; It can reduce to : & lt ; page view-id= /loadCustomer.jsp & gt ; & lt ; from-action expression= # { customerHome.load } & gt ; & lt ; from-outcome value= success & gt ; & lt ; render view-id= /displayCustomer.jsp / & gt ; & lt ; /from-outcome & gt ; & lt ; from-outcome value= not-found & gt ; & lt ; render view-id= /notFound.jsp / & gt ; & lt ; /from-outcome & gt ; & lt ; /from-action & gt ; & lt ; /page & gt ; to emulate a normal JSF navigation rule . . 
The following ideas need to be followed through on : Multiple page actions per view id & lt ; page view-id= ... & gt ; & lt ; action expression= # { foo.bar } / & gt ; & lt ; action expression= # { xxx.yyy } / & gt ; & lt ; /page & gt ; there is a suggestion that the first non-null outcome short-circuits the stack & lt ; begin-conversation/ & gt ; , & lt ; end-conversation/ & gt ; for & lt ; action-navigation/ & gt ; & lt ; http-error/ & gt ; for & lt ; action-navigation & gt ; . 
It s better to do this declaratively than the ugly programmatic way I am doing it now . . 
Currently , you can have Seam boostrap a SF for you using a hibernate.cfg.xml file . There is no way to have multiple SFs started automagically . . 
To save a few more LOC , we could let you extend Controller , which gives you methods like getEntityManager ( ) , logError ( ) , addMessage ( ) ... . 
If a component uses @ Unwrap and @ Observer at the same time , Events.instance ( ) .raiseEvent ( ) attempts to invoke the observer method on the unwrapped object , which usually causes a NoSuchMethodException exception . . 
In both pages.xml and pageflow . . 
Norman pointed this out to me , it would be nice if we could support it . OpenID eliminates the need for multiple usernames across different websites , simplifying your online experience . They have a few Java implementations available for download on the following page . . 
To have the option of throwing an exception instead of returning a boolean value . . 
For performance , Identity should extend AbstractMutable and do dirty checking . 
to temporarily change the principal . 
There should be a config option on Identity to use the JAAS default configuration ( ie . login-config.xml ) instead of the SeamLoginModule . . 
Find some way to support these awful things . Probably have to parse headers ourselves . Just copy paste some code from Tomcat or Acegi or whatever ( whichever is the least obfuscated and over-designed ) . . 
To limit number of required jars in cases when role based security is used & # 91 ; without permissions & # 93 ; , drools jars could be excluded from required dependecies . . 
We can build some support for asynchronicity by layering on top of EJB timers . . 
This would allow use of a configurable name , and unit testability . . 
Something like this would work : & lt ; page view-id= /login.xhtml switch= disabled & gt ; & lt ; navigation from-action= # { identity.login } & gt ; & lt ; rule if= # { identity.loggedIn } & gt ; & lt ; end-conversation before-redirect= true / & gt ; & lt ; redirect view-id= # { conversation.parentViewId } / & gt ; & lt ; /rule & gt ; & lt ; /navigation & gt ; & lt ; /page & gt ; & lt ; exception class= org.jboss.seam.core.NotLoggedInException & gt ; & lt ; begin-conversation nested= true / & gt ; & lt ; redirect view-id= /login.xhtml / & gt ; & lt ; /exception & gt ; . 
Would be useful for debugging if the ConversationInterceptor.endOrBeginLongRunningConversation ( ) could add more information ( such as target method and object type ) to the IllegalStateException thrown when a @ Begin is encountered with a LRC in progress and nested/join is not set to true . . 
It would be nice if redirect directives would allow for message severities to be defined for them . This happens a lot for scenarios where exceptions cause a redirect . Instead of the user seeing an INFO message , we want them to see an ERROR or WARN FacesMessage . For instance , if a severity flag was added to the message , we could do this in pages.xml using the following : & lt ; exception class= org.jboss.seam.security.AuthorizationException & gt ; & lt ; end-conversation / & gt ; & lt ; redirect view-id= /myglobal/unprot/pages/login.xhtml & gt ; & lt ; message severity= error & gt ; Login failed . Please try again . & lt ; /message & gt ; & lt ; /redirect & gt ; & lt ; /exception & gt ; . 
This is important for inheritance .... . 
In an average Seam application we may use some or all of the following filters , which may grow to even more over time : SeamRedirectFilter SeamExceptionFilter SeamMultipartFilter SeamServletFilter It would be nice to be able to configure a single master filter , SeamFilter , which wraps all of these filters . We could possibly even make each of these filters application-scoped components , meaning they could be configured via components.xml instead of in web.xml . . 
When developing JSF converters and validators you are noticed that both of them have a way to add a FacesMessage when throwing the Exception ( ConverterException and ValidatorException respectively ) , the validator exception has this constructor : ValidatorException ( javax.faces.application.FacesMessage ) Currently there is FacesMessages.createFacesMessage ( .. ) method which returns a FacesMessage , but that method does not work if you wan na get a message from a resource bundle key ( when working with i18n apps ) . So , please add a new method which allows us to get a FacesMessage using a resource bundle key , something like : public static FacesMessage createFacesMessageFromResourceBundle ( Severity severity , String key , Objec t ... params ) . 
Create a Seam resource servlet for serving non-jsf resources , such as javascript , images , css , etc . It should replace SeamRemotingServlet and CaptchaServlet , and accept requests for something like /seam/resource/ * , and depending on the path delegate control to various resource providers , e.g : /seam/resource/remoting - delegate to Seam Remoting /seam/resource/captcha - delegate to Captcha image provider /seam/resource/jsfcontrol - delegate to JSF Control javascript provider ( JS resources for selectDate , etc ) . . 
As a simpler alternative to & lt ; restrict & gt ; # { identity.loggedIn } & lt ; /restrict & gt ; + & lt ; exception class= org.jboss.seam.security.NotLoggedInException & gt ; , we should allow you to use : & lt ; pages login-view-id= /login.xhtml & gt ; & lt ; page view-id= /main.xhtml login-required= true & gt ; & lt ; /page & gt ; & lt ; pages & gt ; Just like we have with conversation-required today . This would use special code in Page.enter ( ) , instead of exception handling to do its work . It would also add a message to the FacesContext ( just like Manager.noConversation ( ) does today ) . . 
I m not sure if this is actually right , but the booking example as an empty drl file . This should not be required . It should work even if you specify no rule base , or at leat no rule file for th rule base . . 
When an AuthorizationException is thrown in Identity.checkRestriction , it would be useful if an event is raised in the same way it is for a NotLoggedInException . A suitable event name might be org.jboss.seam.notAuthorized . 
Seam 1.1.6 CVS ( 14.02.2007 ) . 
In order to be able to send mails via gmail service it is required to set : mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory mail.smtp.socketFactory.port = 465 It would be good if it was possible to set additional options in the mail-session component . . 
@ DataModeSelection ( dataModel= names ) use scope of owning component for DataModel . 
As suggested by Gavin in the forum post , we should be able to suppress logging of specific exception types . That way people can decide whether they want NotLoggedInException etc errors cluttering up their log file . & lt ; exception class= MyException log= false & gt ; & lt ; /exception & gt ; . 
Currently we can start a pageflow from pages.xml , it would be good to be able to be able to create a process and start/end a task as well . . 
I m allow my users to change passwords and usernames while they are logged in . After such a change of credentials , I need to replace the principal in the identity component . This can currently only be done through logout ( ) and login ( ) , manually by the user . I want to do this automatically , and I don t want to destroy the session for that . . 
At the moment this can be achieved by Extracting the parent conversation id from Manager Calling endBeforeRedirect ( ) Doing a Redirect.execute ( ) manually . Would be handy just to be able to do Conversation.endAndRedirect ( true ) Either that or have a method to set the destroyBeforeRedirect flag . Conversation.setDestroyBeforeRedirect ( true ) ; Conversation.endAndRedirect ( ) ; . 
This should at least be an option . Its a performance and semantic improvement . . 
If the user uses only XML , Seam makes a mistake about what kind of component it is . . 
I think it s a good idea to let users avoid editing faces-config.xml when creating validators and converters . @ Converter ( id= .... ) public class FooConverter implements Converter { .... } @ Converter ( targetClass= .... ) public class FooConverter implements Converter { .... } @ Validator ( id= .... ) public class FooValidator implements Validator { .... } We would scan for these guys at startup , and register them with JSF . . 
JSF component that can take a byte/File/URL/InputStream as it s value , and display the image . Also allows image to be manipulated ( for now scaled ) . 
Let pages.xml navigation rules use redirect rules that are backed by value expressions . For example , & lt ; navigation from-action= # { simpleComponent.doSomething } & gt ; & lt ; redirect view-id= # { dynamicNavigationManager.nextPage } / & gt ; & lt ; /navigation & gt ; . 
There are situations where I would like to be able to destroy the entire conversation stack if a particular action occurs ( say a user cancels everything during a nested conversation , an exception occurs during a nested conversation , etc ) . I am currently accomplishing this through the following : private void endRootConversation ( ) { Conversation conversation = Conversation.instance ( ) ; while ( conversation.isNested ( ) ) { conversation.root ( ) ; } conversation.endBeforeRedirect ( ) ; } I would prefer to say something like @ End ( root=true ) or specifying conversationPropogation= endRoot . Similar discussions on the forum are : . 
use a transaction failed event rather than message . A FacesMessage should not be added by the SeamPhaseListener when the transaction fails . Instead , it should raise an event that would be observed by a component named FacesTransactionEvents . That observer would then add the FacesMessage to the response . This allows developers to override the behavior or perhaps add a JSF or log message . @ see FacesSecurityEvents . Implementation of StatusMessages for Wicket . 
Make ajax4jsf filter a seam component filter . It should @ Startup only on the existence of ajax4jsf in the classpath . It should have some of the ajax4jsf filter params available to be set such as forceparser . It must also execute before the RedirectFilter . . 
I d like to test for the presence of a FacesMessage for a particular component : FacesMessages.instance ( ) .add ( verify , Re-enter your password ) ; And in SeamTest subclass : assert getFacesContext ( ) .getMessages ( ? ? ? ) .hasNext ( ) ; // Msg for component As I don t have a component tree in my Script ( ) , the add ( ) method didn t assign the message to a component , so the only way I can test this is with getMessages ( ) .hasNext ( ) , instead of the more accurate getMessage ( ? component ? ) .hasNext ( ) . . 
We have moved our app from JBoss 4.2.3 to 5.1 and our page level messages.properties stopped to work correctly . After analyzing the issue , we traced the problem to the ResourceLoader loadBundle method which uses the getContextClassloader to load the bundles . In out app , the .properties files where located in the WAR root along with the faceltes .xhtml and the .page.xml , which use to work fine on 4.2.3 . It is my understanding that with 5.1 the classloader has changed , and the one retrieved via getContextClassloader does not have access to the ServletContext anymore , hence our properties file are not found any more . So , I suggest two things : 1 ) The documentation makes it explicit that the messages.properties file should be localed in WEB-INF/classes . The explanation for the page level messages.properties is instead a bit more open to interpretation . It could be good to reiterate there that also page level files need to go into WEB-INF/classes 2 ) Or , modify ResourceLoader to scan also the ServletContext for bundle files , which would make it compatible with apps that used to work on JBoss 4.2.3 . Notice that the other ResourceLoader methods already use ServletLifecycle.getServletContext ( ) , that is why .page.xml files can be nicely placed along .xhtml file in the context root . Thanks , Riccardo . . 
& lt ; s : download value= # { FileManager.getFileById ( 10 ) contentType= # { FileManager.contentType } / & gt ; We re going to create new ( more general component ) which allows the user to download a file ( any resource , Excel file , Document whatever ) . The plan is to create a new UI component named UIDownload which has attributes like value , contentType ( some more ? ) . 1 ) UIDownload a backing bean ( value ) ( is this still valid word in the seam world ? ) to generate the data ( allow byte , OutputStreams ? ) . 2 ) UIDownload creates DownloadResource which is stored in DownloadStore . 3 ) UIDownload generates HTML which redirects the browser to ResourceServlet 4 ) ResourceServlet then uses DownloadResource to get hold of the data and the pushes it to browser The reason for this is that we re building portlets with Seam and it s impossible to download files from a portal environment without additional servlet and we think it s good idea to reuse existing stuff . Patch coming soon ( if we can make it work . 
We need to put some proper thought into handling of concurrent requests in a conversation , and also duplicate form submission ( second is probably not an issue , cos conversations mainly solve the problem ) . At least we should catch the standard exception that EJB3 throws from concurrent access to an SFSB . . 
We need to allow easy redirection to urls with parameters . The redirect component will have the following operations : Redirect.setParameter ( String , Object ) Redirect.setViewId ( String ) Redirect.captureCurrentRequest ( ) Redirect.push ( ) Redirect.pop ( ) Redirect.redirect ( ) Redirect is a conversation-scope component that has a stack of viewId+parameters , so you can , for example , easily redirect to a login page from a Seam page action , and then redirect back to the requested page . . 
model validation on page param should be optional . When page parameters are being used to capture input for queries , it may not be appropriate to run the model validator on them . It should be possible to disable the model validator . However , the default would be that the model validator is enabled . . 
Request from the dev list to improve performance here . One suggestion was to provide a way to enable/disable the interceptor . I m still partial to using annotations to mark the entities that need to be processed , but disabling the interceptor would probably be the less disruptive approach . . 
Currently , the only way to define exception rollback rules is @ ApplicationException , which is a dependency to EJB3 . For some reason I closed without a better solution for this . There really needs to be two things : ( 1 ) An API to call to set the current tx to rollback only ( 2 ) some kind of @ Exception annotation that allows control of rollback and , potentially , ending the conversation We should possibly even deprecate the end ( ) member of @ HttpError and @ Redirect if we have this new thing . . 
It would be nice if Seam web filters could be ordered . Although I don t have a pressing need for this right now I think it would be something needed eventually . . 
When putting to orm.xml config for EntitySecurityListener & lt ; persistence-unit-metadata & gt ; & lt ; persistence-unit-defaults & gt ; & lt ; entity-listeners & gt ; & lt ; entity-listener class= org.jboss.seam.security.EntitySecurityListener / & gt ; & lt ; /entity-listeners & gt ; & lt ; /persistence-unit-defaults & gt ; & lt ; /persistence-unit-metadata & gt ; and trying to run unit tests the following exception is thrown java.lang.RuntimeException : java.lang.reflect.InvocationTargetException a:370 ) at pl.alternativ.med.pacjent.DeklaracjaPOZUnitTest.utworz ( DeklaracjaPOZUnitTest.java:78 ) Caused by : java.lang.IllegalStateException : No active session context Without EntitySecurityListener config in orm.xml tests runs fine . . 
I know this is probably a loaded issue but please hear me out . It would be nice if org.jboss.seam.util.Transactions was replaced with a Seam Component just like everything else in Seam . This would allow for pluggable Transaction Management providers and pave the way for support for Spring Managed Transactions , JPA Local Transactions , and true Hibernate Local Transactions . This will allow Seam applications to run without a dependency on microcontainer in tomcat and allow for tighter Framework integration with spring and others . I would personally be more than willing to do the work of making the an initial JTATransaction component ( s ) as a replacement for org.jboss.seam.util.Transactions and would also create a SpringTransaction component as a proof of concept for extending the Transaction component . One problem I can see off hand is we may have to interact with a transaction in some places where a Seam ApplicationContext is not available . However , I wonder if confining Seam transactions to a seam call might help simplify matters anyway ? For example transaction cleanup could take place in the @ Destroy of the transaction component instead of in the ExceptionFilter ? Also , this wouldn t be looked at as a JTA replacement but rather a service abstraction . Just like any other java webapp if you re using enterprise services such as EJBs or JCA JTA would be required . if you re running on tomcat or some other simple web container a resource local transaction manager ( Spring s abstraction , JPA s , or Hibernate s ) can be used . I m sure there are tons of other problems I m not looking at but worst case scenario this issue would be a great place to document them and to refer rejected feature requests . ( for example ) What do you think ? Mike . 
Currently , there is no way to plug in a user-defined strategy for decoding and encoding the conversationId in the request/response . We need this to really properly support AJAX/Soap invocations . . 
Support compiled groovy entities Support compiled groovy actions Support for deployed .groovy actions into WEB-INF/dev if in debug mode Support for hot redeployment of .groovy actions in debug mode when the hot filter is used . . 
We already have an ArrayDataModel , let s let it be used with @ DataModel . We should also allow use of @ DataModel with a Map . Essentially , this would result in a ListDataModel & lt ; Map.Entry & gt ; , but @ DataModelSelectionIndex would know to inject the map key instead of the row index , and @ DataModelSelection would know to inject the map value instead of the Map.Entry . We should probably even allow use with a Set . In this case , @ DataModelSelectionIndex is not defined . . 
Support .groovy entities and .groovy actions in WAR ( s ) Support dynamic Groovy files in dev mode ( for actions ) Support Groovy file compilation for entities and for actions in prod mode . 
SeamInterceptor should detect when no seam contexts have been set up , and set up at least an EVENT context . In practice , we really want some way to also set up CONVERSATION and PROCESS contexts , but this is a bit problematic , since we have no good way to pass in the conversation id and process/task ids . Need to think about that one ... . 
java : comp/UserTransaction is not always correct . 
Expose an addHandler method on the Exceptions component so that you can programatically add handlers . Optionally expose it as a protected method so that someone can extend the Exceptions component so that exceptions handlers defined in alternate locations can be added to the component . . 
It would be nice to be able to match up a DataModelSelection with a DataModel that is provided by an entity-query . As of now a deployment error is thrown . Use Case : If a data table is driven by an entity-query , the only way currently to select a row is by passing the var using the Extended EL Seam provides . The extended EL is not compatible with some component libraries ( Trinidad ) and it is very ugly to go through component bindings to get the current value of the selected row . It would be nice to hook a DataModelSelection to the entity-query . Something like this components.xml & lt ; framework : entity-query name= allUsers ejbql= select u from User u / & gt ; facelets page & # 91 ; code & # 93 ; & lt ; tr : table id= user_table value= # { allUsers } var= user & gt ; & lt ; tr : column id= user_column & gt ; & lt ; f : facet name= header & gt ; & lt ; tr : outputText id= user_header value= Customer / & gt ; & lt ; /f : facet & gt ; & lt ; tr : commandLink id= user_link text= # { useruserName } actionListener= # { attachUser.done } / & gt ; & lt ; /tr : column & gt ; & lt ; /tr : table & gt ; Seam Bean @ DataModelSelection ( allUsers ) List & lt ; User & gt ; userList ; . 
I m using the seam-gen generated class SubcategoriesList which is derived from EntityQuery and modified it to accept any query passed by a calling object as below : public class SubCategoriesList extends EntityQuery { private SubCategories subCategories = new SubCategories ( ) ; private String query ; private Integer maxResults ; public SubCategoriesList ( ) { query = select subCategories from SubCategories subCategories ; this.maxResults = 25 ; } @ Override public String getEjbql ( ) { return query ; } @ Override public Integer getMaxResults ( ) { return this.maxResults ; } public SubCategories getSubCategories ( ) { return subCategories ; } @ Override public List & lt ; String & gt ; getRestrictions ( ) { return Arrays.asList ( RESTRICTIONS ) ; } public List & lt ; SubCategories & gt ; forCategory ( String categoryId ) { query = select subCategories from SubCategories subCategories where subCategories.categories.id = + Integer.parseInt ( categoryId ) ; return getResultList ( ) ; } } In my calling object , I instantiate this class and use the method forCategory to get the list of subcategories for a given category id . If I reuse the object after calling refresh ( ) and pass a different category id , it gives the same resultlist . After looking in EntityQuery and Query classes , I see refresh ( ) does not nullify parsedEjbql and therefore createQuery ( ) uses the same query everytime to get the resultlist . . 
The logic for determining the location of the hot deployable directory for Java classes currently relies on the location and name of the jboss-seam-debug jar file . While this may work when the jar file is placed in WEB-INF/lib , relative to the WEB-INF/dev directory , and named jboss-seam-debug.jar , it breaks down when it is loaded by the application server by a different means or has a different name . For instance , when running a Seam application using Jetty from within Maven 2 , the location of the jar file is in the local repository . What I find particularly scary is the hard-coded string offsets : String hotDeployDirectory = path.substring ( 9 , path.length ( ) -46 ) + dev ; To get a better understanding of the problem , I added some logging messages to capture the path resolver logic when jetty builds its classpath from the maven repository . META-INF/debug.xhtml detected at jar : Hot deploy directory is /home/dallen/.m2/repository-public/jboss/seam/jboss-seam-debug/1.2.1.GA/jbossdev If I place the jboss-seam-debug-1.2.1.ga.jar file in the src/main/webapp/WEB-INF/lib directory , then things get a little bit better , but still not quite right . META-INF/debug.xhtml detected at jar : Hot deploy directory is /home/dallen/projects/connoisseur/src/main/webapp/WEB-INF/lib/jbossdev What I propose is for the WEB-INF/dev directory to be loaded using the servlet context . That way , it will always be the directory that is most likely located in the project of the developer . Since this feature is intended strictly for development , this seams to make the most sense . I will provided a patch for both Seam 1.2.1.ga and the trunk . . 
Class org.jboss.seam.remoting.InterfaceGenerator does not scan for WebRemote.class-Annotation in extended Business-Interfaces . 
I noticed that sessionId cookie sent to client before authentication remains the same even after login succedeed . This could lead to a man-in-the-middle attack because pre-login sessionId could be easily sniffed . So , it would be very nice if it should be possible to do a session switching on server side forcing a pre-login session invalidation and a new session creation ( request.getSession ( true ) ) as soon as client authenticates . Old session data should then be copied to new session . In this case a new sessionId cookie will be sent to client : client will use this ticket during next requests . This mechanism collides with the actual Seam implementations where Lifecycle.endSession is called after a session.invalidate I think that Seam should automatically execute this task during the authentication phase . . 
I m trying to bind a Map entry to h : inputText . The code below successfully extracts the value for the key when the page is loaded , but when I submit it , the page reloads with an error alongside the field : model validation failed : String index out of range : -1 . It appears that the s : validateAll that wraps h : inputText does not work properly when used this way ? ? ( Gavin suggested that I submit this to JIRA - see forum thread reference ) From the .xhtml Code : & lt ; h : form id= dataEntryForm & gt ; & lt ; h : inputText id= asdf required= true value= # { biomarkers } / & gt ; & lt ; /h : form & gt ; From the session bean : Code : @ Out Map & lt ; String , String & gt ; biomarkers = new HashMap & lt ; String , String & gt ; ( ) ; // method code that preps the Map prior to being used biomarkers.put ( waist , 33.3 ) ; . 
I want to inject a request parameter to a bean like bellow using expression : @ In ( value= # { param.id } , required=false ) private Long id ; However , Seam gives error java.lang.IllegalArgumentException because the param value is of type String , which doesn t match the field s type Long . I think for injections , Seam should do some basic conversions from String to primitives and primitive wrappers . . 
I would like to extend org.jboss.seam.security.Identity class in order to integrate Seam with 3rd party libraries such as Acegi . For this to work I need to overload the Identity subject . Since the subject attribute is private and Identity class access it always directly ( doesn t use the getter ) and there s no public or protected setter , I can not override it . Could Identity class me modified such as : 1. subject attribute is made protected OR 2. adding a protected setter attribute OR 3 . & # 91 ; better solution I think & # 93 ; always acceeding to subject attribut via its getter . This issue is related with the post Thanks . 
Users ask for this . 
So choices can be remembered for specific section of the site , or the whole site . . 
jBPM does not currently support a pluggable EL engine , so we can t plug in jboss-el . . 
Only enable ManagedEntityInterceptor when needed . The MEI is only needed for : JavaBeans in a cluster that are conversation scoped or EJBs that are conversation scoped Add some configuration to & lt ; core : init / & gt ; to allow the user to enable clustering mode ( or autodetect ) and upgrade the isInterceptorEnabled method to take account of this . . 
The jBPM mechanism for process composition does not work for pageflow . Need to figure out a different mechanism . AFAICT , this needs to be solved more in jBPM than in Seam . . 
Drools now supports pulling globals . . 
Currently , the resourceBundle component uses its own wierd locale . It should use the one from the Http request . . 
Need to add : Conversation.getParentdId ( ) Conversation.getRootId ( ) Conversation.parent ( ) Conversation.root ( ) ; . 
