[ MNG-870 ] Make plugin discovery reactor aware [ MNG-4331 ] Add new mojo annotation @ requiresDependencyCollection to grab dependency tree without files < p > If plugin discovery is reactor aware , plugins that are part of a reactor build and are used to aid the build < br/ > can be used in one go . Else first the plugin should be installed , and then the rest of the project can < br/ > be built. < /p > < p > But mainly this aids in integration testing for plugins : the maven-it-plugin in sandbox can t add the current plugin < br/ > + artifact to the lifecycle without making some methods public . If the plugin were to be discovered using the reactor , < br/ > those methods can remain private. < /p > < p > See thread < a href= http : //markmail.org/message/ui2eywpqux4zi74f class= external-link rel= nofollow > Add new mojo annotation @ requiresDependencyCollection < /a > for details. < /p > 
[ MNG-4381 ] Allow extension plugins to contribute non-core components to be reused by other plugins < p > In Maven 2.x , build extensions can only contribute components that realize a custom impl of some API defined by the Maven core like artifact handlers and lifecycle mappings . However , to support things like Tycho in a stock Maven distro , we need a build extension to provide components that < br/ > a ) realize APIs defined merely by the extension and are unknown to Maven itself < br/ > b ) can be looked up and accessed via API from the extension and other plugins in the same project < br/ > c ) can be shared among all projects in the reactor using the same extension , including state kept by singletons < /p > < p > See also < a href= https : //issues.sonatype.org/browse/TYCHO-236 class= external-link rel= nofollow > https : //issues.sonatype.org/browse/TYCHO-236 < /a > . < /p > 
[ MNG-2576 ] Make Like Reactor Mode < p > Add a commandline option to enable maven to expand the reactor scope to find projects that are dependencies < br/ > of the projects currently in the reactor , and add them. < /p > < p > Currently only the current project and child projects are included in the reactor search . I m proposing < br/ > to add a commandline switch that lets maven check parent directories to find the root of the project tree , < br/ > and then do a normal reactor scan , only adding projects that would normally not be added if they re needed < br/ > as dependencies of the projects that would normally be built. < /p > < p > Here s a sample project tree : < /p > < ul > < li > root < ul > < li > p1 < ul > < li > c1 ( depends on p2 ) < /li > < /ul > < /li > < li > p2 ( depends on c2 ) < /li > < li > p3 < ul > < li > c2 < /li > < /ul > < /li > < /ul > < /li > < /ul > < p > And a sample algorithm : < /p > < ul class= alternate type= square > < li > When building c1 , the reactor would contain < span class= error > & # 91 ; c1 & # 93 ; < /span > . < /li > < /ul > < ul class= alternate type= square > < li > Maven would check p1 , then root , etc , using the & lt ; parent & gt ; tags ( without the versions ! ) < br/ > to see if the project is still in the current reactor. < /li > < /ul > < ul class= alternate type= square > < li > It would then create a second list of projects ( reactor2 ) containing ALL projects , using the newly discovered root : < span class= error > & # 91 ; root , p1 , c2 , p2 & # 93 ; < /span > . < /li > < /ul > < ul class= alternate type= square > < li > remove all projects from reactor2 contained in reactor : reactor2 = < span class= error > & # 91 ; root , p1 , p2 & # 93 ; < /span > < /li > < /ul > < ul class= alternate type= square > < li > resolve all direct dependencies for all projects in reactor in reactor2 and add them to reactor , taking versions into account : reactor = < span class= error > & # 91 ; p2 , c1 & # 93 ; < /span > < /li > < /ul > < ul class= alternate type= square > < li > repeat previous step until all projects have their dependencies resolved from reactor 2. first iteration would yield reactor = < span class= error > & # 91 ; c2 , p2 , c1 & # 93 ; < /span > , < br/ > next iteration would stop since c1 doesn t have any dependencies present in reactor2. < /li > < /ul > < p > This would ensure that when some local project s sources have changed , they ll be incorporated < br/ > in the build , regardless of where you build . So you don t have to do a reactor build each time you change more < br/ > than 1 project , and you don t have to remember which projects you changed and build them in the correct order < br/ > yourself , manually. < /p > 
[ MNG-421 ] process profiles before repositories are used < p > When building projects that inherit a parent pom installed on remote repo that define the remote repo , the parent pom can not be downloaded. < /p > < p > To resolve this we need to be able to configure a bootstrap repo definition in settings.xml. < /p > 
[ MNG-404 ] add a required-maven-version to the POM < p > add the ability to fail if not & gt ; = a specified version of Maven ( plugin requirement as well ? ) . < /p > 
[ MNG-4367 ] Consider layout for mirror selection < p > Extensions like Tycho employ custom repo layouts to access P2 or OBR repos . When it comes to mirroring , it s desirable to use different mirrors for the normal Maven repos and those OSGi repos . Neverthess , users should still be able to use wildcards for easy mirror maintenance but a wildcard matches any repo regardless of its layout/type . So we should enrich the settings model to allow the specification of a layout for the mirror itself that can be considered when selecting a mirror for a specific repository. < /p > 
[ MNG-5730 ] Provide a tool to test Maven version parsing and comparison < p > At the moment , when someone thinks there is a problem , the only way to investigate is to write new unit tests in ComparableVersionTest < /p > < p > a little CLI tool to display the parsed version ( in its canonical form ) and comparing arguments would be useful < /p > < div class= preformatted panel style= border-width : 1px ; > < div class= preformattedContent panelContent > < pre > $ java -jar maven-artifact- * .jar 3.2.4-alpha-1 3.2.4-SNAPSHOT 3.2.4.0 Display parameters as parsed by Maven ( in canonical form ) and comparison result : 1 . 3.2.4-alpha-1 == 3.2.4.alpha.1 3.2.4-alpha-1 & lt ; 3.2.4-SNAPSHOT 2 . 3.2.4-SNAPSHOT == 3.2.4.snapshot 3.2.4-SNAPSHOT & lt ; 3.2.4.0 3 . 3.2.4.0 == 3.2.4 < /pre > < /div > < /div > 
[ MNG-557 ] Add -- settings to be able to control the settings.xml file the m2 cli uses [ MNG-3914 ] Add CLI option to control location of global settings from command line < p > The system properties org.apache.maven.user-settings and org.apache.maven.global-settings are no longer supported by Maven 3.x . While the first one can easily be replaced by the existing CLI option -- settings , there is currently no possibility to control the location of the global settings. < /p > < p > Full control of the settings is helpful in CI and our own ITs. < /p > 
[ MNG-5230 ] Command line option to exclude modules from reactor < p > Every now and then I want to exclude one or more modules from a rather large reactor build. < br/ > One reason for this can be : The respective module has tests that take long time to execute and I know that I don t need to execute them. < /p > < p > Introducing yet another profile for this is not desirable for various reasons. < /p > < p > So , something like an opposite to -pl would come in handy . Let s say -el for exclude list . < /p > < p > Example : < /p > < div class= code panel style= border-width : 1px ; > < div class= codeContent panelContent > < pre class= code-java > root + module a + module a1 + module a2 + module b + module b1 + module c < /pre > < /div > < /div > < p > Calling < em > mvn -el a1 , c < /em > would build all modules execpt a1 and c. < /p > 
[ MNG-2562 ] expose current time as a property for POM interpolation < p > it is useful to have the current time , for example to write out a manifest entry for the build time or to filter into another file. < /p > < p > I m not sure of the best way to make the format of the time configurable - perhaps another POM element/property. < /p > < p > See the related issue for a current example of how this can be done , but it would be nice to have a built-in. < /p > 
[ MNG-768 ] finish offline mode < p > discussion in maven-components/maven-core/src/site/apt/offline-mode.apt. < /p > < p > Need to find a good way to propagate the offline flag into the artifact resolver , or else provide a more centralized way of managing artifact resolution. < /p > 
[ MNG-2681 ] Add cli flag to set all snapshot repos to updatePolicy = never < p > Can we get a flag to mvn , which will set all snapshot repos updatePolicy to never ? < /p > < p > I m trying to get a build that will always use locally installed snapshots , but allow new deps to be downloaded if needed . All I can think of now is to create a new profile which redefines all of the snapshot repos with & lt ; updatePolicy & gt ; never & lt ; /updatePolicy & gt ; ... but that gets messy as I need to add a profile to every pom that defines a repo. < /p > < p > Would it be hard to implement a simple cli flag , like < del > nsu ( < /del > -no-snapshot-updates ) which will just force all snap repos to never update ? This would be very , very , very helpful for automated builds , when the local repo cache is known to have the right deps. < /p > 
[ MNG-505 ] implement version range support in the artifact collector < p > < a href= http : //docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution class= external-link rel= nofollow > http : //docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution < /a > < /p > 
[ MNG-1223 ] warning with multiple child modules with the same artifact id < p > Sometimes when splitting up big modules into child modules I muck up , and end up with multiple children with the same artifactId , which causes trouble later. < /p > < p > It would be nice if at the time when m2 is building the list of all children of a module and ordering them and stuff , if it could warn or throw an error if there are multiple children with the same artifactId - I presume this would only cut in if they also had the same groupId. < /p > 
[ MNG-163 ] It should be possible to add new resource to the resources list < p > For mojos generating resources ( like the modello : jpox-jdo-mapping goal does ) it would be useful to be able to add the generated output to the list of resources like the code generating mojos can. < /p > 
[ MNG-553 ] Secure Storage of Server Passwords [ MNG-4033 ] Introduce password encryption to the trunk < p > This was a question pose to the Maven User s Group and it was suggested I add it here . < /p > < p > It would be benefitial to provide a more secure means of storing password s to the servers listed in the .m2/settings.xml . They are currently being stored as plain text and could definately be considered a security breach . Numerous organizations would undoubtedly considered this an unacceptable security risk , and this could prevent widespread adoption of Maven2. < /p > < p > I would suggest leaving an option to encrypt the password into the settings file ( more secure , but not foolproof ) or even requiring the password to be manually provided per build ( would prevent automation of builds ) . I am sure that there is a secure solution to this problem and it should be part of the 2.0 release. < /p > 
[ MNG-2293 ] maven-plugin-descriptor : Not possible to define a default implementation for a field defined by its interface < p > MOJO-393 is about letting the user define an alternate configuration element , thus changing the way the webstart plugin works. < /p > < p > For that the idea was to make the mojo field an interface , provide a default implementation in the plugin and let the user use plexus to instanciate a new implemenation. < /p > < p > so for most users we would have : < /p > < div class= code panel style= border-width : 1px ; > < div class= codeContent panelContent > < pre class= code-xml > < span class= code-tag > & lt ; configuration & gt ; < /span > < span class= code-tag > & lt ; bla & gt ; < /span > < span class= code-tag > & lt ; /bla & gt ; < /span > < span class= code-tag > & lt ; /configuration & gt ; < /span > < /pre > < /div > < /div > < p > and for some : < /p > < div class= code panel style= border-width : 1px ; > < div class= codeContent panelContent > < pre class= code-xml > < span class= code-tag > & lt ; configuration & gt ; < /span > < span class= code-tag > & lt ; bla implementation= < span class= code-quote > com .... bla < /span > & gt ; < /span > < span class= code-tag > & lt ; /bla & gt ; < /span > < span class= code-tag > & lt ; /configuration & gt ; < /span > < /pre > < /div > < /div > < p > Unfortunately , today I am forced to specify the implementation in both cases . There s no way to inform the plugin to use the default implementation. < /p > < p > The plugin.xml contains : < /p > < div class= code panel style= border-width : 1px ; > < div class= codeContent panelContent > < pre class= code-xml > < span class= code-tag > & lt ; parameter & gt ; < /span > < span class= code-tag > & lt ; name & gt ; < /span > bla < span class= code-tag > & lt ; /name & gt ; < /span > < span class= code-tag > & lt ; type & gt ; < /span > ... BlaInterface < span class= code-tag > & lt ; /type & gt ; < /span > < span class= code-tag > < span class= code-comment > & lt ; ! -- that will fail -- & gt ; < /span > < /span > ... < span class= code-tag > & lt ; /parameter & gt ; < /span > < /pre > < /div > < /div > < p > I tried to use < /p > < div class= code panel style= border-width : 1px ; > < div class= codeContent panelContent > < pre class= code-java > / * * @ parameter implementation= < span class= code-quote > ... BlaImplementation < /span > * / BlaInterface bla ; < /pre > < /div > < /div > < p > but that fails as well. < /p > < p > Marking critical because it doesn t allow me add new features to the plugin without breaking the config.xml. < /p > 
[ MNG-338 ] provide some hand holding for dependencies on non-distributable jars < p > We can create POMs for things like jdbc , jdo , etc , and just not house the JARs at ibiblio. < /p > < p > An attempt to use them , when not present locally , should provide a sensible error message. < /p > < p > We should provide a plugin that will install a file in the local repository , ie : < /p > < p > m2 install : install -Dartifact=/path/to/jdbc-2.0.jar -DgroupId=jdbc -DartifactId=jdbc -Dversion=2.0 < /p > < p > ( modify the install : install mojo to allow taking these parameters instead of a # project ) < /p > 
[ MNG-407 ] Need a way to turn off transient fetching of libraries < p > We need a way to turn off transient retrieval of stuff in the ant tasks . If , for example , I ask for commons-logging-1.04 , the runtime pulls down everything ever used in it < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.pom < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 7K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.pom.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : avalon-framework/avalon-framework/4.1.3/avalon-framework-4.1.3.pom < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : avalon-framework/avalon-framework/4.1.3/avalon-framework-4.1.3.pom.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : junit/junit/3.7/junit-3.7.pom < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : junit/junit/3.7/junit-3.7.pom.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : log4j/log4j/1.2.6/log4j-1.2.6.pom < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : log4j/log4j/1.2.6/log4j-1.2.6.pom.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : logkit/logkit/1.0.1/logkit-1.0.1.pom < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : logkit/logkit/1.0.1/logkit-1.0.1.pom.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : logkit/logkit/1.0.1/logkit-1.0.1.jar < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 70K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : logkit/logkit/1.0.1/logkit-1.0.1.jar.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : log4j/log4j/1.2.6/log4j-1.2.6.jar < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 342K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : log4j/log4j/1.2.6/log4j-1.2.6.jar.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : junit/junit/3.7/junit-3.7.jar < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 114K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : junit/junit/3.7/junit-3.7.jar.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : avalon-framework/avalon-framework/4.1.3/avalon-framework-4.1.3.jar < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 62K < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Downloading : avalon-framework/avalon-framework/4.1.3/avalon-framework-4.1.3.jar.md5 < br/ > < span class= error > & # 91 ; artifact : dependencies & # 93 ; < /span > Transferring 0K < /p > < p > As a consequence , the classpath is then set up wrong . And if we copy the contents of that path ( e.g . into the lib dir of a WAR , we end up with conflicting JAR files ) . < /p > < p > Another example , if if declare a dependency on jaxen-1.1beta6 . That was built against dom4j-1-5.2 . That doesnt have an entry in the maven2 repository , so the build fails . Yet all jaxen needs is a JAXP parser , for which xerces works perfectly well . < /p > < p > I ve looked at the scope attribute , and it seems that transience is certainly noted as a problem , but I m not sure that works . What I really need is a transient=on/off attribute , so I can run with transience off when I am being 100 % explicit about all my dependencies. < /p > 
[ MNG-4398 ] Provide an extension point to track artifact additions to the local repository < p > Integrators like M2Eclipe would like to get notified of updates to the local repository in order to update auxiliary data structures like indexes. < /p > 
[ MNG-455 ] Access to the artifact list of a plugin < p > When making plugins that will fork a java process and when this process requires all the dependencies of the plugin to be on the classpath this would be needed. < /p > 
[ MNG-471 ] implement remaining lifecycle features < p > < a href= http : //docs.codehaus.org/display/MAVEN/Lifecycle class= external-link rel= nofollow > http : //docs.codehaus.org/display/MAVEN/Lifecycle < /a > < /p > 
[ MNG-3220 ] Allow managed dependencies to be imported into other projects < p > Managed dependencies can currently only be incorporated into a project from another project via inheritance . This is problematic as it is often not possible to include projects that have required dependencies as a parent . This issue is being created to track proposals and the resolution of this issue. < /p > 
[ MNG-4936 ] Allow to better monitor and adjust a Maven build during CI < p > For improved integration into CI , Maven should < br/ > a ) have a means to load an extension ( let s call it spy ) via CLI < br/ > b ) enable this spy extension to adjust major parameters of the build like the settings < br/ > c ) provide this spy extension with detailed events about the execution < /p > 
[ MNG-5306 ] for IDE embedding have ways of collecting model problems without failing the process < p > Currently the IDE integrations need to perform 2 steps : < br/ > 1. load the POM with no validation in place . Having a MavenProject instance in the most cases possible is important. < br/ > 2. to display the warnings in pom editor and elsewhere one has to run at least the projectbuilder/modelbuilder with proper validation level and collect the results from either the result object or the exception thrown. < /p > < p > The proposed patch in < a href= https : //github.com/mkleint/maven-3/commits/trunk class= external-link rel= nofollow > https : //github.com/mkleint/maven-3/commits/trunk < /a > makes it possible to have both a MAvenproject instance under minimal validation constraints and collect the validation problems for any higher validation levels. < /p > < p > Additional benefit of the patch is that it logs since what version of Maven is the problem valid . Which can be further used in both cmd line and IDE error reporting. < /p > 
[ MNG-5381 ] Restore MavenSession.getRepositoryCache ( ) < p > Error when running stock Tycho 0.16.0 < /p > < p > Exception in thread main java.lang.NoSuchMethodError : org.apache.maven.execution.MavenSession.getRepositoryCache ( ) Lorg/apache/maven/artifact/repository/RepositoryCache ; < /p > < p > This method was deprecated but it can be bridged to Aether code as this screws up Tycho users unecessarily . Tycho can migrate off this method but currently this breaks all Tycho users which is an unacceptable break. < /p > 
[ MNG-5683 ] Expand session scope so that @ SessionScoped components can be injected into lifecycle participants < p > This small change allows for @ SessionScoped components to be injected into lifecycle participants . Change is here if anyone wants to take a look : < /p > < p > < a href= https : //github.com/jvanzyl/maven/commit/d0ec7515dc66756682c52dc0f7598119d5da595d class= external-link rel= nofollow > https : //github.com/jvanzyl/maven/commit/d0ec7515dc66756682c52dc0f7598119d5da595d < /a > < /p > 
[ MNG-5740 ] Add module maven-builder-support < p > There are some ( almost ) duplicate classes used by the < tt > ModelBuilder < /tt > and < tt > SettingsBuilder < /tt > . With the enhancements of ToolChains there s another need for these classes . So let s extract these classes to a separate module : maven-builder-support < /p > 
[ MNG-5753 ] Allow plugin implementors to choose how they want the configuration created for a particular MojoExecution < p > Provide finer grained control over how a & lt ; configuration/ & gt ; is processed before handing a final mojo configuration over the Configurator which takes the configuration and applies it to the Mojo . My specific use case is that I want to allow many mojos to be configured clearly by scoping the configuration for a Mojo by Mojo name. < /p > 
[ MNG-5774 ] Provide an extension point to provide alternate CLI configuration mechanism < p > Currently the only way to configure an execution session is the settings.xml file mechanism . In essence the code currently works to read the settings.xml file ( s ) and stuffs a bunch of values in the MavenExecutionRequest . It should be possible to easily use different sources of values and use different logic to populate those values. < /p > 
[ MNG-649 ] need to add < classifier > to dependency element < p > I think we have come to need this as not all classifiers will be described by a type handler . The documentation must strongly emphasise that using it means you just get a different build of the same project and that the POM is shared. < /p > 
[ MNG-821 ] file existence profile activation patch < p > & lt ; profile & gt ; < br/ > & lt ; id & gt ; classnames & lt ; /id & gt ; < br/ > & lt ; activation & gt ; < br/ > & lt ; file & gt ; < br/ > & lt ; missing & gt ; target/generated-sources/classname-generator/com/stuff/util/GClassnameProvider.java & lt ; /missing & gt ; < br/ > & lt ; /file & gt ; < br/ > & lt ; /activation & gt ; < br/ > & lt ; build & gt ; < /p > < p > & lt ; exists & gt ; also is a valid tag inside that & lt ; file & gt ; as well. < /p > < p > The problem with this patch atm is that it ceases to work outside of the context of the subproject it exists in .. < /p > < p > this is because in the FileExistenceProfileActivator we have no mechanism of getting the absolute path for that file string. < /p > < p > I looked into BuildBase object that you can get from the Profile passed in but it is empty ( null ) and the string doesn t resolve expressions either ... < /p > < p > so ... if I can get pointed in the right direction for adding that expression resolution in there I ll put that in ... talked to kenney about this a bit on irc this morning as well and he seemed to think that was probably the way to go. < /p > 
[ MNG-5878 ] add support for module name ! = artifactId in every calculated URLs ( project , SCM , site ) : special project.directory property < p > Say you have this project structure : < /p > < div class= preformatted panel style= border-width : 1px ; > < div class= preformattedContent panelContent > < pre > / | -- module1 | -- module2 < /pre > < /div > < /div > < p > and artifactIds are named : < /p > < div class= preformatted panel style= border-width : 1px ; > < div class= preformattedContent panelContent > < pre > my-parent | -- my-module1 | -- my-module2 < /pre > < /div > < /div > < p > Prefix < tt > my- < /tt > is omitted for brevity in module names . For instance , Jersey does that. < /p > < p > When the SCM report is built , the artifactId is always used for path composition which leads to incorrect URLs . You can of course set the parameter < tt > checkoutDirectoryName < /tt > but this would be extremely tedious for all modules down the tree. < /p > < p > The code should obtain the module name and use it for URL composition. < /p > 
[ MNG-922 ] Allow configuring the deployment of a timedstamped artifact when using SNAPSHOT in the version < p > This is essentially the same issue as MPARTIFACT-59 , but for the Maven 2 code base. < /p > < p > When the current version contains SNAPSHOT , every deploy creates a SNAPSHOT artifact and an artifact with a date/time . This causes a LOT of artifacts being created when using a continuous build . Would like to see this feature configurable , so I can turn it off at the very least or have it happen only when I want to or on a scheduled basis. < /p > < p > On a related note , I think it would be good for the date/timestamped version to still contain the word SNAPSHOT . This way , it s very easy to determine whether a project currently has dependencies on snapshot ( unreleased ) versions . I can parse for the date/time format as well , but the common SNAPSHOT keyword would be easier. < /p > 
[ MNG-3507 ] ANSI Color logging for improved output visibility . < p > Is it possible for Maven to use ANSI color logging ? IMO it would make Maven logs much easier to read and increase the visibility of items that the user want to see at any given point in time . < /p > < p > I think Andrew Williams did some work under Plexus sandbox to enable color logging . There also a color logger available in Ant . < br/ > < a href= http : //ant.apache.org/manual/listeners.html # AnsiColorLogger class= external-link rel= nofollow > http : //ant.apache.org/manual/listeners.html # AnsiColorLogger < /a > < /p > 
[ MNG-3832 ] Allow wildcards in dependency exclusions < p > I would like to be able to exclude all transitive dependencies from a certain dependencies . This is especially useful when depending on an artifact with a classifier that may not have the same dependencies as the main artifact . Currently the only way to do this is by excluding each dependency individually which requires significant effort and is prone to becoming out of date . The following syntax is one possibility. < /p > < p > Exclude all transitive dependencies < /p > < div class= code panel style= border-width : 1px ; > < div class= codeContent panelContent > < pre class= code-java > & lt ; exclusion & gt ; & lt ; groupId & gt ; * & lt ; /groupId & gt ; & lt ; /exclusion & gt ; < /pre > < /div > < /div > < p > Exclude transitive dependencies with the groupId org.company < /p > < div class= code panel style= border-width : 1px ; > < div class= codeContent panelContent > < pre class= code-java > & lt ; exclusion & gt ; & lt ; groupId & gt ; org.company & lt ; /groupId & gt ; & lt ; artifactId & gt ; * & lt ; /artifactId & gt ; & lt ; /exclusion & gt ; < /pre > < /div > < /div > 
