Make plugin discovery reactor aware Add new mojo annotation requiresDependencyCollection grab dependency tree without files p plugin discovery reactor aware plugins part reactor build used aid build used one go Else first plugin installed rest project p mainly aids integration testing plugins sandbox add current plugin artifact lifecycle without making methods public plugin discovered using reactor methods remain p See thread http nofollow Add new mojo annotation requiresDependencyCollection
Allow extension plugins contribute components reused plugins p Maven build extensions contribute components realize custom impl API defined Maven core like artifact handlers lifecycle mappings However support things like Tycho stock Maven distro need build extension provide components realize APIs defined merely extension unknown Maven b looked accessed via API extension plugins project c shared among projects reactor using extension including state kept singletons p See also https nofollow https
Make Like Reactor Mode p Add commandline option enable expand reactor scope find projects dependencies projects currently reactor add p Currently current project child projects included reactor search proposing add commandline switch lets check parent directories find root project tree normal reactor scan adding projects would normally added needed dependencies projects would normally p sample project tree ul li root ul li p1 ul li c1 depends p2 li p2 depends c2 li p3 ul li c2 p sample algorithm ul alternate square li building c1 reactor would contain span error 91 c1 93 ul alternate square li Maven would check p1 root etc using lt parent gt tags without versions see project still current ul alternate square li would create second list projects reactor2 containing projects using newly discovered root span error 91 root p1 c2 p2 93 ul alternate square li remove projects reactor2 contained reactor reactor2 span error 91 root p1 p2 93 ul alternate square li resolve direct dependencies projects reactor reactor2 add reactor taking versions account reactor span error 91 p2 c1 93 ul alternate square li repeat previous step projects dependencies resolved reactor first iteration would yield reactor span error 91 c2 p2 c1 93 next iteration would stop since c1 dependencies present p would ensure local project sources changed incorporated build regardless build reactor build time change 1 project remember projects changed build correct order
process profiles repositories used p building projects inherit parent pom installed remote repo define remote repo parent pom p resolve need able configure bootstrap repo definition
add POM p add ability fail gt specified version Maven plugin requirement well
Consider layout mirror selection p Extensions like Tycho employ custom repo layouts access P2 OBR repos comes mirroring desirable use different mirrors normal Maven repos OSGi repos Neverthess users still able use wildcards easy mirror maintenance wildcard matches repo regardless enrich settings model allow specification layout mirror considered selecting mirror specific
Provide tool test Maven version parsing comparison p moment someone thinks problem way investigate write new unit tests ComparableVersionTest p little CLI tool display parsed version canonical form comparing arguments would useful div preformatted panel 1px div preformattedContent panelContent pre java Display parameters parsed Maven canonical form comparison result 1 lt 2 lt 3
Add settings able control file m2 cli uses Add CLI option control location global settings command line p system properties longer supported Maven first one easily replaced existing CLI option settings currently possibility control location global p Full control settings helpful CI
Command line option exclude modules reactor p Every want exclude one modules rather large reactor One reason respective module tests take long time execute know need execute p Introducing yet another profile desirable various p something like opposite would come handy Let say exclude list p Example div code panel 1px div codeContent panelContent pre root module module a1 module a2 module b module b1 module c p Calling em mvn a1 c would build modules execpt a1
expose current time property POM interpolation p useful current time example write manifest entry build time filter another p sure best way make format time configurable perhaps another POM p See related issue current example done would nice
finish offline mode p discussion p Need find good way propagate offline flag artifact resolver else provide centralized way managing artifact
Add cli flag set snapshot repos updatePolicy never p get flag mvn set snapshot repos updatePolicy never p trying get build always use locally installed snapshots allow new deps downloaded needed think create new profile redefines snapshot repos lt updatePolicy gt never lt gt gets messy need add profile every pom defines p Would hard implement simple cli flag like del nsu force snap repos never update would helpful automated builds local repo cache known right
implement version range support artifact collector p http nofollow http
warning multiple child modules artifact id p Sometimes splitting big modules child modules muck end multiple children artifactId causes trouble p would nice time m2 building list children module ordering stuff could warn throw error multiple children artifactId presume would cut also
possible add new resource resources list p mojos generating resources like modello goal would useful able add generated output list resources like code generating mojos
Secure Storage Server Passwords Introduce password encryption trunk p question pose Maven User Group suggested add p would benefitial provide secure means storing password servers listed currently stored plain text could definately considered security breach Numerous organizations would undoubtedly considered unacceptable security risk could prevent widespread adoption p would suggest leaving option encrypt password settings file secure foolproof even requiring password manually provided per build would prevent automation builds sure secure solution problem part
possible define default implementation field defined interface p letting user define alternate configuration element thus changing way webstart plugin p idea make mojo field interface provide default implementation plugin let user use plexus instanciate new p users would div code panel 1px div codeContent panelContent pre span lt configuration gt span lt bla gt span lt gt span lt gt p div code panel 1px div codeContent panelContent pre span lt configuration gt span lt bla span com bla gt span lt gt span lt gt p Unfortunately today forced specify implementation cases way inform plugin use default p contains div code panel 1px div codeContent panelContent pre span lt parameter gt span lt name gt bla span lt gt span lt type gt BlaInterface span lt gt span span lt fail gt span lt gt p tried use div code panel 1px div codeContent panelContent pre parameter span BlaImplementation BlaInterface bla p fails p Marking critical allow add new features plugin without breaking
provide hand holding dependencies jars p create POMs things like jdbc jdo etc house JARs p attempt use present locally provide sensible error p provide plugin install file local repository ie p m2 install install p modify install install mojo allow taking parameters instead project
Need way turn transient fetching libraries p need way turn transient retrieval stuff ant tasks example ask runtime pulls everything ever used span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 7K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 70K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 342K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 114K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 62K span error 91 artifact dependencies 93 Downloading span error 91 artifact dependencies 93 Transferring 0K p consequence classpath set wrong copy contents path lib dir WAR end conflicting JAR files p Another example declare dependency built doesnt entry maven2 repository build fails Yet jaxen needs JAXP parser xerces works perfectly well p looked scope attribute seems transience certainly noted problem sure works really need attribute run transience 100 explicit
Provide extension point track artifact additions local repository p Integrators like M2Eclipe would like get notified updates local repository order update auxiliary data structures like
Access artifact list plugin p making plugins fork java process process requires dependencies plugin classpath would
implement remaining lifecycle features p http nofollow http
Allow managed dependencies imported projects p Managed dependencies currently incorporated project another project via inheritance problematic often possible include projects required dependencies parent issue created track proposals resolution
Allow better monitor adjust Maven build CI p improved integration CI Maven means load extension let call spy via CLI b enable spy extension adjust major parameters build like settings c provide spy extension detailed events execution
IDE embedding ways collecting model problems without failing process p Currently IDE integrations need perform 2 steps load POM validation place MavenProject instance cases possible display warnings pom editor elsewhere one run least proper validation level collect results either result object exception p proposed patch https nofollow https makes possible MAvenproject instance minimal validation constraints collect validation problems higher validation p Additional benefit patch logs since version Maven problem valid used cmd line IDE error
Restore p Error running stock Tycho p Exception thread main p method deprecated bridged Aether code screws Tycho users unecessarily Tycho migrate method currently breaks Tycho users unacceptable
Expand session scope SessionScoped components injected lifecycle participants p small change allows SessionScoped components injected lifecycle participants Change anyone wants take look p https nofollow https
Add module p almost duplicate classes used tt ModelBuilder tt SettingsBuilder enhancements ToolChains another need classes let extract classes separate module
Allow plugin implementors choose want configuration created particular MojoExecution p Provide finer grained control lt gt processed handing final mojo configuration Configurator takes configuration applies Mojo specific use case want allow many mojos configured clearly scoping configuration Mojo Mojo
Provide extension point provide alternate CLI configuration mechanism p Currently way configure execution session file mechanism essence code currently works read file stuffs bunch values MavenExecutionRequest possible easily use different sources values use different logic populate
need add classifier dependency element p think come need classifiers described type handler documentation must strongly emphasise using means get different build project POM
file existence profile activation patch p lt profile gt lt id gt classnames lt gt lt activation gt lt file gt lt missing gt lt gt lt gt lt gt lt build gt p lt exists gt also valid tag inside lt file gt p problem patch atm ceases work outside context subproject exists p FileExistenceProfileActivator mechanism getting absolute path file p looked BuildBase object get Profile passed empty null string resolve expressions either p get pointed right direction adding expression resolution put talked kenney bit irc morning well seemed think probably way
add support module name artifactId every calculated URLs project SCM site special property p Say project structure div preformatted panel 1px div preformattedContent panelContent pre module1 module2 p artifactIds named div preformatted panel 1px div preformattedContent panelContent pre p Prefix tt omitted brevity module names instance Jersey p SCM report built artifactId always used path composition leads incorrect URLs course set parameter tt checkoutDirectoryName would extremely tedious modules p code obtain module name use URL
Allow configuring deployment timedstamped artifact using SNAPSHOT version p essentially issue Maven 2 code p current version contains SNAPSHOT every deploy creates SNAPSHOT artifact artifact causes LOT artifacts created using continuous build Would like see feature configurable turn least happen want scheduled p related note think would good version still contain word SNAPSHOT way easy determine whether project currently dependencies snapshot unreleased versions parse format well common SNAPSHOT keyword would
ANSI Color logging improved output visibility p possible Maven use ANSI color logging IMO would make Maven logs much easier read increase visibility items user want see given point time p think Andrew Williams work Plexus sandbox enable color logging also color logger available Ant http AnsiColorLogger nofollow http AnsiColorLogger
Allow wildcards dependency exclusions p would like able exclude transitive dependencies certain dependencies especially useful depending artifact classifier may dependencies main artifact Currently way excluding dependency individually requires significant effort prone becoming date following syntax one p Exclude transitive dependencies div code panel 1px div codeContent panelContent pre lt exclusion gt lt groupId gt lt gt lt gt p Exclude transitive dependencies groupId div code panel 1px div codeContent panelContent pre lt exclusion gt lt groupId gt lt gt lt artifactId gt lt gt lt gt
